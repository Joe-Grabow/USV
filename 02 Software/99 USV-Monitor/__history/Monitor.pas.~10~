{------------------------------------------------------------------------------}
// Monitor für serielle Schnittstelle
//
// Copyright (c) 1990-2021 j.grabow <grabow@amesys.de> www.amesys.de
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//
{------------------------------------------------------------------------------}
{ Programmname             : Monitor.pas                                       }
{ Copyright                : (c) 2090-2021, AMESYS                             }
{ Beschreibung             : Monitor für serielle Schnittstelle                }
{ Compiler                 : Delphi 10.3.1                                     }
{ Version                  : 00.1                                              }
{ Reviev                   : Beta                                              }
{------------------------------------------------------------------------------}
{ Programmhistorie                                                             }
{ 16.02.21  V. 00.1 Startversion                                               }
{------------------------------------------------------------------------------}


unit Monitor;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ExtCtrls, CPort, CPortCtl, IniFiles, Menus, Vcl.Grids, Vcl.ValEdit,
  Vcl.Mask, Vcl.ComCtrls;

type
  TForm1 = class(TForm)
    ComPort: TComPort;
    GroupBox1: TGroupBox;
    Button_Open: TButton;
    Button_Settings: TButton;
    SaveDialog1: TSaveDialog;
    OpenDialog1: TOpenDialog;
    GroupBox2: TGroupBox;
    Memo2: TMemo;
    Button2: TButton;
    GroupBox3: TGroupBox;
    StringGrid1: TStringGrid;
    Button3: TButton;
    Edit3: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Edit1: TEdit;
    Edit2: TEdit;
    Label3: TLabel;
    GroupBox4: TGroupBox;
    Button1: TButton;
    procedure Button_OpenClick(Sender: TObject);
    procedure Button_SettingsClick(Sender: TObject);
    procedure ComPortOpen(Sender: TObject);
    procedure ComPortClose(Sender: TObject);
    procedure ComPortRxChar(Sender: TObject; Count: Integer);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure StringGrid1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);



  private
    { Private declarations }
    FIni:TMemIniFile;
    FInitFlag:Boolean;

  public
    { Public declarations }
  end;

type
  DBlocktype = array[0..1023] of byte;                        // Datenblocktype
  BArrayType = array[0..255] of byte;                          // Bytearraytype


var
  Form1   : TForm1;

  DBlock  : DBlocktype;                                     // RS485 Datenblock
  DBF     : file of DBlocktype;                    // Binärfile des Datenblocks
  F       : Textfile;                // Textfile des Datenblocks (zum Einlesen)
  Daten   : String;                                       // Zeile im Datensatz
  RX_F    : Array[1..16] of byte;                                   // RX Frame
  F_Count : word;                                              // Frame Counter
  Addr    : word;                                      // Adresse im Datenblock
  DatenL  : byte;                                  // Datenanzahl im Datenblock
  BA      : BArrayType;                                           // Byte-Array
  tempS    : string;

implementation

{$R *.DFM}

//------------------------------------------------------------------------------
// berechnet eine CRC8 Summe über ein Byte
//------------------------------------------------------------------------------
function CRC8(const b: byte): Byte;
const
  Poly = $D5;                                                    // CRC-Polynom
  Init = $00;                                                // CRC Initialwert
var
  crc : byte;
  i   : byte;
begin
  crc := Init;
  crc := crc xor b;
  for i:=1 to 8 do begin
    if (CRC and $80) <> 0 then crc := (crc shl 1) xor Poly
      else crc := crc shl 1;
  end;
  crc8 := crc;
end; // end CRC8



//------------------------------------------------------------------------------
// berechnet eine CRC8 Summe über ein Byte-Array
//------------------------------------------------------------------------------
function CRC8BA(const BA: array of byte; BL : byte): byte;
const
  Poly = $D5;                                                    // CRC-Polynom
  Init = $00;                                                // CRC Initialwert
var
  crc : byte;
  i,j  : byte;
begin
  crc := Init;
  for j := 0 to BL-1 do begin
    crc := crc xor BA[j];
    for i:=1 to 8 do begin
      if (CRC and $80) <> 0 then crc := (crc shl 1) xor Poly
        else crc := crc shl 1;
    end; // end i
  end; // end j
  crc8BA := crc;
end; // end CRC8


//------------------------------------------------------------------------------
// wandelt ein HEX-String um Binärformat um
//------------------------------------------------------------------------------
function HexToBin(Hex: string): Byte;
var
  B: Byte;
  C: Char;
  Idx, Len: Integer;
begin
  Len := Length(Hex);
  If Len = 0 then Exit;
  Idx := 1;
  repeat
    C := Hex[Idx];
    case C of
      '0'..'9': B := Byte((Ord(C) - Ord('0')) shl 4);
      'A'..'F': B := Byte(((Ord(C) - Ord('A')) + 10) shl 4);
      'a'..'f': B := Byte(((Ord(C) - Ord('a')) + 10) shl 4);
    else
      raise Exception.Create('bad hex data');
    end;
    C := Hex[Idx+1];
    case C of
      '0'..'9': B := B or Byte(Ord(C) - Ord('0'));
      'A'..'F': B := B or Byte((Ord(C) - Ord('A')) + 10);
      'a'..'f': B := B or Byte((Ord(C) - Ord('a')) + 10);
    else
      raise Exception.Create('bad hex data');
    end;
    Inc(Idx, 2);
    Result := B;
  until Idx > Len;
end;

//------------------------------------------------------------------------------
// wandelt ein String in HEX-Darstellung um
//------------------------------------------------------------------------------
function StringToHex(S: String): String;                       // Hilfsfunktion
var I: Integer;
begin
  Result:= '';
  for i := 1 to length (S) do
    Result:= Result+IntToHex(ord(S[i]),2);
end;

//------------------------------------------------------------------------------
// Delay Funktion
//------------------------------------------------------------------------------
procedure Delay(msec: integer);                                // Hilfsfunktion
var start, stop: LongInt;
begin
  start := GetTickCount;
  repeat
    stop := GetTickCount;
    Application.ProcessMessages;
  until (stop-start)>=msec;
end;




procedure Parser(var temp_Str : String; Count : Integer);
var
  i      : byte;
  E_Flag : byte;                                      // Errorflag für RX Frame
  DByte  : byte;                                        // Daten aus Datenblock

begin
 if Count = 8 then begin                   // Framelänge korrekt, Frame erkannt
   for i := 1 to 8 do begin         // Frame in Bytearry speichern und anzeigen
     RX_F[i] := Ord(temp_Str[i]);
     Form1.StringGrid1.Cells[i,1] := Format('%.2x',[RX_F[i]]);
   end;
   inc(F_Count);                                            // Framecounter + 1
   Form1.Edit3.Text := IntToStr(F_Count);
 end; // end if Count

 // Frameinhalt auf Korrektheit prüfen
 E_Flag := 0;                                             // Error Flag löschen
 if Count = 8 then begin                   // Framelänge korrekt, Frame erkannt
   // Überprüfung ob Bytes im Frame korrekt sind
   if RX_F[1] = $A5 then begin                            // Test auf Startbyte
     Form1.StringGrid1.Cells[1,2] := 'OK';
     inc(E_Flag);                                                   // Flag = 1
   end
     else Form1.StringGrid1.Cells[1,2] := 'Error';
   if RX_F[8] = $A6 then begin
     Form1.StringGrid1.Cells[8,2] := 'OK';                  // Test auf Endbyte
     inc(E_Flag);                                                   // Flag = 2
   end
     else Form1.StringGrid1.Cells[8,2] := 'Error';
   if RX_F[5] = $08 then begin
     Form1.StringGrid1.Cells[5,2] := 'OK';               // Test auf Framelänge
     inc(E_Flag);                                                   // Flag = 3
   end
     else Form1.StringGrid1.Cells[5,2] := 'Error';
   if (CRC8(RX_F[6])) = RX_F[7] then begin
     Form1.StringGrid1.Cells[7,2] := 'OK';                      // Test auf CRC
     inc(E_Flag);                                                   // Flag = 4
   end
     else Form1.StringGrid1.Cells[7,2] := 'Error';

   case (RX_F[4] AND $F0) of
     $40: begin
            Form1.StringGrid1.Cells[4,2] := 'read';              // Read-Befehl
            inc(E_Flag);                                            // Flag = 5
          end;
     $80: Form1.StringGrid1.Cells[4,2] := 'write';
     else Form1.StringGrid1.Cells[4,2] := 'Error';
   end; // end Case

   DatenL := RX_F[6];                             // Datenlänge aus Frame lesen
   Form1.Edit2.Text := Format('%.2x',[DatenL]);;     // Hex formatierte Ausgabe
   WordRec(Addr).Hi := RX_F[4] AND $0F;                 // read/write abtrennen
   WordRec(Addr).Lo := RX_F[3];              // Frame lesen, Adresse ausrechnen
   Form1.Edit1.Text := Format('%.3x',[Addr]);        // Hex formatierte Ausgabe


   if E_Flag = 5 then begin               // wenn Frame korrekt, Antwort senden
     Form1.ComPort.WriteStr(Chr($5A));                             // Startbyte
     Form1.ComPort.WriteStr(Chr($00));                                    // ID
     Form1.ComPort.WriteStr(Chr(RX_F[3]));                  // Adresse Low-Teil
     Form1.ComPort.WriteStr(Chr(RX_F[4] AND $0F));         // Adresse High-Teil
     Form1.ComPort.WriteStr(Chr(RX_F[6]+7));                  // Framelänge n+7

     for i := 0 to RX_F[6]-1 do begin          // Daten aus Datenblock auslesen
       DByte := DBlock[Addr+i];
       BA[i] := DByte;                                // in Bytearray für CRC-8
       Form1.ComPort.WriteStr(Chr(DByte));                  // auf COM ausgeben
     end;

     DByte := CRC8BA(BA,RX_F[6]);            // CRC8 über Anzahl der Datenbytes
     Form1.ComPort.WriteStr(Chr(DByte));
     Form1.ComPort.WriteStr(Chr($5B));                               // Endbyte

     E_Flag := 0;                                        // Flag wieder löschen
   end; // end if E_Flag

 end; // end if Count

end; // end Parser


//------------------------------------------------------------------------------
// File Open Button Click
// liest ein Textfile ein und bildet einen Speicherblock mit Daten
//------------------------------------------------------------------------------
procedure TForm1.Button1Click(Sender: TObject);
var
  tempS : String;
  HexS  : String;                                         // einzelnes Hex-Byte
  ADDR  : word;                                     // Adresse im Speicherblock
  BZahl : byte;                               // Anzahl der Bytes zum Speichern
  i,j   : byte;
begin
 Opendialog1.Filter:='Datensatz | *.txt';                   // Dateierweiterung
 OpenDialog1.Execute();                                       // Open ausführen
 AssignFile(F, OpenDialog1.Filename);
 Reset(F);                                                      // Datei öffnen
 while not Eof(F) do begin                      // Daten bis zum Fileende lesen
   Readln(F, Daten);                                         // Textzeile lesen
   tempS := Copy(Daten,1,5);                               // Adresse abspalten
   ADDR := StrToInt(tempS);                                // Adresse umwandeln
   tempS := Copy(Daten,7,4);                            // Byteanzahl abspalten
   BZahl := StrToInt(tempS);
   tempS := Copy(Daten,12,BZahl*2);                          // Daten abspalten
   i := 1;                                        // mit erster Stelle beginnen
   j := 0;                                                       // Adressindex
   while i <= Length(tempS) do begin
     HexS := Copy(TempS,i,2);                              // Hexbyte abspalten
     DBlock[ADDR+j] := HexToBin(HexS);              // im Datenfeld abspeichern
     inc(i,2);                                    // in Hexbyte Zweierschritten
     inc(j);                                   // Adressindex in Einerschritten
   end; // end while i<=
 end; // end while not EOF
 AssignFile(DBF,'USV.bin');  // Datenblock zur Kontrolle in Binärfile schreiben
 Rewrite(DBF);                                            // neues File anlegen
 Write(DBF,DBlock);
 CloseFile(DBF);
 CloseFile(F);
 ShowMessage('Data block generated');
end;


//------------------------------------------------------------------------------
// Clear Received Button Click
//------------------------------------------------------------------------------
Procedure TForm1.Button2Click(Sender: TObject);
begin
 Memo2.Text := '';                                           // Textbox löschen
end;


//------------------------------------------------------------------------------
// Clear Count Button Click
//------------------------------------------------------------------------------
procedure TForm1.Button3Click(Sender: TObject);
var i : byte;
begin
 F_Count := 0;                                         // Frame-Counter löschen
 Edit3.Text := '';                                                     // Count
 Edit1.Text := '';                                                    // Adress
 Edit2.Text := '';                                               // Data length
 for i := 1 to 8 do begin
   RX_F[i] := 0;                                               // Frame löschen
   StringGrid1.Cells[i,1] := '';
   StringGrid1.Cells[i,2] := '';
 end;
end;


//------------------------------------------------------------------------------
// Connect Button Click
//------------------------------------------------------------------------------
procedure TForm1.Button_OpenClick(Sender: TObject);
begin
  if ComPort.Connected then
    ComPort.Close
  else
    ComPort.Open;
end;

//------------------------------------------------------------------------------
// COM-Port open
//------------------------------------------------------------------------------
procedure TForm1.ComPortOpen(Sender: TObject);
begin
  Button_Open.Caption := 'Disconnect';
end;

//------------------------------------------------------------------------------
// COM-Port close
//------------------------------------------------------------------------------
procedure TForm1.ComPortClose(Sender: TObject);
begin
  if Button_Open <> nil then
   Button_Open.Caption := 'Connect';
end;

//------------------------------------------------------------------------------
// COM-Port Settings Click
//------------------------------------------------------------------------------
procedure TForm1.Button_SettingsClick(Sender: TObject);
begin
  ComPort.ShowSetupDialog;                  // öffne Dialogfenster für Settings
end;

{
procedure TForm1.Button_SendClick(Sender: TObject);
var
  Str: String;
begin
  Str := Edit_Data.Text;
  if NewLine_CB.Checked then
    Str := Str + #13#10;
  ComPort.WriteStr(Str);
end;
}

//------------------------------------------------------------------------------
// Empfangsroutine wird ausgelöst, sobald ein Zeichen im Puffer ist
// Temp-Str enthält den RX String
// Count die Länge des RX String
//------------------------------------------------------------------------------
procedure TForm1.ComPortRxChar(Sender: TObject; Count: Integer);
var
  Temp_Str : String;                              // Empfangsstring (Bytewerte)
  Hex_Str  : String;                                    // String im Hex-Format
  i        : byte;
  Hex      : byte;
begin
  ComPort.ReadStr(Temp_Str, Count);
  for i := 1 to Count do begin
    Hex := Ord(Temp_Str[i]);                               // in Byte umwandeln
    Hex_Str := Format('%.2x',[Hex]);       // Byte in Hex-Darstellung umwandeln
    Memo2.Text := Memo2.Text + Hex_Str + ' ';            // Ausgabe an Terminal
  end; // end i
  Memo2.Text := Memo2.Text + #13#10;                          // Zeilenvorschub
  Parser(Temp_Str, Count);
end;


//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Programm wird durch Anwender beendet
//------------------------------------------------------------------------------
procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   if Assigned(FIni) then begin
     FIni.WriteString('ComPort', 'ComPort', ComPort.Port );
     FIni.WriteString('ComPort','BaudRate', BaudRateToStr( ComPort.BaudRate ) );
     FIni.WriteString('ComPort','FlowControl', FlowControlToStr(ComPort.FlowControl.FlowControl ));
     FIni.UpdateFile;
     FIni.Free;
   end;
end;


//------------------------------------------------------------------------------
// Programmstart durch Anwender
//------------------------------------------------------------------------------
procedure TForm1.FormCreate(Sender: TObject);
begin
 if not FInitFlag then begin   // wenn kein Terminal.ini-File existiert, File anlegen bzw. Änderungen übernehmen
   FInitFlag := true;
   FIni := TMemIniFile.Create( ExtractFilePath(Application.ExeName)+'Monitor.ini');
   ComPort.Port := FIni.ReadString('ComPort', 'ComPort',ComPort.Port);
   ComPort.BaudRate := StrToBaudRate( FIni.ReadString('ComPort','BaudRate', '250000'));
   ComPort.FlowControl.FlowControl := StrToFlowControl( FIni.ReadString('ComPort','FlowControl', 'none'));
  end;

 ComPort.DiscardNull := false;  // Null Terminierung bei Strings abschalten !!!
 Memo2.Text := '';
 F_Count := 0;                                        // Frame-Counter auf null

 // Framegrid
 StringGrid1.ColWidths[0] := 0;                    // erste Spalte mit Breite 0
 StringGrid1.Cells[1,0] := 'Startbyte';
 StringGrid1.Cells[2,0] := 'ID';
 StringGrid1.Cells[3,0] := 'Addr.';
 StringGrid1.Cells[4,0] := 'Addr.';
 StringGrid1.Cells[5,0] := 'F-Len';
 StringGrid1.Cells[6,0] := 'D-Len';
 StringGrid1.Cells[7,0] := 'CRC-8';
 StringGrid1.Cells[8,0] := 'Endbyte';

end;

procedure TForm1.FormShow(Sender: TObject);
begin
{
 if not FInitFlag then begin   // wenn kein Terminal.ini-File existiert, File anlegen bzw. Änderungen übernehmen
   FInitFlag := true;
   FIni := TMemIniFile.Create( ExtractFilePath(Application.ExeName)+'terminal.ini');
   ComPort.Port := FIni.ReadString('ComPort', 'ComPort',ComPort.Port);
   ComPort.BaudRate := StrToBaudRate( FIni.ReadString('ComPort','BaudRate', '9600'));
   ComPort.FlowControl.FlowControl := StrToFlowControl( FIni.ReadString('ComPort','FlowControl', 'none'));
   ComLed1.Kind := lkRedLight;                            // Connet LED ist rot
  end;
}
end;





procedure TForm1.StringGrid1Click(Sender: TObject);
begin
 tempS := '';
end;

Begin

End.
