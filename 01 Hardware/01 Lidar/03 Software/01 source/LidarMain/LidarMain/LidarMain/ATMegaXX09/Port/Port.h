////////////////////////////////////////////////////////////////////////////////////////////////////
// Port.h
//
// Created: 11.09.2020 16:55:10
//  Author: franke
//////////////////////////////////////////////////////////////////////////////////////////////////// 

#ifndef PORT_H_
#define PORT_H_

#include <avr/io.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
// globale Definitionen
////////////////////////////////////////////////////////////////////////////////////////////////////
#if defined PORTF
#define COUNT_PORT 6
#elif defined PORTE
#define COUNT_PORT 5
#elif defined PORTD
#define COUNT_PORT 4
#elif defined PORTC
#define COUNT_PORT 3
#elif defined PORTB
#define COUNT_PORT 2
#elif defined PORTA
#define COUNT_PORT 1
#else
#define COUNT_PORT 0
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
// globale Typendefinitionen
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum
{
	#ifdef PORTA	// Index
	iPORTA,			// 0
	#endif
	#ifdef PORTB
	iPORTB,			// 1
	#endif
	#ifdef PORTC
	iPORTC,			// 2
	#endif
	#ifdef PORTD
	iPORTD,			// 3
	#endif
	#ifdef PORTE
	iPORTE,			// 4
	#endif
	#ifdef PORTF
	iPORTF,			// 5
	#endif	
}ePort_t;


typedef union PORTu_t
{
	struct
	{
		#ifdef PORTA	// Index
		PORT_t A;		// 0
		#endif
		#ifdef PORTB
		PORT_t B;		// 1
		#endif
		#ifdef PORTC
		PORT_t C;		// 2
		#endif
		#ifdef PORTD
		PORT_t D;		// 3
		#endif
		#ifdef PORTE
		PORT_t E;		// 4
		#endif
		#ifdef PORTF
		PORT_t F;		// 5
		#endif
	}PORT;
	PORT_t INDEX[COUNT_PORT];
}PORTs_t;

////////////////////////////////////////////////////////////////////////////////////////////////////
// globale Macros
////////////////////////////////////////////////////////////////////////////////////////////////////
#define PORTs (*(PORTs_t *) &(PORTA)) /* I/O Ports */

#endif // PORT_H_ //

// EOF //
