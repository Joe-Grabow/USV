
solution1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00802800  0000159b  0000166f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001566  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000035  00005566  00001566  0000163a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000026  008028e6  008028e6  00001755  2**0
                  ALLOC
  4 .eeprom       00000020  00810000  00810000  00001755  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001a8  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000056a0  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002bd4  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000014fc  00000000  00000000  00009c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006c8  00000000  00000000  0000b100  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000212f  00000000  00000000  0000b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002732  00000000  00000000  0000d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000318  00000000  00000000  00010029  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_17>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_19>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_26>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_28>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_31>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_33>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	20 01       	movw	r4, r0
      92:	0a 01       	movw	r0, r20
      94:	0c 01       	movw	r0, r24
      96:	0a 01       	movw	r0, r20
      98:	0e 01       	movw	r0, r28
      9a:	0a 01       	movw	r0, r20
      9c:	10 01       	movw	r2, r0
      9e:	0a 01       	movw	r0, r20
      a0:	12 01       	movw	r2, r4
      a2:	0a 01       	movw	r0, r20
      a4:	14 01       	movw	r2, r8
      a6:	0a 01       	movw	r0, r20
      a8:	0a 01       	movw	r0, r20
      aa:	0a 01       	movw	r0, r20
      ac:	16 01       	movw	r2, r12
      ae:	0a 01       	movw	r0, r20
      b0:	0a 01       	movw	r0, r20
      b2:	0a 01       	movw	r0, r20
      b4:	0a 01       	movw	r0, r20
      b6:	0a 01       	movw	r0, r20
      b8:	0a 01       	movw	r0, r20
      ba:	0a 01       	movw	r0, r20
      bc:	18 01       	movw	r2, r16
      be:	0a 01       	movw	r0, r20
      c0:	0a 01       	movw	r0, r20
      c2:	0a 01       	movw	r0, r20
      c4:	0a 01       	movw	r0, r20
      c6:	0a 01       	movw	r0, r20
      c8:	0a 01       	movw	r0, r20
      ca:	0a 01       	movw	r0, r20
      cc:	1a 01       	movw	r2, r20
      ce:	0a 01       	movw	r0, r20
      d0:	0a 01       	movw	r0, r20
      d2:	0a 01       	movw	r0, r20
      d4:	0a 01       	movw	r0, r20
      d6:	0a 01       	movw	r0, r20
      d8:	0a 01       	movw	r0, r20
      da:	0a 01       	movw	r0, r20
      dc:	0a 01       	movw	r0, r20
      de:	0a 01       	movw	r0, r20
      e0:	0a 01       	movw	r0, r20
      e2:	0a 01       	movw	r0, r20
      e4:	0a 01       	movw	r0, r20
      e6:	0a 01       	movw	r0, r20
      e8:	0a 01       	movw	r0, r20
      ea:	0a 01       	movw	r0, r20
      ec:	1c 01       	movw	r2, r24
      ee:	0a 01       	movw	r0, r20
      f0:	0a 01       	movw	r0, r20
      f2:	0a 01       	movw	r0, r20
      f4:	0a 01       	movw	r0, r20
      f6:	0a 01       	movw	r0, r20
      f8:	0a 01       	movw	r0, r20
      fa:	0a 01       	movw	r0, r20
      fc:	0a 01       	movw	r0, r20
      fe:	0a 01       	movw	r0, r20
     100:	0a 01       	movw	r0, r20
     102:	0a 01       	movw	r0, r20
     104:	0a 01       	movw	r0, r20
     106:	0a 01       	movw	r0, r20
     108:	0a 01       	movw	r0, r20
     10a:	0a 01       	movw	r0, r20
     10c:	1e 01       	movw	r2, r28

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	cd bf       	out	0x3d, r28	; 61
     116:	df e3       	ldi	r29, 0x3F	; 63
     118:	de bf       	out	0x3e, r29	; 62

0000011a <__do_copy_data>:
     11a:	18 e2       	ldi	r17, 0x28	; 40
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b8 e2       	ldi	r27, 0x28	; 40
     120:	eb e9       	ldi	r30, 0x9B	; 155
     122:	f5 e1       	ldi	r31, 0x15	; 21
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a6 3e       	cpi	r26, 0xE6	; 230
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	29 e2       	ldi	r18, 0x29	; 41
     132:	a6 ee       	ldi	r26, 0xE6	; 230
     134:	b8 e2       	ldi	r27, 0x28	; 40
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	ac 30       	cpi	r26, 0x0C	; 12
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 9d 08 	call	0x113a	; 0x113a <main>
     144:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <get_CPU_CLK>:
	
////////////////////////////////////////////////////////////////////////////////////////////////////
// Deklaration für lokale Funktionen
////////////////////////////////////////////////////////////////////////////////////////////////////
void get_CPU_CLK(void)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	6d 97       	sbiw	r28, 0x1d	; 29
     156:	cd bf       	out	0x3d, r28	; 61
     158:	de bf       	out	0x3e, r29	; 62
	uint8_t Prescaler_tab[] = CLK_Prescaler_Table;
     15a:	8d e0       	ldi	r24, 0x0D	; 13
     15c:	e6 e6       	ldi	r30, 0x66	; 102
     15e:	f5 e5       	ldi	r31, 0x55	; 85
     160:	de 01       	movw	r26, r28
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	01 90       	ld	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	8a 95       	dec	r24
     16a:	e1 f7       	brne	.-8      	; 0x164 <get_CPU_CLK+0x18>
	uint32_t Main_CLK_Switch_tab[] = Main_CLK_Switch_Table;
     16c:	80 e1       	ldi	r24, 0x10	; 16
     16e:	e3 e7       	ldi	r30, 0x73	; 115
     170:	f5 e5       	ldi	r31, 0x55	; 85
     172:	de 01       	movw	r26, r28
     174:	1e 96       	adiw	r26, 0x0e	; 14
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	8a 95       	dec	r24
     17c:	e1 f7       	brne	.-8      	; 0x176 <get_CPU_CLK+0x2a>
	uint8_t Prescaler = 0;
	
	uint32_t Main_CLK_Switch = Main_CLK_Switch_tab[(CLKCTRL.MCLKCTRLA & CLKCTRL_CLKSEL_gm)];
     17e:	a0 e6       	ldi	r26, 0x60	; 96
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	ec 91       	ld	r30, X
     184:	e3 70       	andi	r30, 0x03	; 3
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	2c 0f       	add	r18, r28
     196:	3d 1f       	adc	r19, r29
     198:	e2 0f       	add	r30, r18
     19a:	f3 1f       	adc	r31, r19
     19c:	65 85       	ldd	r22, Z+13	; 0x0d
     19e:	76 85       	ldd	r23, Z+14	; 0x0e
     1a0:	87 85       	ldd	r24, Z+15	; 0x0f
     1a2:	90 89       	ldd	r25, Z+16	; 0x10
	
	
	if((CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) == CLKCTRL_PEN_bm)
     1a4:	11 96       	adiw	r26, 0x01	; 1
     1a6:	2c 91       	ld	r18, X
     1a8:	20 ff       	sbrs	r18, 0
     1aa:	1b c0       	rjmp	.+54     	; 0x1e2 <get_CPU_CLK+0x96>
	{
		Prescaler = Prescaler_tab[((CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm)>>1)];
     1ac:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
     1b0:	ee 71       	andi	r30, 0x1E	; 30
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	f5 95       	asr	r31
     1b6:	e7 95       	ror	r30
     1b8:	21 e0       	ldi	r18, 0x01	; 1
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	2c 0f       	add	r18, r28
     1be:	3d 1f       	adc	r19, r29
     1c0:	e2 0f       	add	r30, r18
     1c2:	f3 1f       	adc	r31, r19
     1c4:	20 81       	ld	r18, Z
		CLK_CPU = Main_CLK_Switch/Prescaler;
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	0e 94 5f 09 	call	0x12be	; 0x12be <__udivmodsi4>
     1d0:	20 93 e6 28 	sts	0x28E6, r18	; 0x8028e6 <__data_end>
     1d4:	30 93 e7 28 	sts	0x28E7, r19	; 0x8028e7 <__data_end+0x1>
     1d8:	40 93 e8 28 	sts	0x28E8, r20	; 0x8028e8 <__data_end+0x2>
     1dc:	50 93 e9 28 	sts	0x28E9, r21	; 0x8028e9 <__data_end+0x3>
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <get_CPU_CLK+0xa6>
	}
	else
	{
		CLK_CPU = Main_CLK_Switch;
     1e2:	60 93 e6 28 	sts	0x28E6, r22	; 0x8028e6 <__data_end>
     1e6:	70 93 e7 28 	sts	0x28E7, r23	; 0x8028e7 <__data_end+0x1>
     1ea:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <__data_end+0x2>
     1ee:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <__data_end+0x3>
	}
}
     1f2:	6d 96       	adiw	r28, 0x1d	; 29
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <init_Core_CLK>:
////////////////////////////////////////////////////////////////////////////////////////////////////
void init_Core_CLK(uint8_t type, uint8_t prescaler)
{
	register uint8_t reg_val = 0;
	//Nur eine Art von Taktgeber darf gleichzeitig ausgewaehaelt werden
	switch (prescaler){
     1fe:	46 2f       	mov	r20, r22
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	fa 01       	movw	r30, r20
     204:	32 97       	sbiw	r30, 0x02	; 2
     206:	ef 33       	cpi	r30, 0x3F	; 63
     208:	f1 05       	cpc	r31, r1
     20a:	20 f4       	brcc	.+8      	; 0x214 <init_Core_CLK+0x16>
     20c:	e8 5b       	subi	r30, 0xB8	; 184
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__tablejump2__>
	case 1:
		prescaler = ~CLKCTRL_PEN_bm;
     214:	2e ef       	ldi	r18, 0xFE	; 254
     216:	15 c0       	rjmp	.+42     	; 0x242 <init_Core_CLK+0x44>
		break;
	case 2:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_2X_gc);
		break;
	case 4:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_4X_gc);
     218:	23 e0       	ldi	r18, 0x03	; 3
		break;
     21a:	13 c0       	rjmp	.+38     	; 0x242 <init_Core_CLK+0x44>
	case 6:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_6X_gc);
     21c:	21 e1       	ldi	r18, 0x11	; 17
		break;
     21e:	11 c0       	rjmp	.+34     	; 0x242 <init_Core_CLK+0x44>
	case 8:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_8X_gc);
     220:	25 e0       	ldi	r18, 0x05	; 5
		break;
     222:	0f c0       	rjmp	.+30     	; 0x242 <init_Core_CLK+0x44>
	case 10:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_10X_gc);
     224:	23 e1       	ldi	r18, 0x13	; 19
		break;
     226:	0d c0       	rjmp	.+26     	; 0x242 <init_Core_CLK+0x44>
	case 12:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_12X_gc);
     228:	25 e1       	ldi	r18, 0x15	; 21
		break;
     22a:	0b c0       	rjmp	.+22     	; 0x242 <init_Core_CLK+0x44>
	case 16:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_16X_gc);
     22c:	27 e0       	ldi	r18, 0x07	; 7
		break;
     22e:	09 c0       	rjmp	.+18     	; 0x242 <init_Core_CLK+0x44>
	case 24:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_24X_gc);
     230:	27 e1       	ldi	r18, 0x17	; 23
		break;
     232:	07 c0       	rjmp	.+14     	; 0x242 <init_Core_CLK+0x44>
	case 32:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_32X_gc);
     234:	29 e0       	ldi	r18, 0x09	; 9
		break;
     236:	05 c0       	rjmp	.+10     	; 0x242 <init_Core_CLK+0x44>
	case 48:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_48X_gc);
     238:	29 e1       	ldi	r18, 0x19	; 25
		break;
     23a:	03 c0       	rjmp	.+6      	; 0x242 <init_Core_CLK+0x44>
	case 64:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_64X_gc);
     23c:	2b e0       	ldi	r18, 0x0B	; 11
		break;
     23e:	01 c0       	rjmp	.+2      	; 0x242 <init_Core_CLK+0x44>
	switch (prescaler){
	case 1:
		prescaler = ~CLKCTRL_PEN_bm;
		break;
	case 2:
		prescaler = (CLKCTRL_PEN_bm)|(CLKCTRL_PDIV_2X_gc);
     240:	21 e0       	ldi	r18, 0x01	; 1
		break;
	default:
		prescaler = ~CLKCTRL_PEN_bm;
		break;
	}
	switch(type){
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <init_Core_CLK+0x4e>
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	81 f0       	breq	.+32     	; 0x26a <init_Core_CLK+0x6c>
     24a:	08 95       	ret
		case EXTCLK:
			// externen 32.768 kHz Crystal Oscillator auswählen für RTC
			reg_val = CLKCTRL.XOSC32KCTRLA;
     24c:	e0 e6       	ldi	r30, 0x60	; 96
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	84 8d       	ldd	r24, Z+28	; 0x1c
			reg_val = (reg_val & ~CLKCTRL_CSUT_gm) | CLKCTRL_CSUT_16K_gc;
     252:	8f 7c       	andi	r24, 0xCF	; 207
			reg_val |= CLKCTRL_RUNSTDBY_bm;
			reg_val |= CLKCTRL_ENABLE_bm;
     254:	83 61       	ori	r24, 0x13	; 19
			CPU_CCP = CCP_IOREG_gc;
     256:	98 ed       	ldi	r25, 0xD8	; 216
     258:	94 bf       	out	0x34, r25	; 52
			CLKCTRL.XOSC32KCTRLA = reg_val;
     25a:	84 8f       	std	Z+28, r24	; 0x1c
			get_CPU_CLK();
     25c:	0e 94 a6 00 	call	0x14c	; 0x14c <get_CPU_CLK>
			while((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm);
     260:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
     264:	86 ff       	sbrs	r24, 6
     266:	fc cf       	rjmp	.-8      	; 0x260 <init_Core_CLK+0x62>
     268:	08 95       	ret
			break;
		case INTERN_CLK:
			//16/20MHz Internal oscillator
			reg_val = CLKCTRL.MCLKCTRLA;
     26a:	e0 e6       	ldi	r30, 0x60	; 96
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	90 81       	ld	r25, Z
			reg_val |= CLKCTRL_CLKSEL_OSC20M_gc;
			reg_val &= ~CLKCTRL_CLKOUT_bm;
     270:	9f 77       	andi	r25, 0x7F	; 127
			CCP=CCP_IOREG_gc;
     272:	88 ed       	ldi	r24, 0xD8	; 216
     274:	84 bf       	out	0x34, r24	; 52
			CLKCTRL.MCLKCTRLA = reg_val;
     276:	90 83       	st	Z, r25
			
			//Prescaler disable
			reg_val = prescaler;
			CCP=CCP_IOREG_gc;
     278:	84 bf       	out	0x34, r24	; 52
			CLKCTRL.MCLKCTRLB = reg_val;
     27a:	21 83       	std	Z+1, r18	; 0x01
			//unlock
			CCP=CCP_IOREG_gc;
     27c:	84 bf       	out	0x34, r24	; 52
			CLKCTRL.MCLKLOCK &= ~CLKCTRL_LOCKEN_bm;
     27e:	82 81       	ldd	r24, Z+2	; 0x02
     280:	8e 7f       	andi	r24, 0xFE	; 254
     282:	82 83       	std	Z+2, r24	; 0x02
			get_CPU_CLK();
     284:	0e 94 a6 00 	call	0x14c	; 0x14c <get_CPU_CLK>
			while(CLKCTRL.MCLKSTATUS !=(CLKCTRL_OSC20MS_bm &(~CLKCTRL_EXTS_bm)&(~CLKCTRL_XOSC32KS_bm)&(~CLKCTRL_SOSC_bm)));
     288:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
     28c:	80 31       	cpi	r24, 0x10	; 16
     28e:	e1 f7       	brne	.-8      	; 0x288 <init_Core_CLK+0x8a>
     290:	08 95       	ret

00000292 <FIFO_writebyte>:
		__const8_init__ FIFO->FIFO_max = _FIFO_max_def;
	}
}

bool FIFO_writebyte(sFIFO_t* FIFO, uint8_t byte)
{
     292:	fc 01       	movw	r30, r24
	return (FIFO->p_read != FIFO->p_write);
}

static inline bool FIFO_chk_for_writedata(sFIFO_t* FIFO)
{
	return ( ((FIFO->p_read - FIFO->p_write) + _FIFO_max_def) > 1);
     294:	90 81       	ld	r25, Z
     296:	29 2f       	mov	r18, r25
     298:	2f 71       	andi	r18, 0x1F	; 31
     29a:	92 95       	swap	r25
     29c:	96 95       	lsr	r25
     29e:	97 70       	andi	r25, 0x07	; 7
     2a0:	81 81       	ldd	r24, Z+1	; 0x01
     2a2:	83 70       	andi	r24, 0x03	; 3
     2a4:	88 0f       	add	r24, r24
     2a6:	88 0f       	add	r24, r24
     2a8:	88 0f       	add	r24, r24
     2aa:	98 2b       	or	r25, r24
     2ac:	49 2f       	mov	r20, r25
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	24 1b       	sub	r18, r20
     2b4:	35 0b       	sbc	r19, r21
     2b6:	20 5e       	subi	r18, 0xE0	; 224
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
	if(FIFO_chk_for_writedata(FIFO))
     2ba:	22 30       	cpi	r18, 0x02	; 2
     2bc:	31 05       	cpc	r19, r1
     2be:	b4 f0       	brlt	.+44     	; 0x2ec <FIFO_writebyte+0x5a>
	{
		FIFO->dFIFO.data[FIFO->p_write++] = byte;
     2c0:	9f 5f       	subi	r25, 0xFF	; 255
     2c2:	29 2f       	mov	r18, r25
     2c4:	2f 71       	andi	r18, 0x1F	; 31
     2c6:	92 95       	swap	r25
     2c8:	99 0f       	add	r25, r25
     2ca:	90 7e       	andi	r25, 0xE0	; 224
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 71       	andi	r24, 0x1F	; 31
     2d0:	98 2b       	or	r25, r24
     2d2:	90 83       	st	Z, r25
     2d4:	26 95       	lsr	r18
     2d6:	26 95       	lsr	r18
     2d8:	26 95       	lsr	r18
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	9c 7f       	andi	r25, 0xFC	; 252
     2de:	92 2b       	or	r25, r18
     2e0:	91 83       	std	Z+1, r25	; 0x01
     2e2:	e4 0f       	add	r30, r20
     2e4:	f5 1f       	adc	r31, r21
     2e6:	63 83       	std	Z+3, r22	; 0x03
		return true;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	08 95       	ret
	}
	else
	{
		return false;
     2ec:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2ee:	08 95       	ret

000002f0 <FIFO_readbyte>:

bool FIFO_readbyte(sFIFO_t* FIFO, uint8_t* byte)
{
     2f0:	fc 01       	movw	r30, r24

void init_FIFO(sFIFO_t* FIFO) __attribute__((deprecated));

static inline bool FIFO_chk_for_readdata(sFIFO_t* FIFO)
{
	return (FIFO->p_read != FIFO->p_write);
     2f2:	80 81       	ld	r24, Z
     2f4:	28 2f       	mov	r18, r24
     2f6:	2f 71       	andi	r18, 0x1F	; 31
     2f8:	82 95       	swap	r24
     2fa:	86 95       	lsr	r24
     2fc:	87 70       	andi	r24, 0x07	; 7
     2fe:	91 81       	ldd	r25, Z+1	; 0x01
     300:	93 70       	andi	r25, 0x03	; 3
     302:	99 0f       	add	r25, r25
     304:	99 0f       	add	r25, r25
     306:	99 0f       	add	r25, r25
     308:	89 2b       	or	r24, r25
	if(FIFO_chk_for_readdata(FIFO))
     30a:	28 17       	cp	r18, r24
     30c:	79 f0       	breq	.+30     	; 0x32c <FIFO_readbyte+0x3c>
	{
		*byte = FIFO->dFIFO.data[FIFO->p_read++];
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	82 0f       	add	r24, r18
     312:	98 2f       	mov	r25, r24
     314:	9f 71       	andi	r25, 0x1F	; 31
     316:	80 81       	ld	r24, Z
     318:	80 7e       	andi	r24, 0xE0	; 224
     31a:	89 2b       	or	r24, r25
     31c:	80 83       	st	Z, r24
     31e:	e2 0f       	add	r30, r18
     320:	f1 1d       	adc	r31, r1
     322:	83 81       	ldd	r24, Z+3	; 0x03
     324:	fb 01       	movw	r30, r22
     326:	80 83       	st	Z, r24
		return true;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	08 95       	ret
	}
	else
	{
		return false;
     32c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     32e:	08 95       	ret

00000330 <FIFO_copy_to_lin>:

void FIFO_copy_to_lin(uint8_t* lin_space, sFIFO_t* FIFO, uint8_t lenght)
{
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	8c 01       	movw	r16, r24
     342:	eb 01       	movw	r28, r22
	// lese aus dem Ringpuffer den Lesezeiger aus
	uint8_t* p_read_start = &(FIFO->dFIFO.data[FIFO->p_read]);
     344:	88 81       	ld	r24, Y
     346:	28 2f       	mov	r18, r24
     348:	2f 71       	andi	r18, 0x1F	; 31
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	b9 01       	movw	r22, r18
     34e:	6d 5f       	subi	r22, 0xFD	; 253
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	6c 0f       	add	r22, r28
     354:	7d 1f       	adc	r23, r29
	return ( ((FIFO->p_read - FIFO->p_write) + _FIFO_max_def) > 1);
}

static inline uint8_t FIFO_diff_readdata(sFIFO_t* FIFO)
{
	return (((FIFO->p_write - FIFO->p_read) + _FIFO_max_def)%_FIFO_max_def);
     356:	98 2f       	mov	r25, r24
     358:	92 95       	swap	r25
     35a:	96 95       	lsr	r25
     35c:	97 70       	andi	r25, 0x07	; 7
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	83 70       	andi	r24, 0x03	; 3
     362:	88 0f       	add	r24, r24
     364:	88 0f       	add	r24, r24
     366:	88 0f       	add	r24, r24
     368:	89 2b       	or	r24, r25
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	82 1b       	sub	r24, r18
     36e:	93 0b       	sbc	r25, r19
     370:	80 96       	adiw	r24, 0x20	; 32
     372:	8f 71       	andi	r24, 0x1F	; 31
     374:	90 78       	andi	r25, 0x80	; 128
     376:	99 23       	and	r25, r25
     378:	24 f4       	brge	.+8      	; 0x382 <FIFO_copy_to_lin+0x52>
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	80 6e       	ori	r24, 0xE0	; 224
     37e:	9f 6f       	ori	r25, 0xFF	; 255
     380:	01 96       	adiw	r24, 0x01	; 1
	uint8_t max_read_lenght = FIFO_diff_readdata(FIFO);
	uint8_t copy_lenght = MIN(lenght, max_read_lenght);
     382:	f4 2e       	mov	r15, r20
     384:	84 17       	cp	r24, r20
     386:	08 f4       	brcc	.+2      	; 0x38a <FIFO_copy_to_lin+0x5a>
     388:	f8 2e       	mov	r15, r24
	// Berechne die Länge für die zwei Kopieranweisungen
	uint8_t read_lenght_block1 = MIN((copy_lenght),(FIFO->FIFO_max - FIFO->p_read));
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	ac 01       	movw	r20, r24
     390:	42 1b       	sub	r20, r18
     392:	53 0b       	sbc	r21, r19
     394:	8f 2d       	mov	r24, r15
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	48 17       	cp	r20, r24
     39a:	59 07       	cpc	r21, r25
     39c:	0c f4       	brge	.+2      	; 0x3a0 <FIFO_copy_to_lin+0x70>
     39e:	ca 01       	movw	r24, r20
	uint8_t read_lenght_block2 = copy_lenght - read_lenght_block1;
     3a0:	ef 2c       	mov	r14, r15
     3a2:	e8 1a       	sub	r14, r24
	// lese aus dem Ringpuffer
	memcpy(lin_space, p_read_start, read_lenght_block1);
     3a4:	6c 01       	movw	r12, r24
     3a6:	dd 24       	eor	r13, r13
     3a8:	a6 01       	movw	r20, r12
     3aa:	c8 01       	movw	r24, r16
     3ac:	0e 94 a8 0a 	call	0x1550	; 0x1550 <memcpy>
	memcpy(lin_space+read_lenght_block1, FIFO->dFIFO.data, read_lenght_block2);
     3b0:	be 01       	movw	r22, r28
     3b2:	6d 5f       	subi	r22, 0xFD	; 253
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	4e 2d       	mov	r20, r14
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	c8 01       	movw	r24, r16
     3bc:	8c 0d       	add	r24, r12
     3be:	9d 1d       	adc	r25, r13
     3c0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <memcpy>
	// Lesezeiger anpassen
	FIFO->p_read += copy_lenght;
     3c4:	88 81       	ld	r24, Y
     3c6:	48 2f       	mov	r20, r24
     3c8:	4f 71       	andi	r20, 0x1F	; 31
     3ca:	4f 0d       	add	r20, r15
     3cc:	4f 71       	andi	r20, 0x1F	; 31
     3ce:	80 7e       	andi	r24, 0xE0	; 224
     3d0:	f8 2e       	mov	r15, r24
     3d2:	f4 2a       	or	r15, r20
     3d4:	f8 82       	st	Y, r15
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	08 95       	ret

000003e8 <FIFO_copy_from_lin>:

void FIFO_copy_from_lin(sFIFO_t* FIFO, uint8_t* lin_space, uint8_t lenght)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	fc 01       	movw	r30, r24
}

static inline uint8_t FIFO_diff_writedata(sFIFO_t* FIFO)
{
	return (((FIFO->p_read - FIFO->p_write) + (_FIFO_max_def-1))%_FIFO_max_def);
     3ee:	90 81       	ld	r25, Z
     3f0:	89 2f       	mov	r24, r25
     3f2:	8f 71       	andi	r24, 0x1F	; 31
     3f4:	92 95       	swap	r25
     3f6:	96 95       	lsr	r25
     3f8:	97 70       	andi	r25, 0x07	; 7
     3fa:	21 81       	ldd	r18, Z+1	; 0x01
     3fc:	23 70       	andi	r18, 0x03	; 3
     3fe:	22 0f       	add	r18, r18
     400:	22 0f       	add	r18, r18
     402:	22 0f       	add	r18, r18
     404:	29 2b       	or	r18, r25
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	82 1b       	sub	r24, r18
     40a:	91 09       	sbc	r25, r1
     40c:	4f 96       	adiw	r24, 0x1f	; 31
     40e:	8f 71       	andi	r24, 0x1F	; 31
     410:	90 78       	andi	r25, 0x80	; 128
     412:	99 23       	and	r25, r25
     414:	24 f4       	brge	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	80 6e       	ori	r24, 0xE0	; 224
     41a:	9f 6f       	ori	r25, 0xFF	; 255
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	b8 2f       	mov	r27, r24
	// berechne die maximale Schreiblänge
	uint8_t i;
	uint8_t max_write_lenght = FIFO_diff_writedata(FIFO);
	for(i = 0; i<MIN(lenght, max_write_lenght); i++)
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	26 c0       	rjmp	.+76     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	{
		FIFO->dFIFO.data[FIFO->p_write++] = lin_space[i];
     424:	50 81       	ld	r21, Z
     426:	25 2f       	mov	r18, r21
     428:	22 95       	swap	r18
     42a:	26 95       	lsr	r18
     42c:	27 70       	andi	r18, 0x07	; 7
     42e:	31 81       	ldd	r19, Z+1	; 0x01
     430:	83 2f       	mov	r24, r19
     432:	83 70       	andi	r24, 0x03	; 3
     434:	88 0f       	add	r24, r24
     436:	88 0f       	add	r24, r24
     438:	88 0f       	add	r24, r24
     43a:	82 2b       	or	r24, r18
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 0f       	add	r25, r24
     440:	29 2f       	mov	r18, r25
     442:	2f 71       	andi	r18, 0x1F	; 31
     444:	92 95       	swap	r25
     446:	99 0f       	add	r25, r25
     448:	90 7e       	andi	r25, 0xE0	; 224
     44a:	5f 71       	andi	r21, 0x1F	; 31
     44c:	95 2b       	or	r25, r21
     44e:	90 83       	st	Z, r25
     450:	26 95       	lsr	r18
     452:	26 95       	lsr	r18
     454:	26 95       	lsr	r18
     456:	93 2f       	mov	r25, r19
     458:	9c 7f       	andi	r25, 0xFC	; 252
     45a:	92 2b       	or	r25, r18
     45c:	91 83       	std	Z+1, r25	; 0x01
     45e:	eb 01       	movw	r28, r22
     460:	ca 0f       	add	r28, r26
     462:	d1 1d       	adc	r29, r1
     464:	98 81       	ld	r25, Y
     466:	ef 01       	movw	r28, r30
     468:	c8 0f       	add	r28, r24
     46a:	d1 1d       	adc	r29, r1
     46c:	9b 83       	std	Y+3, r25	; 0x03
void FIFO_copy_from_lin(sFIFO_t* FIFO, uint8_t* lin_space, uint8_t lenght)
{
	// berechne die maximale Schreiblänge
	uint8_t i;
	uint8_t max_write_lenght = FIFO_diff_writedata(FIFO);
	for(i = 0; i<MIN(lenght, max_write_lenght); i++)
     46e:	af 5f       	subi	r26, 0xFF	; 255
     470:	2a 2f       	mov	r18, r26
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	84 2f       	mov	r24, r20
     476:	b4 17       	cp	r27, r20
     478:	08 f4       	brcc	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	8b 2f       	mov	r24, r27
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	84 f2       	brlt	.-96     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		FIFO->dFIFO.data[FIFO->p_write++] = lin_space[i];
	}
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <FIFO_chk_for_writedata>:
		// lese die maximale Anzahl der Bytes im FIFO
		*length = MIN(max_length, FIFO_diff_readdata(&USART_RX_FIFO[USARTnumber]));
		if(*length != 0)
		{
			// Kopiere Daten vom FIFO in das Array
			FIFO_copy_to_lin(*data, &USART_RX_FIFO[USARTnumber], *length);
     48a:	fc 01       	movw	r30, r24
     48c:	90 81       	ld	r25, Z
     48e:	29 2f       	mov	r18, r25
     490:	2f 71       	andi	r18, 0x1F	; 31
     492:	92 95       	swap	r25
     494:	96 95       	lsr	r25
     496:	97 70       	andi	r25, 0x07	; 7
     498:	81 81       	ldd	r24, Z+1	; 0x01
     49a:	83 70       	andi	r24, 0x03	; 3
     49c:	88 0f       	add	r24, r24
     49e:	88 0f       	add	r24, r24
     4a0:	88 0f       	add	r24, r24
     4a2:	98 2b       	or	r25, r24
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	29 1b       	sub	r18, r25
     4a8:	31 09       	sbc	r19, r1
     4aa:	20 5e       	subi	r18, 0xE0	; 224
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	22 30       	cpi	r18, 0x02	; 2
     4b2:	31 05       	cpc	r19, r1
     4b4:	0c f4       	brge	.+2      	; 0x4b8 <FIFO_chk_for_writedata+0x2e>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret

000004ba <FIFO_diff_readdata>:
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 81       	ld	r18, Z
     4be:	92 2f       	mov	r25, r18
     4c0:	92 95       	swap	r25
     4c2:	96 95       	lsr	r25
     4c4:	97 70       	andi	r25, 0x07	; 7
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
     4c8:	83 70       	andi	r24, 0x03	; 3
     4ca:	88 0f       	add	r24, r24
     4cc:	88 0f       	add	r24, r24
     4ce:	88 0f       	add	r24, r24
     4d0:	89 2b       	or	r24, r25
     4d2:	2f 71       	andi	r18, 0x1F	; 31
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	82 1b       	sub	r24, r18
     4d8:	91 09       	sbc	r25, r1
     4da:	80 96       	adiw	r24, 0x20	; 32
     4dc:	8f 71       	andi	r24, 0x1F	; 31
     4de:	90 78       	andi	r25, 0x80	; 128
     4e0:	99 23       	and	r25, r25
     4e2:	24 f4       	brge	.+8      	; 0x4ec <FIFO_diff_readdata+0x32>
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	80 6e       	ori	r24, 0xE0	; 224
     4e8:	9f 6f       	ori	r25, 0xFF	; 255
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	08 95       	ret

000004ee <FIFO_diff_writedata>:
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 81       	ld	r18, Z
     4f2:	92 2f       	mov	r25, r18
     4f4:	9f 71       	andi	r25, 0x1F	; 31
     4f6:	22 95       	swap	r18
     4f8:	26 95       	lsr	r18
     4fa:	27 70       	andi	r18, 0x07	; 7
     4fc:	81 81       	ldd	r24, Z+1	; 0x01
     4fe:	83 70       	andi	r24, 0x03	; 3
     500:	88 0f       	add	r24, r24
     502:	88 0f       	add	r24, r24
     504:	88 0f       	add	r24, r24
     506:	28 2b       	or	r18, r24
     508:	89 2f       	mov	r24, r25
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	82 1b       	sub	r24, r18
     50e:	91 09       	sbc	r25, r1
     510:	4f 96       	adiw	r24, 0x1f	; 31
     512:	8f 71       	andi	r24, 0x1F	; 31
     514:	90 78       	andi	r25, 0x80	; 128
     516:	99 23       	and	r25, r25
     518:	24 f4       	brge	.+8      	; 0x522 <FIFO_diff_writedata+0x34>
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	80 6e       	ori	r24, 0xE0	; 224
     51e:	9f 6f       	ori	r25, 0xFF	; 255
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	08 95       	ret

00000524 <__vector_17>:
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	1f 93       	push	r17
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
     54c:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
     550:	80 fd       	sbrc	r24, 0
     552:	0a c0       	rjmp	.+20     	; 0x568 <__vector_17+0x44>
     554:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     558:	87 ff       	sbrs	r24, 7
     55a:	06 c0       	rjmp	.+12     	; 0x568 <__vector_17+0x44>
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	98 e2       	ldi	r25, 0x28	; 40
     560:	0e 94 45 02 	call	0x48a	; 0x48a <FIFO_chk_for_writedata>
     564:	81 11       	cpse	r24, r1
     566:	19 c0       	rjmp	.+50     	; 0x59a <__vector_17+0x76>
     568:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     56c:	80 78       	andi	r24, 0x80	; 128
     56e:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	1f 91       	pop	r17
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti
     59a:	60 91 00 08 	lds	r22, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	98 e2       	ldi	r25, 0x28	; 40
     5a2:	0e 94 49 01 	call	0x292	; 0x292 <FIFO_writebyte>
     5a6:	80 91 02 29 	lds	r24, 0x2902	; 0x802902 <USART_bytes_received>
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <USART_bytes_received>
     5b0:	90 91 fe 28 	lds	r25, 0x28FE	; 0x8028fe <USART_bytes_to_receive>
     5b4:	89 13       	cpse	r24, r25
     5b6:	d8 cf       	rjmp	.-80     	; 0x568 <__vector_17+0x44>
     5b8:	80 91 ea 28 	lds	r24, 0x28EA	; 0x8028ea <USART_receive_Array_callback>
     5bc:	90 91 eb 28 	lds	r25, 0x28EB	; 0x8028eb <USART_receive_Array_callback+0x1>
     5c0:	89 2b       	or	r24, r25
     5c2:	91 f2       	breq	.-92     	; 0x568 <__vector_17+0x44>
     5c4:	86 e0       	ldi	r24, 0x06	; 6
     5c6:	98 e2       	ldi	r25, 0x28	; 40
     5c8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <FIFO_diff_readdata>
     5cc:	18 2f       	mov	r17, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
     5d4:	ec 01       	movw	r28, r24
     5d6:	41 2f       	mov	r20, r17
     5d8:	66 e0       	ldi	r22, 0x06	; 6
     5da:	78 e2       	ldi	r23, 0x28	; 40
     5dc:	0e 94 98 01 	call	0x330	; 0x330 <FIFO_copy_to_lin>
     5e0:	e0 91 ea 28 	lds	r30, 0x28EA	; 0x8028ea <USART_receive_Array_callback>
     5e4:	f0 91 eb 28 	lds	r31, 0x28EB	; 0x8028eb <USART_receive_Array_callback+0x1>
     5e8:	41 2f       	mov	r20, r17
     5ea:	be 01       	movw	r22, r28
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	09 95       	icall
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     5f6:	10 92 02 29 	sts	0x2902, r1	; 0x802902 <USART_bytes_received>
     5fa:	b6 cf       	rjmp	.-148    	; 0x568 <__vector_17+0x44>

000005fc <__vector_19>:
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	25 97       	sbiw	r28, 0x05	; 5
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	de bf       	out	0x3e, r29	; 62
     630:	1d 82       	std	Y+5, r1	; 0x05
     632:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
     636:	80 ff       	sbrs	r24, 0
     638:	1d c0       	rjmp	.+58     	; 0x674 <__vector_19+0x78>
     63a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     63e:	80 74       	andi	r24, 0x40	; 64
     640:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     644:	25 96       	adiw	r28, 0x05	; 5
     646:	cd bf       	out	0x3d, r28	; 61
     648:	de bf       	out	0x3e, r29	; 62
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti
     674:	be 01       	movw	r22, r28
     676:	6b 5f       	subi	r22, 0xFB	; 251
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	8f e6       	ldi	r24, 0x6F	; 111
     67c:	98 e2       	ldi	r25, 0x28	; 40
     67e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     682:	81 11       	cpse	r24, r1
     684:	47 c0       	rjmp	.+142    	; 0x714 <__vector_19+0x118>
     686:	1c 82       	std	Y+4, r1	; 0x04
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	00 91 f2 28 	lds	r16, 0x28F2	; 0x8028f2 <USART_send_Array_callback>
     692:	10 91 f3 28 	lds	r17, 0x28F3	; 0x8028f3 <USART_send_Array_callback+0x1>
     696:	01 15       	cp	r16, r1
     698:	11 05       	cpc	r17, r1
     69a:	79 f2       	breq	.-98     	; 0x63a <__vector_19+0x3e>
     69c:	8f e6       	ldi	r24, 0x6F	; 111
     69e:	98 e2       	ldi	r25, 0x28	; 40
     6a0:	0e 94 77 02 	call	0x4ee	; 0x4ee <FIFO_diff_writedata>
     6a4:	28 2f       	mov	r18, r24
     6a6:	ae 01       	movw	r20, r28
     6a8:	4d 5f       	subi	r20, 0xFD	; 253
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	ce 01       	movw	r24, r28
     6b4:	04 96       	adiw	r24, 0x04	; 4
     6b6:	f8 01       	movw	r30, r16
     6b8:	09 95       	icall
     6ba:	69 81       	ldd	r22, Y+1	; 0x01
     6bc:	7a 81       	ldd	r23, Y+2	; 0x02
     6be:	61 15       	cp	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <__vector_19+0xca>
     6c4:	ba cf       	rjmp	.-140    	; 0x63a <__vector_19+0x3e>
     6c6:	4b 81       	ldd	r20, Y+3	; 0x03
     6c8:	44 23       	and	r20, r20
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_19+0xd2>
     6cc:	b6 cf       	rjmp	.-148    	; 0x63a <__vector_19+0x3e>
     6ce:	8f e6       	ldi	r24, 0x6F	; 111
     6d0:	98 e2       	ldi	r25, 0x28	; 40
     6d2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <FIFO_copy_from_lin>
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     6de:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	38 f4       	brcc	.+14     	; 0x6f6 <__vector_19+0xfa>
     6e8:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     6ec:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     6f0:	28 17       	cp	r18, r24
     6f2:	39 07       	cpc	r19, r25
     6f4:	b8 f4       	brcc	.+46     	; 0x724 <__vector_19+0x128>
     6f6:	be 01       	movw	r22, r28
     6f8:	6b 5f       	subi	r22, 0xFB	; 251
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	8f e6       	ldi	r24, 0x6F	; 111
     6fe:	98 e2       	ldi	r25, 0x28	; 40
     700:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     704:	88 23       	and	r24, r24
     706:	09 f4       	brne	.+2      	; 0x70a <__vector_19+0x10e>
     708:	98 cf       	rjmp	.-208    	; 0x63a <__vector_19+0x3e>
     70a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     70e:	85 ff       	sbrs	r24, 5
     710:	fc cf       	rjmp	.-8      	; 0x70a <__vector_19+0x10e>
     712:	04 c0       	rjmp	.+8      	; 0x71c <__vector_19+0x120>
     714:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     718:	85 ff       	sbrs	r24, 5
     71a:	8f cf       	rjmp	.-226    	; 0x63a <__vector_19+0x3e>
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
     722:	8b cf       	rjmp	.-234    	; 0x63a <__vector_19+0x3e>
     724:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     728:	e6 cf       	rjmp	.-52     	; 0x6f6 <__vector_19+0xfa>

0000072a <__vector_26>:
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	1f 93       	push	r17
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
     752:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f4826>
     756:	80 fd       	sbrc	r24, 0
     758:	0a c0       	rjmp	.+20     	; 0x76e <__vector_26+0x44>
     75a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     75e:	87 ff       	sbrs	r24, 7
     760:	06 c0       	rjmp	.+12     	; 0x76e <__vector_26+0x44>
     762:	89 e2       	ldi	r24, 0x29	; 41
     764:	98 e2       	ldi	r25, 0x28	; 40
     766:	0e 94 45 02 	call	0x48a	; 0x48a <FIFO_chk_for_writedata>
     76a:	81 11       	cpse	r24, r1
     76c:	19 c0       	rjmp	.+50     	; 0x7a0 <__vector_26+0x76>
     76e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     772:	80 78       	andi	r24, 0x80	; 128
     774:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	1f 91       	pop	r17
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti
     7a0:	60 91 20 08 	lds	r22, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
     7a4:	89 e2       	ldi	r24, 0x29	; 41
     7a6:	98 e2       	ldi	r25, 0x28	; 40
     7a8:	0e 94 49 01 	call	0x292	; 0x292 <FIFO_writebyte>
     7ac:	80 91 03 29 	lds	r24, 0x2903	; 0x802903 <USART_bytes_received+0x1>
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 03 29 	sts	0x2903, r24	; 0x802903 <USART_bytes_received+0x1>
     7b6:	90 91 ff 28 	lds	r25, 0x28FF	; 0x8028ff <USART_bytes_to_receive+0x1>
     7ba:	89 13       	cpse	r24, r25
     7bc:	d8 cf       	rjmp	.-80     	; 0x76e <__vector_26+0x44>
     7be:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <USART_receive_Array_callback+0x2>
     7c2:	90 91 ed 28 	lds	r25, 0x28ED	; 0x8028ed <USART_receive_Array_callback+0x3>
     7c6:	89 2b       	or	r24, r25
     7c8:	91 f2       	breq	.-92     	; 0x76e <__vector_26+0x44>
     7ca:	89 e2       	ldi	r24, 0x29	; 41
     7cc:	98 e2       	ldi	r25, 0x28	; 40
     7ce:	0e 94 5d 02 	call	0x4ba	; 0x4ba <FIFO_diff_readdata>
     7d2:	18 2f       	mov	r17, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
     7da:	ec 01       	movw	r28, r24
     7dc:	41 2f       	mov	r20, r17
     7de:	69 e2       	ldi	r22, 0x29	; 41
     7e0:	78 e2       	ldi	r23, 0x28	; 40
     7e2:	0e 94 98 01 	call	0x330	; 0x330 <FIFO_copy_to_lin>
     7e6:	e0 91 ec 28 	lds	r30, 0x28EC	; 0x8028ec <USART_receive_Array_callback+0x2>
     7ea:	f0 91 ed 28 	lds	r31, 0x28ED	; 0x8028ed <USART_receive_Array_callback+0x3>
     7ee:	41 2f       	mov	r20, r17
     7f0:	be 01       	movw	r22, r28
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	09 95       	icall
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     7fc:	10 92 03 29 	sts	0x2903, r1	; 0x802903 <USART_bytes_received+0x1>
     800:	b6 cf       	rjmp	.-148    	; 0x76e <__vector_26+0x44>

00000802 <__vector_28>:
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	25 97       	sbiw	r28, 0x05	; 5
     832:	cd bf       	out	0x3d, r28	; 61
     834:	de bf       	out	0x3e, r29	; 62
     836:	1d 82       	std	Y+5, r1	; 0x05
     838:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f4826>
     83c:	80 ff       	sbrs	r24, 0
     83e:	1d c0       	rjmp	.+58     	; 0x87a <__vector_28+0x78>
     840:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     844:	80 74       	andi	r24, 0x40	; 64
     846:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     84a:	25 96       	adiw	r28, 0x05	; 5
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	de bf       	out	0x3e, r29	; 62
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	ff 91       	pop	r31
     856:	ef 91       	pop	r30
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti
     87a:	be 01       	movw	r22, r28
     87c:	6b 5f       	subi	r22, 0xFB	; 251
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	82 e9       	ldi	r24, 0x92	; 146
     882:	98 e2       	ldi	r25, 0x28	; 40
     884:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     888:	81 11       	cpse	r24, r1
     88a:	47 c0       	rjmp	.+142    	; 0x91a <__vector_28+0x118>
     88c:	1c 82       	std	Y+4, r1	; 0x04
     88e:	19 82       	std	Y+1, r1	; 0x01
     890:	1a 82       	std	Y+2, r1	; 0x02
     892:	1b 82       	std	Y+3, r1	; 0x03
     894:	00 91 f4 28 	lds	r16, 0x28F4	; 0x8028f4 <USART_send_Array_callback+0x2>
     898:	10 91 f5 28 	lds	r17, 0x28F5	; 0x8028f5 <USART_send_Array_callback+0x3>
     89c:	01 15       	cp	r16, r1
     89e:	11 05       	cpc	r17, r1
     8a0:	79 f2       	breq	.-98     	; 0x840 <__vector_28+0x3e>
     8a2:	82 e9       	ldi	r24, 0x92	; 146
     8a4:	98 e2       	ldi	r25, 0x28	; 40
     8a6:	0e 94 77 02 	call	0x4ee	; 0x4ee <FIFO_diff_writedata>
     8aa:	28 2f       	mov	r18, r24
     8ac:	ae 01       	movw	r20, r28
     8ae:	4d 5f       	subi	r20, 0xFD	; 253
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	ce 01       	movw	r24, r28
     8ba:	04 96       	adiw	r24, 0x04	; 4
     8bc:	f8 01       	movw	r30, r16
     8be:	09 95       	icall
     8c0:	69 81       	ldd	r22, Y+1	; 0x01
     8c2:	7a 81       	ldd	r23, Y+2	; 0x02
     8c4:	61 15       	cp	r22, r1
     8c6:	71 05       	cpc	r23, r1
     8c8:	09 f4       	brne	.+2      	; 0x8cc <__vector_28+0xca>
     8ca:	ba cf       	rjmp	.-140    	; 0x840 <__vector_28+0x3e>
     8cc:	4b 81       	ldd	r20, Y+3	; 0x03
     8ce:	44 23       	and	r20, r20
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <__vector_28+0xd2>
     8d2:	b6 cf       	rjmp	.-148    	; 0x840 <__vector_28+0x3e>
     8d4:	82 e9       	ldi	r24, 0x92	; 146
     8d6:	98 e2       	ldi	r25, 0x28	; 40
     8d8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <FIFO_copy_from_lin>
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     8e4:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	38 f4       	brcc	.+14     	; 0x8fc <__vector_28+0xfa>
     8ee:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     8f2:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	b8 f4       	brcc	.+46     	; 0x92a <__vector_28+0x128>
     8fc:	be 01       	movw	r22, r28
     8fe:	6b 5f       	subi	r22, 0xFB	; 251
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	82 e9       	ldi	r24, 0x92	; 146
     904:	98 e2       	ldi	r25, 0x28	; 40
     906:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <__vector_28+0x10e>
     90e:	98 cf       	rjmp	.-208    	; 0x840 <__vector_28+0x3e>
     910:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     914:	85 ff       	sbrs	r24, 5
     916:	fc cf       	rjmp	.-8      	; 0x910 <__vector_28+0x10e>
     918:	04 c0       	rjmp	.+8      	; 0x922 <__vector_28+0x120>
     91a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     91e:	85 ff       	sbrs	r24, 5
     920:	8f cf       	rjmp	.-226    	; 0x840 <__vector_28+0x3e>
     922:	8d 81       	ldd	r24, Y+5	; 0x05
     924:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
     928:	8b cf       	rjmp	.-234    	; 0x840 <__vector_28+0x3e>
     92a:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     92e:	e6 cf       	rjmp	.-52     	; 0x8fc <__vector_28+0xfa>

00000930 <__vector_31>:
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	1f 93       	push	r17
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ef 93       	push	r30
     956:	ff 93       	push	r31
     958:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <__TEXT_REGION_LENGTH__+0x7f4846>
     95c:	80 fd       	sbrc	r24, 0
     95e:	0a c0       	rjmp	.+20     	; 0x974 <__vector_31+0x44>
     960:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     964:	87 ff       	sbrs	r24, 7
     966:	06 c0       	rjmp	.+12     	; 0x974 <__vector_31+0x44>
     968:	8c e4       	ldi	r24, 0x4C	; 76
     96a:	98 e2       	ldi	r25, 0x28	; 40
     96c:	0e 94 45 02 	call	0x48a	; 0x48a <FIFO_chk_for_writedata>
     970:	81 11       	cpse	r24, r1
     972:	19 c0       	rjmp	.+50     	; 0x9a6 <__vector_31+0x76>
     974:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     978:	80 78       	andi	r24, 0x80	; 128
     97a:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	1f 91       	pop	r17
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti
     9a6:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f4840>
     9aa:	8c e4       	ldi	r24, 0x4C	; 76
     9ac:	98 e2       	ldi	r25, 0x28	; 40
     9ae:	0e 94 49 01 	call	0x292	; 0x292 <FIFO_writebyte>
     9b2:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <USART_bytes_received+0x2>
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <USART_bytes_received+0x2>
     9bc:	90 91 00 29 	lds	r25, 0x2900	; 0x802900 <USART_bytes_to_receive+0x2>
     9c0:	89 13       	cpse	r24, r25
     9c2:	d8 cf       	rjmp	.-80     	; 0x974 <__vector_31+0x44>
     9c4:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <USART_receive_Array_callback+0x4>
     9c8:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <USART_receive_Array_callback+0x5>
     9cc:	89 2b       	or	r24, r25
     9ce:	91 f2       	breq	.-92     	; 0x974 <__vector_31+0x44>
     9d0:	8c e4       	ldi	r24, 0x4C	; 76
     9d2:	98 e2       	ldi	r25, 0x28	; 40
     9d4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <FIFO_diff_readdata>
     9d8:	18 2f       	mov	r17, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
     9e0:	ec 01       	movw	r28, r24
     9e2:	41 2f       	mov	r20, r17
     9e4:	6c e4       	ldi	r22, 0x4C	; 76
     9e6:	78 e2       	ldi	r23, 0x28	; 40
     9e8:	0e 94 98 01 	call	0x330	; 0x330 <FIFO_copy_to_lin>
     9ec:	e0 91 ee 28 	lds	r30, 0x28EE	; 0x8028ee <USART_receive_Array_callback+0x4>
     9f0:	f0 91 ef 28 	lds	r31, 0x28EF	; 0x8028ef <USART_receive_Array_callback+0x5>
     9f4:	41 2f       	mov	r20, r17
     9f6:	be 01       	movw	r22, r28
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	09 95       	icall
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     a02:	10 92 04 29 	sts	0x2904, r1	; 0x802904 <USART_bytes_received+0x2>
     a06:	b6 cf       	rjmp	.-148    	; 0x974 <__vector_31+0x44>

00000a08 <__vector_33>:
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	25 97       	sbiw	r28, 0x05	; 5
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	1d 82       	std	Y+5, r1	; 0x05
     a3e:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <__TEXT_REGION_LENGTH__+0x7f4846>
     a42:	80 ff       	sbrs	r24, 0
     a44:	1d c0       	rjmp	.+58     	; 0xa80 <__vector_33+0x78>
     a46:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     a4a:	80 74       	andi	r24, 0x40	; 64
     a4c:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     a50:	25 96       	adiw	r28, 0x05	; 5
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti
     a80:	be 01       	movw	r22, r28
     a82:	6b 5f       	subi	r22, 0xFB	; 251
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	85 eb       	ldi	r24, 0xB5	; 181
     a88:	98 e2       	ldi	r25, 0x28	; 40
     a8a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     a8e:	81 11       	cpse	r24, r1
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__vector_33+0x118>
     a92:	1c 82       	std	Y+4, r1	; 0x04
     a94:	19 82       	std	Y+1, r1	; 0x01
     a96:	1a 82       	std	Y+2, r1	; 0x02
     a98:	1b 82       	std	Y+3, r1	; 0x03
     a9a:	00 91 f6 28 	lds	r16, 0x28F6	; 0x8028f6 <USART_send_Array_callback+0x4>
     a9e:	10 91 f7 28 	lds	r17, 0x28F7	; 0x8028f7 <USART_send_Array_callback+0x5>
     aa2:	01 15       	cp	r16, r1
     aa4:	11 05       	cpc	r17, r1
     aa6:	79 f2       	breq	.-98     	; 0xa46 <__vector_33+0x3e>
     aa8:	85 eb       	ldi	r24, 0xB5	; 181
     aaa:	98 e2       	ldi	r25, 0x28	; 40
     aac:	0e 94 77 02 	call	0x4ee	; 0x4ee <FIFO_diff_writedata>
     ab0:	28 2f       	mov	r18, r24
     ab2:	ae 01       	movw	r20, r28
     ab4:	4d 5f       	subi	r20, 0xFD	; 253
     ab6:	5f 4f       	sbci	r21, 0xFF	; 255
     ab8:	be 01       	movw	r22, r28
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	ce 01       	movw	r24, r28
     ac0:	04 96       	adiw	r24, 0x04	; 4
     ac2:	f8 01       	movw	r30, r16
     ac4:	09 95       	icall
     ac6:	69 81       	ldd	r22, Y+1	; 0x01
     ac8:	7a 81       	ldd	r23, Y+2	; 0x02
     aca:	61 15       	cp	r22, r1
     acc:	71 05       	cpc	r23, r1
     ace:	09 f4       	brne	.+2      	; 0xad2 <__vector_33+0xca>
     ad0:	ba cf       	rjmp	.-140    	; 0xa46 <__vector_33+0x3e>
     ad2:	4b 81       	ldd	r20, Y+3	; 0x03
     ad4:	44 23       	and	r20, r20
     ad6:	09 f4       	brne	.+2      	; 0xada <__vector_33+0xd2>
     ad8:	b6 cf       	rjmp	.-148    	; 0xa46 <__vector_33+0x3e>
     ada:	85 eb       	ldi	r24, 0xB5	; 181
     adc:	98 e2       	ldi	r25, 0x28	; 40
     ade:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <FIFO_copy_from_lin>
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     aea:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     aee:	28 17       	cp	r18, r24
     af0:	39 07       	cpc	r19, r25
     af2:	38 f4       	brcc	.+14     	; 0xb02 <__vector_33+0xfa>
     af4:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     af8:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	b8 f4       	brcc	.+46     	; 0xb30 <__vector_33+0x128>
     b02:	be 01       	movw	r22, r28
     b04:	6b 5f       	subi	r22, 0xFB	; 251
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	85 eb       	ldi	r24, 0xB5	; 181
     b0a:	98 e2       	ldi	r25, 0x28	; 40
     b0c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <FIFO_readbyte>
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <__vector_33+0x10e>
     b14:	98 cf       	rjmp	.-208    	; 0xa46 <__vector_33+0x3e>
     b16:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <__vector_33+0x10e>
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__vector_33+0x120>
     b20:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     b24:	85 ff       	sbrs	r24, 5
     b26:	8f cf       	rjmp	.-226    	; 0xa46 <__vector_33+0x3e>
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f4842>
     b2e:	8b cf       	rjmp	.-234    	; 0xa46 <__vector_33+0x3e>
     b30:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
     b34:	e6 cf       	rjmp	.-52     	; 0xb02 <__vector_33+0xfa>

00000b36 <USART_init>:
     b36:	8f 92       	push	r8
     b38:	af 92       	push	r10
     b3a:	cf 92       	push	r12
     b3c:	ef 92       	push	r14
     b3e:	0f 93       	push	r16
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	a7 97       	sbiw	r28, 0x27	; 39
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	8d 8f       	std	Y+29, r24	; 0x1d
     b50:	4e 8f       	std	Y+30, r20	; 0x1e
     b52:	5f 8f       	std	Y+31, r21	; 0x1f
     b54:	68 a3       	std	Y+32, r22	; 0x20
     b56:	79 a3       	std	Y+33, r23	; 0x21
     b58:	2a a3       	std	Y+34, r18	; 0x22
     b5a:	0b a3       	std	Y+35, r16	; 0x23
     b5c:	ec a2       	std	Y+36, r14	; 0x24
     b5e:	cd a2       	std	Y+37, r12	; 0x25
     b60:	ae a2       	std	Y+38, r10	; 0x26
     b62:	8f a2       	std	Y+39, r8	; 0x27
     b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	8d 56       	subi	r24, 0x6D	; 109
     b70:	9a 4a       	sbci	r25, 0xAA	; 170
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	8c 83       	std	Y+4, r24	; 0x04
     b7a:	9d 83       	std	Y+5, r25	; 0x05
     b7c:	1e 8a       	std	Y+22, r1	; 0x16
     b7e:	1f 8a       	std	Y+23, r1	; 0x17
     b80:	18 8e       	std	Y+24, r1	; 0x18
     b82:	19 8e       	std	Y+25, r1	; 0x19
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8a 8f       	std	Y+26, r24	; 0x1a
     b88:	1b 8e       	std	Y+27, r1	; 0x1b
     b8a:	80 ee       	ldi	r24, 0xE0	; 224
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	fc 01       	movw	r30, r24
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	8c 8f       	std	Y+28, r24	; 0x1c
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	8a a1       	ldd	r24, Y+34	; 0x22
     b9a:	88 30       	cpi	r24, 0x08	; 8
     b9c:	48 f4       	brcc	.+18     	; 0xbb0 <USART_init+0x7a>
     b9e:	8a a1       	ldd	r24, Y+34	; 0x22
     ba0:	84 30       	cpi	r24, 0x04	; 4
     ba2:	18 f0       	brcs	.+6      	; 0xbaa <USART_init+0x74>
     ba4:	8a a1       	ldd	r24, Y+34	; 0x22
     ba6:	86 30       	cpi	r24, 0x06	; 6
     ba8:	18 f0       	brcs	.+6      	; 0xbb0 <USART_init+0x7a>
     baa:	8b a1       	ldd	r24, Y+35	; 0x23
     bac:	81 33       	cpi	r24, 0x31	; 49
     bae:	18 f0       	brcs	.+6      	; 0xbb6 <USART_init+0x80>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	1d c2       	rjmp	.+1082   	; 0xff0 <USART_init+0x4ba>
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	9d 81       	ldd	r25, Y+5	; 0x05
     bba:	89 2b       	or	r24, r25
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <USART_init+0x8a>
     bbe:	18 c2       	rjmp	.+1072   	; 0xff0 <USART_init+0x4ba>
     bc0:	8d a1       	ldd	r24, Y+37	; 0x25
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <USART_init+0x92>
     bc6:	4a c0       	rjmp	.+148    	; 0xc5c <USART_init+0x126>
     bc8:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <__data_end>
     bcc:	90 91 e7 28 	lds	r25, 0x28E7	; 0x8028e7 <__data_end+0x1>
     bd0:	a0 91 e8 28 	lds	r26, 0x28E8	; 0x8028e8 <__data_end+0x2>
     bd4:	b0 91 e9 28 	lds	r27, 0x28E9	; 0x8028e9 <__data_end+0x3>
     bd8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bda:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bdc:	48 a1       	ldd	r20, Y+32	; 0x20
     bde:	59 a1       	ldd	r21, Y+33	; 0x21
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 5f 09 	call	0x12be	; 0x12be <__udivmodsi4>
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	b6 95       	lsr	r27
     bee:	a7 95       	ror	r26
     bf0:	97 95       	ror	r25
     bf2:	87 95       	ror	r24
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	aa 1f       	adc	r26, r26
     bfa:	bb 1f       	adc	r27, r27
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	aa 1f       	adc	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	aa 1f       	adc	r26, r26
     c0a:	bb 1f       	adc	r27, r27
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	aa 1f       	adc	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	aa 1f       	adc	r26, r26
     c1a:	bb 1f       	adc	r27, r27
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	aa 1f       	adc	r26, r26
     c22:	bb 1f       	adc	r27, r27
     c24:	8e 83       	std	Y+6, r24	; 0x06
     c26:	9f 83       	std	Y+7, r25	; 0x07
     c28:	a8 87       	std	Y+8, r26	; 0x08
     c2a:	b9 87       	std	Y+9, r27	; 0x09
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	8a 87       	std	Y+10, r24	; 0x0a
     c32:	9b 87       	std	Y+11, r25	; 0x0b
     c34:	8a 85       	ldd	r24, Y+10	; 0x0a
     c36:	9b 85       	ldd	r25, Y+11	; 0x0b
     c38:	9c 01       	movw	r18, r24
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	a8 85       	ldd	r26, Y+8	; 0x08
     c44:	b9 85       	ldd	r27, Y+9	; 0x09
     c46:	82 17       	cp	r24, r18
     c48:	93 07       	cpc	r25, r19
     c4a:	a4 07       	cpc	r26, r20
     c4c:	b5 07       	cpc	r27, r21
     c4e:	10 f4       	brcc	.+4      	; 0xc54 <USART_init+0x11e>
     c50:	9c 01       	movw	r18, r24
     c52:	ad 01       	movw	r20, r26
     c54:	c9 01       	movw	r24, r18
     c56:	8e 8b       	std	Y+22, r24	; 0x16
     c58:	9f 8b       	std	Y+23, r25	; 0x17
     c5a:	42 c0       	rjmp	.+132    	; 0xce0 <USART_init+0x1aa>
     c5c:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <__data_end>
     c60:	90 91 e7 28 	lds	r25, 0x28E7	; 0x8028e7 <__data_end+0x1>
     c64:	a0 91 e8 28 	lds	r26, 0x28E8	; 0x8028e8 <__data_end+0x2>
     c68:	b0 91 e9 28 	lds	r27, 0x28E9	; 0x8028e9 <__data_end+0x3>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	aa 1f       	adc	r26, r26
     c72:	bb 1f       	adc	r27, r27
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	aa 1f       	adc	r26, r26
     c7a:	bb 1f       	adc	r27, r27
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	aa 1f       	adc	r26, r26
     c82:	bb 1f       	adc	r27, r27
     c84:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c86:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c88:	48 a1       	ldd	r20, Y+32	; 0x20
     c8a:	59 a1       	ldd	r21, Y+33	; 0x21
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 5f 09 	call	0x12be	; 0x12be <__udivmodsi4>
     c94:	da 01       	movw	r26, r20
     c96:	c9 01       	movw	r24, r18
     c98:	8c 87       	std	Y+12, r24	; 0x0c
     c9a:	9d 87       	std	Y+13, r25	; 0x0d
     c9c:	ae 87       	std	Y+14, r26	; 0x0e
     c9e:	bf 87       	std	Y+15, r27	; 0x0f
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	88 8b       	std	Y+16, r24	; 0x10
     ca6:	99 8b       	std	Y+17, r25	; 0x11
     ca8:	88 89       	ldd	r24, Y+16	; 0x10
     caa:	99 89       	ldd	r25, Y+17	; 0x11
     cac:	9c 01       	movw	r18, r24
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb6:	ae 85       	ldd	r26, Y+14	; 0x0e
     cb8:	bf 85       	ldd	r27, Y+15	; 0x0f
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	a4 07       	cpc	r26, r20
     cc0:	b5 07       	cpc	r27, r21
     cc2:	10 f4       	brcc	.+4      	; 0xcc8 <USART_init+0x192>
     cc4:	9c 01       	movw	r18, r24
     cc6:	ad 01       	movw	r20, r26
     cc8:	c9 01       	movw	r24, r18
     cca:	8e 8b       	std	Y+22, r24	; 0x16
     ccc:	9f 8b       	std	Y+23, r25	; 0x17
     cce:	8e 89       	ldd	r24, Y+22	; 0x16
     cd0:	9f 89       	ldd	r25, Y+23	; 0x17
     cd2:	80 34       	cpi	r24, 0x40	; 64
     cd4:	91 05       	cpc	r25, r1
     cd6:	20 f4       	brcc	.+8      	; 0xce0 <USART_init+0x1aa>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	8e 8b       	std	Y+22, r24	; 0x16
     cde:	9f 8b       	std	Y+23, r25	; 0x17
     ce0:	8a a1       	ldd	r24, Y+34	; 0x22
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	87 70       	andi	r24, 0x07	; 7
     ce6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ce8:	98 7f       	andi	r25, 0xF8	; 248
     cea:	89 2b       	or	r24, r25
     cec:	8a 8f       	std	Y+26, r24	; 0x1a
     cee:	8b a1       	ldd	r24, Y+35	; 0x23
     cf0:	82 95       	swap	r24
     cf2:	8f 70       	andi	r24, 0x0F	; 15
     cf4:	83 70       	andi	r24, 0x03	; 3
     cf6:	83 70       	andi	r24, 0x03	; 3
     cf8:	82 95       	swap	r24
     cfa:	80 7f       	andi	r24, 0xF0	; 240
     cfc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cfe:	9f 7c       	andi	r25, 0xCF	; 207
     d00:	89 2b       	or	r24, r25
     d02:	8a 8f       	std	Y+26, r24	; 0x1a
     d04:	8d a1       	ldd	r24, Y+37	; 0x25
     d06:	88 23       	and	r24, r24
     d08:	29 f0       	breq	.+10     	; 0xd14 <USART_init+0x1de>
     d0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d0c:	8f 73       	andi	r24, 0x3F	; 63
     d0e:	80 64       	ori	r24, 0x40	; 64
     d10:	8a 8f       	std	Y+26, r24	; 0x1a
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <USART_init+0x1e4>
     d14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d16:	8f 73       	andi	r24, 0x3F	; 63
     d18:	8a 8f       	std	Y+26, r24	; 0x1a
     d1a:	8e a1       	ldd	r24, Y+38	; 0x26
     d1c:	88 23       	and	r24, r24
     d1e:	99 f0       	breq	.+38     	; 0xd46 <USART_init+0x210>
     d20:	88 8d       	ldd	r24, Y+24	; 0x18
     d22:	8c 7f       	andi	r24, 0xFC	; 252
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	88 8f       	std	Y+24, r24	; 0x18
     d28:	89 8d       	ldd	r24, Y+25	; 0x19
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	89 8f       	std	Y+25, r24	; 0x19
     d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	86 50       	subi	r24, 0x06	; 6
     d36:	97 4d       	sbci	r25, 0xD7	; 215
     d38:	2f a1       	ldd	r18, Y+39	; 0x27
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	8a 8f       	std	Y+26, r24	; 0x1a
     d44:	1a c0       	rjmp	.+52     	; 0xd7a <USART_init+0x244>
     d46:	88 8d       	ldd	r24, Y+24	; 0x18
     d48:	8c 7f       	andi	r24, 0xFC	; 252
     d4a:	88 8f       	std	Y+24, r24	; 0x18
     d4c:	89 8d       	ldd	r24, Y+25	; 0x19
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	89 8f       	std	Y+25, r24	; 0x19
     d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	86 50       	subi	r24, 0x06	; 6
     d5a:	97 4d       	sbci	r25, 0xD7	; 215
     d5c:	fc 01       	movw	r30, r24
     d5e:	10 82       	st	Z, r1
     d60:	8c a1       	ldd	r24, Y+36	; 0x24
     d62:	86 95       	lsr	r24
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	81 70       	andi	r24, 0x01	; 1
     d6c:	88 0f       	add	r24, r24
     d6e:	88 0f       	add	r24, r24
     d70:	88 0f       	add	r24, r24
     d72:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d74:	97 7f       	andi	r25, 0xF7	; 247
     d76:	89 2b       	or	r24, r25
     d78:	8a 8f       	std	Y+26, r24	; 0x1a
     d7a:	9d a1       	ldd	r25, Y+37	; 0x25
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 27       	eor	r24, r25
     d80:	88 23       	and	r24, r24
     d82:	21 f0       	breq	.+8      	; 0xd8c <USART_init+0x256>
     d84:	89 8d       	ldd	r24, Y+25	; 0x19
     d86:	89 7f       	andi	r24, 0xF9	; 249
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	89 8f       	std	Y+25, r24	; 0x19
     d8c:	80 ee       	ldi	r24, 0xE0	; 224
     d8e:	95 e0       	ldi	r25, 0x05	; 5
     d90:	fc 01       	movw	r30, r24
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	8c 8f       	std	Y+28, r24	; 0x1c
     d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	b9 f0       	breq	.+46     	; 0xdd0 <USART_init+0x29a>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	91 05       	cpc	r25, r1
     da6:	1c f4       	brge	.+6      	; 0xdae <USART_init+0x278>
     da8:	89 2b       	or	r24, r25
     daa:	39 f0       	breq	.+14     	; 0xdba <USART_init+0x284>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <USART_init+0x2d2>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	91 05       	cpc	r25, r1
     db2:	c1 f0       	breq	.+48     	; 0xde4 <USART_init+0x2ae>
     db4:	03 97       	sbiw	r24, 0x03	; 3
     db6:	01 f1       	breq	.+64     	; 0xdf8 <USART_init+0x2c2>
     db8:	27 c0       	rjmp	.+78     	; 0xe08 <USART_init+0x2d2>
     dba:	89 a9       	ldd	r24, Y+49	; 0x31
     dbc:	83 70       	andi	r24, 0x03	; 3
     dbe:	82 95       	swap	r24
     dc0:	88 0f       	add	r24, r24
     dc2:	88 0f       	add	r24, r24
     dc4:	80 7c       	andi	r24, 0xC0	; 192
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	9f 73       	andi	r25, 0x3F	; 63
     dca:	89 2b       	or	r24, r25
     dcc:	8c 8f       	std	Y+28, r24	; 0x1c
     dce:	1c c0       	rjmp	.+56     	; 0xe08 <USART_init+0x2d2>
     dd0:	89 a9       	ldd	r24, Y+49	; 0x31
     dd2:	83 70       	andi	r24, 0x03	; 3
     dd4:	83 70       	andi	r24, 0x03	; 3
     dd6:	82 95       	swap	r24
     dd8:	80 7f       	andi	r24, 0xF0	; 240
     dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ddc:	9f 7c       	andi	r25, 0xCF	; 207
     dde:	89 2b       	or	r24, r25
     de0:	8c 8f       	std	Y+28, r24	; 0x1c
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <USART_init+0x2d2>
     de4:	89 a9       	ldd	r24, Y+49	; 0x31
     de6:	83 70       	andi	r24, 0x03	; 3
     de8:	83 70       	andi	r24, 0x03	; 3
     dea:	88 0f       	add	r24, r24
     dec:	88 0f       	add	r24, r24
     dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df0:	93 7f       	andi	r25, 0xF3	; 243
     df2:	89 2b       	or	r24, r25
     df4:	8c 8f       	std	Y+28, r24	; 0x1c
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <USART_init+0x2d2>
     df8:	89 a9       	ldd	r24, Y+49	; 0x31
     dfa:	83 70       	andi	r24, 0x03	; 3
     dfc:	83 70       	andi	r24, 0x03	; 3
     dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e00:	9c 7f       	andi	r25, 0xFC	; 252
     e02:	89 2b       	or	r24, r25
     e04:	8c 8f       	std	Y+28, r24	; 0x1c
     e06:	00 00       	nop
     e08:	89 8d       	ldd	r24, Y+25	; 0x19
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	89 8f       	std	Y+25, r24	; 0x19
     e0e:	89 8d       	ldd	r24, Y+25	; 0x19
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	89 8f       	std	Y+25, r24	; 0x19
     e14:	88 8d       	ldd	r24, Y+24	; 0x18
     e16:	80 68       	ori	r24, 0x80	; 128
     e18:	88 8f       	std	Y+24, r24	; 0x18
     e1a:	88 8d       	ldd	r24, Y+24	; 0x18
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	88 8f       	std	Y+24, r24	; 0x18
     e20:	80 ee       	ldi	r24, 0xE0	; 224
     e22:	95 e0       	ldi	r25, 0x05	; 5
     e24:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e26:	fc 01       	movw	r30, r24
     e28:	22 83       	std	Z+2, r18	; 0x02
     e2a:	28 8d       	ldd	r18, Y+24	; 0x18
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	fc 01       	movw	r30, r24
     e32:	25 83       	std	Z+5, r18	; 0x05
     e34:	29 8d       	ldd	r18, Y+25	; 0x19
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	fc 01       	movw	r30, r24
     e3c:	26 83       	std	Z+6, r18	; 0x06
     e3e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	fc 01       	movw	r30, r24
     e46:	27 83       	std	Z+7, r18	; 0x07
     e48:	2b 8d       	ldd	r18, Y+27	; 0x1b
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	9d 81       	ldd	r25, Y+5	; 0x05
     e4e:	fc 01       	movw	r30, r24
     e50:	22 87       	std	Z+10, r18	; 0x0a
     e52:	2e 89       	ldd	r18, Y+22	; 0x16
     e54:	3f 89       	ldd	r19, Y+23	; 0x17
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	9d 81       	ldd	r25, Y+5	; 0x05
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 87       	std	Z+8, r18	; 0x08
     e5e:	31 87       	std	Z+9, r19	; 0x09
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	fc 01       	movw	r30, r24
     e66:	13 86       	std	Z+11, r1	; 0x0b
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	fc 01       	movw	r30, r24
     e6e:	14 86       	std	Z+12, r1	; 0x0c
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	fc 01       	movw	r30, r24
     e76:	15 86       	std	Z+13, r1	; 0x0d
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	fc 01       	movw	r30, r24
     e7e:	16 86       	std	Z+14, r1	; 0x0e
     e80:	1a 82       	std	Y+2, r1	; 0x02
     e82:	1b 82       	std	Y+3, r1	; 0x03
     e84:	00 00       	nop
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e1       	ldi	r25, 0x10	; 16
     e8a:	fc 01       	movw	r30, r24
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	82 70       	andi	r24, 0x02	; 2
     e94:	99 27       	eor	r25, r25
     e96:	89 2b       	or	r24, r25
     e98:	b1 f7       	brne	.-20     	; 0xe86 <USART_init+0x350>
     e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 50       	subi	r24, 0x00	; 0
     ea2:	90 40       	sbci	r25, 0x00	; 0
     ea4:	9c 5e       	subi	r25, 0xEC	; 236
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	8a 8b       	std	Y+18, r24	; 0x12
     eac:	00 00       	nop
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e1       	ldi	r25, 0x10	; 16
     eb2:	fc 01       	movw	r30, r24
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	82 70       	andi	r24, 0x02	; 2
     ebc:	99 27       	eor	r25, r25
     ebe:	89 2b       	or	r24, r25
     ec0:	b1 f7       	brne	.-20     	; 0xeae <USART_init+0x378>
     ec2:	89 a9       	ldd	r24, Y+49	; 0x31
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8c 5e       	subi	r24, 0xEC	; 236
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	9c 5e       	subi	r25, 0xEC	; 236
     ece:	fc 01       	movw	r30, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	8b 8b       	std	Y+19, r24	; 0x13
     ed4:	00 00       	nop
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e1       	ldi	r25, 0x10	; 16
     eda:	fc 01       	movw	r30, r24
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	82 70       	andi	r24, 0x02	; 2
     ee4:	99 27       	eor	r25, r25
     ee6:	89 2b       	or	r24, r25
     ee8:	b1 f7       	brne	.-20     	; 0xed6 <USART_init+0x3a0>
     eea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	8c 5f       	subi	r24, 0xFC	; 252
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	9c 5e       	subi	r25, 0xEC	; 236
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	8c 8b       	std	Y+20, r24	; 0x14
     efc:	00 00       	nop
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e1       	ldi	r25, 0x10	; 16
     f02:	fc 01       	movw	r30, r24
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	82 70       	andi	r24, 0x02	; 2
     f0c:	99 27       	eor	r25, r25
     f0e:	89 2b       	or	r24, r25
     f10:	b1 f7       	brne	.-20     	; 0xefe <USART_init+0x3c8>
     f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	88 5f       	subi	r24, 0xF8	; 248
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	9c 5e       	subi	r25, 0xEC	; 236
     f1e:	fc 01       	movw	r30, r24
     f20:	80 81       	ld	r24, Z
     f22:	8d 8b       	std	Y+21, r24	; 0x15
     f24:	8d a1       	ldd	r24, Y+37	; 0x25
     f26:	88 23       	and	r24, r24
     f28:	a1 f0       	breq	.+40     	; 0xf52 <USART_init+0x41c>
     f2a:	00 00       	nop
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e1       	ldi	r25, 0x10	; 16
     f30:	fc 01       	movw	r30, r24
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	82 70       	andi	r24, 0x02	; 2
     f3a:	99 27       	eor	r25, r25
     f3c:	89 2b       	or	r24, r25
     f3e:	b1 f7       	brne	.-20     	; 0xf2c <USART_init+0x3f6>
     f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	84 5f       	subi	r24, 0xF4	; 244
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	9c 5e       	subi	r25, 0xEC	; 236
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	8e a1       	ldd	r24, Y+38	; 0x26
     f54:	88 23       	and	r24, r24
     f56:	a1 f0       	breq	.+40     	; 0xf80 <USART_init+0x44a>
     f58:	00 00       	nop
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e1       	ldi	r25, 0x10	; 16
     f5e:	fc 01       	movw	r30, r24
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	82 70       	andi	r24, 0x02	; 2
     f68:	99 27       	eor	r25, r25
     f6a:	89 2b       	or	r24, r25
     f6c:	b1 f7       	brne	.-20     	; 0xf5a <USART_init+0x424>
     f6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	80 5f       	subi	r24, 0xF0	; 240
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	9c 5e       	subi	r25, 0xEC	; 236
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	8b 89       	ldd	r24, Y+19	; 0x13
     f82:	8f 3f       	cpi	r24, 0xFF	; 255
     f84:	99 f1       	breq	.+102    	; 0xfec <USART_init+0x4b6>
     f86:	8a 89       	ldd	r24, Y+18	; 0x12
     f88:	8f 3f       	cpi	r24, 0xFF	; 255
     f8a:	81 f1       	breq	.+96     	; 0xfec <USART_init+0x4b6>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	34 e0       	ldi	r19, 0x04	; 4
     f90:	8a 89       	ldd	r24, Y+18	; 0x12
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	5c 89       	ldd	r21, Y+20	; 0x14
     f98:	4a 81       	ldd	r20, Y+2	; 0x02
     f9a:	54 2b       	or	r21, r20
     f9c:	4b 81       	ldd	r20, Y+3	; 0x03
     f9e:	54 2b       	or	r21, r20
     fa0:	4b 89       	ldd	r20, Y+19	; 0x13
     fa2:	45 23       	and	r20, r21
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 95       	swap	r24
     faa:	92 95       	swap	r25
     fac:	90 7f       	andi	r25, 0xF0	; 240
     fae:	98 27       	eor	r25, r24
     fb0:	80 7f       	andi	r24, 0xF0	; 240
     fb2:	98 27       	eor	r25, r24
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	fc 01       	movw	r30, r24
     fbc:	40 83       	st	Z, r20
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	34 e0       	ldi	r19, 0x04	; 4
     fc2:	8a 89       	ldd	r24, Y+18	; 0x12
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	5d 89       	ldd	r21, Y+21	; 0x15
     fca:	4b 89       	ldd	r20, Y+19	; 0x13
     fcc:	45 23       	and	r20, r21
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	82 95       	swap	r24
     fd4:	92 95       	swap	r25
     fd6:	90 7f       	andi	r25, 0xF0	; 240
     fd8:	98 27       	eor	r25, r24
     fda:	80 7f       	andi	r24, 0xF0	; 240
     fdc:	98 27       	eor	r25, r24
     fde:	82 0f       	add	r24, r18
     fe0:	93 1f       	adc	r25, r19
     fe2:	02 96       	adiw	r24, 0x02	; 2
     fe4:	fc 01       	movw	r30, r24
     fe6:	40 83       	st	Z, r20
     fe8:	19 82       	std	Y+1, r1	; 0x01
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <USART_init+0x4ba>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	a7 96       	adiw	r28, 0x27	; 39
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	0f 91       	pop	r16
     ffe:	ef 90       	pop	r14
    1000:	cf 90       	pop	r12
    1002:	af 90       	pop	r10
    1004:	8f 90       	pop	r8
    1006:	08 95       	ret

00001008 <USART_send_Array>:
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	e8 2f       	mov	r30, r24
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	df 01       	movw	r26, r30
    1012:	aa 0f       	add	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	ad 56       	subi	r26, 0x6D	; 109
    1018:	ba 4a       	sbci	r27, 0xAA	; 170
    101a:	cd 91       	ld	r28, X+
    101c:	dc 91       	ld	r29, X
    101e:	41 15       	cp	r20, r1
    1020:	51 05       	cpc	r21, r1
    1022:	c9 f1       	breq	.+114    	; 0x1096 <USART_send_Array+0x8e>
    1024:	22 23       	and	r18, r18
    1026:	c9 f1       	breq	.+114    	; 0x109a <USART_send_Array+0x92>
    1028:	ba 01       	movw	r22, r20
    102a:	83 e2       	ldi	r24, 0x23	; 35
    102c:	8e 9f       	mul	r24, r30
    102e:	d0 01       	movw	r26, r0
    1030:	8f 9f       	mul	r24, r31
    1032:	b0 0d       	add	r27, r0
    1034:	11 24       	eor	r1, r1
    1036:	a1 59       	subi	r26, 0x91	; 145
    1038:	b7 4d       	sbci	r27, 0xD7	; 215
    103a:	8c 91       	ld	r24, X
    103c:	38 2f       	mov	r19, r24
    103e:	3f 71       	andi	r19, 0x1F	; 31
    1040:	82 95       	swap	r24
    1042:	86 95       	lsr	r24
    1044:	87 70       	andi	r24, 0x07	; 7
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	9c 91       	ld	r25, X
    104a:	93 70       	andi	r25, 0x03	; 3
    104c:	99 0f       	add	r25, r25
    104e:	99 0f       	add	r25, r25
    1050:	99 0f       	add	r25, r25
    1052:	89 2b       	or	r24, r25
    1054:	38 13       	cpse	r19, r24
    1056:	12 c0       	rjmp	.+36     	; 0x107c <USART_send_Array+0x74>
    1058:	da 01       	movw	r26, r20
    105a:	8d 91       	ld	r24, X+
    105c:	bd 01       	movw	r22, r26
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	4f ef       	ldi	r20, 0xFF	; 255
    1062:	42 0f       	add	r20, r18
    1064:	33 e2       	ldi	r19, 0x23	; 35
    1066:	3e 9f       	mul	r19, r30
    1068:	c0 01       	movw	r24, r0
    106a:	3f 9f       	mul	r19, r31
    106c:	90 0d       	add	r25, r0
    106e:	11 24       	eor	r1, r1
    1070:	81 59       	subi	r24, 0x91	; 145
    1072:	97 4d       	sbci	r25, 0xD7	; 215
    1074:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <FIFO_copy_from_lin>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	10 c0       	rjmp	.+32     	; 0x109c <USART_send_Array+0x94>
    107c:	33 e2       	ldi	r19, 0x23	; 35
    107e:	3e 9f       	mul	r19, r30
    1080:	c0 01       	movw	r24, r0
    1082:	3f 9f       	mul	r19, r31
    1084:	90 0d       	add	r25, r0
    1086:	11 24       	eor	r1, r1
    1088:	42 2f       	mov	r20, r18
    108a:	81 59       	subi	r24, 0x91	; 145
    108c:	97 4d       	sbci	r25, 0xD7	; 215
    108e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <FIFO_copy_from_lin>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <USART_send_Array+0x94>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	01 c0       	rjmp	.+2      	; 0x109c <USART_send_Array+0x94>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <USART_set_receive_Array_callback_fnc>:
//																			  die Callbackfunktion 
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_receive_Array_callback_fnc(uint8_t USARTnumber, \
	USART_receive_Array_callback_fnc_t USART_receive_Array_callback_in)
{
	if(USART_receive_Array_callback_in != NULL)
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	41 f0       	breq	.+16     	; 0x10b8 <USART_set_receive_Array_callback_fnc+0x16>
	{
		USART_receive_Array_callback[USARTnumber] = USART_receive_Array_callback_in;
    10a8:	e8 2f       	mov	r30, r24
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	e6 51       	subi	r30, 0x16	; 22
    10b2:	f7 4d       	sbci	r31, 0xD7	; 215
    10b4:	60 83       	st	Z, r22
    10b6:	71 83       	std	Z+1, r23	; 0x01
    10b8:	08 95       	ret

000010ba <USART_set_send_Array_callback_fnc>:
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_send_Array_callback_fnc(uint8_t USARTnumber, \
	USART_send_Array_callback_fnc_t USART_send_Array_callback_in)
{
	if(USART_send_Array_callback_in != NULL)
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	41 f0       	breq	.+16     	; 0x10d0 <USART_set_send_Array_callback_fnc+0x16>
	{
		USART_send_Array_callback[USARTnumber] = USART_send_Array_callback_in;
    10c0:	e8 2f       	mov	r30, r24
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 50       	subi	r30, 0x0E	; 14
    10ca:	f7 4d       	sbci	r31, 0xD7	; 215
    10cc:	60 83       	st	Z, r22
    10ce:	71 83       	std	Z+1, r23	; 0x01
    10d0:	08 95       	ret

000010d2 <USART_set_Bytes_to_receive>:
//		uint8_t Bytes_to_receive -> Bytes die Empfangen werden sollen. 
//									Maximale Anzahl wird duch den FIFO bestimmt.
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_Bytes_to_receive(uint8_t USARTnumber, uint8_t Bytes_to_receive)
{
	USART_bytes_to_receive[USARTnumber] = Bytes_to_receive;
    10d2:	e8 2f       	mov	r30, r24
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	e2 50       	subi	r30, 0x02	; 2
    10d8:	f7 4d       	sbci	r31, 0xD7	; 215
    10da:	60 83       	st	Z, r22
    10dc:	08 95       	ret

000010de <init>:
	counter--;
	return result;
}

//refactoring of function setup()
uint8_t init(){
    10de:	8f 92       	push	r8
    10e0:	af 92       	push	r10
    10e2:	cf 92       	push	r12
    10e4:	ef 92       	push	r14
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
	**/
	uint8_t prescaler = 1;
	uint8_t rxLength = 100;
	uint8_t txLength = 100;
	uint32_t baudrateSlave = 250000;
	init_Core_CLK(INTERN_CLK,prescaler);
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_Core_CLK>
	initDev(rxLength,txLength,iUSART1,baudrateSlave, USART_CHSIZE_8BIT_gc, USART_PMODE_ODD_gc, USART_SBMODE_1BIT_gc, SYNC_TX, MPC_MODE, 0, PORTMUX_USARTx_DEFAULT_gc);
    10f2:	1f 92       	push	r1
    10f4:	1f 92       	push	r1
    10f6:	1f 92       	push	r1
    10f8:	81 2c       	mov	r8, r1
    10fa:	a1 2c       	mov	r10, r1
    10fc:	0f 2e       	mov	r0, r31
    10fe:	f0 e3       	ldi	r31, 0x30	; 48
    1100:	cf 2e       	mov	r12, r31
    1102:	f0 2d       	mov	r31, r0
    1104:	0f 2e       	mov	r0, r31
    1106:	f3 e0       	ldi	r31, 0x03	; 3
    1108:	ef 2e       	mov	r14, r31
    110a:	f0 2d       	mov	r31, r0
    110c:	00 e9       	ldi	r16, 0x90	; 144
    110e:	10 ed       	ldi	r17, 0xD0	; 208
    1110:	23 e0       	ldi	r18, 0x03	; 3
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	64 e6       	ldi	r22, 0x64	; 100
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	84 e6       	ldi	r24, 0x64	; 100
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 cd 08 	call	0x119a	; 0x119a <initDev>
	//bool sensorUartInit = !USART_init(iUSART0,9600, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, USART_SBMODE_1BIT_gc, SYNC_TX,MPC_MODE, 0, PORTMUX_USARTx_DEFAULT_gc);
	//USART_set_receive_Array_callback_fnc(iUSART1,&dataReceive);
	//bool slaveUartInit = !USART_init(iUSART1,baudrateSlave, USART_CHSIZE_8BIT_gc, USART_PMODE_ODD_gc, USART_SBMODE_1BIT_gc, SYNC_TX, MPC_MODE, 0, PORTMUX_USARTx_DEFAULT_gc);
	//USART_set_send_Array_callback_fnc(iUSART1,&dataSend);
	//USART_set_Bytes_to_receive(iUSART1,32);
	sei();//active the global interrupt, weil es bisher nicht aktiviert wird
    1122:	78 94       	sei
	//volatile bool check = USART_send_Array(iUSART1, 0, start_command, sizeof(start_command));
	return true;//sensorUartInit&&slaveUartInit;
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
}
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ef 90       	pop	r14
    1132:	cf 90       	pop	r12
    1134:	af 90       	pop	r10
    1136:	8f 90       	pop	r8
    1138:	08 95       	ret

0000113a <main>:

int main(void) {
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	63 97       	sbiw	r28, 0x13	; 19
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	de bf       	out	0x3e, r29	; 62
	uint8_t testMsg[16]={0x02,0x00,0x0A,0x00,0x20,0x00,0x53,0x49,0x43,0x4B,0x5F,0x4C,0x4D,0x53,0x5F,0xB2};
    1148:	80 e1       	ldi	r24, 0x10	; 16
    114a:	e3 e8       	ldi	r30, 0x83	; 131
    114c:	f5 e5       	ldi	r31, 0x55	; 85
    114e:	de 01       	movw	r26, r28
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	8a 95       	dec	r24
    1158:	e1 f7       	brne	.-8      	; 0x1152 <main+0x18>
	txDataLength = 16;
	counter = 16/32 + (((16%32)==0)?0:1);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 93 06 29 	sts	0x2906, r24	; 0x802906 <counter>
    1162:	90 93 07 29 	sts	0x2907, r25	; 0x802907 <counter+0x1>
	volatile uint8_t initCheck = init();
    1166:	0e 94 6f 08 	call	0x10de	; 0x10de <init>
    116a:	89 8b       	std	Y+17, r24	; 0x11
	volatile unsigned int i =0;
    116c:	1a 8a       	std	Y+18, r1	; 0x12
    116e:	1b 8a       	std	Y+19, r1	; 0x13
#ifdef DEBUG_ACTIVE
	uint8_t testRx[732]={0};
	uint8_t rxLength;
	USART_receive_Array(iUSART0, 0, testRx, 732,&rxLength);
#endif
	USART_send_Array(iUSART1, 0, testMsg, 16);
    1170:	20 e1       	ldi	r18, 0x10	; 16
    1172:	ae 01       	movw	r20, r28
    1174:	4f 5f       	subi	r20, 0xFF	; 255
    1176:	5f 4f       	sbci	r21, 0xFF	; 255
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	0e 94 04 08 	call	0x1008	; 0x1008 <USART_send_Array>
    while (1) {
		//checkSend = USART_send_Array(iUSART1, 0, testMsg, 16);
		if(initCheck){
    1180:	89 89       	ldd	r24, Y+17	; 0x11
    1182:	88 23       	and	r24, r24
    1184:	e9 f3       	breq	.-6      	; 0x1180 <main+0x46>
			i++;
    1186:	8a 89       	ldd	r24, Y+18	; 0x12
    1188:	9b 89       	ldd	r25, Y+19	; 0x13
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	8a 8b       	std	Y+18, r24	; 0x12
    118e:	9b 8b       	std	Y+19, r25	; 0x13
    1190:	f7 cf       	rjmp	.-18     	; 0x1180 <main+0x46>

00001192 <callbackRx>:
	return result;
}

bool callbackRx(uint8_t adress, uint8_t data[], uint8_t length){
	return true;
}
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 95       	ret

00001196 <callbackTx>:

bool callbackTx(uint8_t* adress, uint8_t* data[], uint8_t* length,uint8_t max_length){
	return true;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	08 95       	ret

0000119a <initDev>:

slaveDevice_t obj ={.initState=OFF,.crcActive=OFF,.rxTime=0,.txTime=0};

processResult_t initDev(uint16_t rxLength, uint16_t txLength,uint8_t USARTnumber, uint32_t baudrate,\
USART_CHSIZE_t bits, USART_PMODE_t parity,USART_SBMODE_t stopbit, \
bool sync, bool MPCM, uint8_t address, PORTMUX_USARTx_t PortMux){
    119a:	2f 92       	push	r2
    119c:	3f 92       	push	r3
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <initDev+0x26>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t result;
	if((rxLength!=0)&&(txLength!=0)){
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <initDev+0x30>
    11c8:	60 c0       	rjmp	.+192    	; 0x128a <initDev+0xf0>
    11ca:	61 15       	cp	r22, r1
    11cc:	71 05       	cpc	r23, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <initDev+0x38>
    11d0:	5e c0       	rjmp	.+188    	; 0x128e <initDev+0xf4>
    11d2:	d8 2c       	mov	r13, r8
    11d4:	9a 2c       	mov	r9, r10
    11d6:	ca 82       	std	Y+2, r12	; 0x02
    11d8:	e9 82       	std	Y+1, r14	; 0x01
    11da:	28 01       	movw	r4, r16
    11dc:	39 01       	movw	r6, r18
    11de:	14 2f       	mov	r17, r20
    11e0:	1b 01       	movw	r2, r22
    11e2:	7c 01       	movw	r14, r24
		if(obj.initState==ON){
    11e4:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <obj+0xd>
    11e8:	80 fd       	sbrc	r24, 0
    11ea:	11 c0       	rjmp	.+34     	; 0x120e <initDev+0x74>
			free((void*)(obj.rxBuffer));
    11ec:	0f 2e       	mov	r0, r31
    11ee:	f8 ed       	ldi	r31, 0xD8	; 216
    11f0:	af 2e       	mov	r10, r31
    11f2:	f8 e2       	ldi	r31, 0x28	; 40
    11f4:	bf 2e       	mov	r11, r31
    11f6:	f0 2d       	mov	r31, r0
    11f8:	f5 01       	movw	r30, r10
    11fa:	83 85       	ldd	r24, Z+11	; 0x0b
    11fc:	94 85       	ldd	r25, Z+12	; 0x0c
    11fe:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
			free((void*)(obj.txBuffer));
    1202:	f5 01       	movw	r30, r10
    1204:	81 85       	ldd	r24, Z+9	; 0x09
    1206:	92 85       	ldd	r25, Z+10	; 0x0a
    1208:	0e 94 1f 0a 	call	0x143e	; 0x143e <free>
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <initDev+0x7e>
		} else{
			obj.initState=ON;
    120e:	e5 ee       	ldi	r30, 0xE5	; 229
    1210:	f8 e2       	ldi	r31, 0x28	; 40
    1212:	80 81       	ld	r24, Z
    1214:	8e 7f       	andi	r24, 0xFE	; 254
    1216:	80 83       	st	Z, r24
		}
		obj.uart = USARTnumber;
    1218:	0f 2e       	mov	r0, r31
    121a:	f8 ed       	ldi	r31, 0xD8	; 216
    121c:	af 2e       	mov	r10, r31
    121e:	f8 e2       	ldi	r31, 0x28	; 40
    1220:	bf 2e       	mov	r11, r31
    1222:	f0 2d       	mov	r31, r0
    1224:	f5 01       	movw	r30, r10
    1226:	10 83       	st	Z, r17
		obj.rxLenMax = rxLength;
    1228:	e5 82       	std	Z+5, r14	; 0x05
    122a:	f6 82       	std	Z+6, r15	; 0x06
		obj.txLenMax = txLength;
    122c:	27 82       	std	Z+7, r2	; 0x07
    122e:	30 86       	std	Z+8, r3	; 0x08
		obj.rxBuffer = (uint8_t *)malloc(rxLength*sizeof(uint8_t));
    1230:	c7 01       	movw	r24, r14
    1232:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
    1236:	f5 01       	movw	r30, r10
    1238:	83 87       	std	Z+11, r24	; 0x0b
    123a:	94 87       	std	Z+12, r25	; 0x0c
		obj.txBuffer = (uint8_t *)malloc(txLength*sizeof(uint8_t));
    123c:	c1 01       	movw	r24, r2
    123e:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
    1242:	f5 01       	movw	r30, r10
    1244:	81 87       	std	Z+9, r24	; 0x09
    1246:	92 87       	std	Z+10, r25	; 0x0a
		bool slaveUartInit = USART_init(USARTnumber,baudrate, bits, parity, \
    1248:	89 8d       	ldd	r24, Y+25	; 0x19
    124a:	8f 93       	push	r24
    124c:	88 8c       	ldd	r8, Y+24	; 0x18
    124e:	af 88       	ldd	r10, Y+23	; 0x17
    1250:	cd 2c       	mov	r12, r13
    1252:	e9 2c       	mov	r14, r9
    1254:	0a 81       	ldd	r16, Y+2	; 0x02
    1256:	29 81       	ldd	r18, Y+1	; 0x01
    1258:	b3 01       	movw	r22, r6
    125a:	a2 01       	movw	r20, r4
    125c:	81 2f       	mov	r24, r17
    125e:	0e 94 9b 05 	call	0xb36	; 0xb36 <USART_init>
    1262:	08 2f       	mov	r16, r24
										 stopbit, sync, MPCM,address, PortMux);
		USART_set_send_Array_callback_fnc(USARTnumber,&callbackTx);
    1264:	6b ec       	ldi	r22, 0xCB	; 203
    1266:	78 e0       	ldi	r23, 0x08	; 8
    1268:	81 2f       	mov	r24, r17
    126a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <USART_set_send_Array_callback_fnc>
		USART_set_receive_Array_callback_fnc(USARTnumber,&callbackRx);
    126e:	69 ec       	ldi	r22, 0xC9	; 201
    1270:	78 e0       	ldi	r23, 0x08	; 8
    1272:	81 2f       	mov	r24, r17
    1274:	0e 94 51 08 	call	0x10a2	; 0x10a2 <USART_set_receive_Array_callback_fnc>
		USART_set_Bytes_to_receive(iUSART1,32);
    1278:	60 e2       	ldi	r22, 0x20	; 32
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <USART_set_Bytes_to_receive>
		result = (!slaveUartInit)?NO_ERROR:PROCESS_FAIL;
    1280:	0f 90       	pop	r0
    1282:	01 11       	cpse	r16, r1
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <initDev+0xf8>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <initDev+0xfa>
	}else{
		result = LENGTH_INVALID;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <initDev+0xfa>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <initDev+0xfa>
		bool slaveUartInit = USART_init(USARTnumber,baudrate, bits, parity, \
										 stopbit, sync, MPCM,address, PortMux);
		USART_set_send_Array_callback_fnc(USARTnumber,&callbackTx);
		USART_set_receive_Array_callback_fnc(USARTnumber,&callbackRx);
		USART_set_Bytes_to_receive(iUSART1,32);
		result = (!slaveUartInit)?NO_ERROR:PROCESS_FAIL;
    1292:	85 e0       	ldi	r24, 0x05	; 5
	}else{
		result = LENGTH_INVALID;
	}
	return result;
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	7f 90       	pop	r7
    12b2:	6f 90       	pop	r6
    12b4:	5f 90       	pop	r5
    12b6:	4f 90       	pop	r4
    12b8:	3f 90       	pop	r3
    12ba:	2f 90       	pop	r2
    12bc:	08 95       	ret

000012be <__udivmodsi4>:
    12be:	a1 e2       	ldi	r26, 0x21	; 33
    12c0:	1a 2e       	mov	r1, r26
    12c2:	aa 1b       	sub	r26, r26
    12c4:	bb 1b       	sub	r27, r27
    12c6:	fd 01       	movw	r30, r26
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <__udivmodsi4_ep>

000012ca <__udivmodsi4_loop>:
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	ee 1f       	adc	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	a2 17       	cp	r26, r18
    12d4:	b3 07       	cpc	r27, r19
    12d6:	e4 07       	cpc	r30, r20
    12d8:	f5 07       	cpc	r31, r21
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <__udivmodsi4_ep>
    12dc:	a2 1b       	sub	r26, r18
    12de:	b3 0b       	sbc	r27, r19
    12e0:	e4 0b       	sbc	r30, r20
    12e2:	f5 0b       	sbc	r31, r21

000012e4 <__udivmodsi4_ep>:
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	1a 94       	dec	r1
    12ee:	69 f7       	brne	.-38     	; 0x12ca <__udivmodsi4_loop>
    12f0:	60 95       	com	r22
    12f2:	70 95       	com	r23
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	bd 01       	movw	r22, r26
    12fe:	cf 01       	movw	r24, r30
    1300:	08 95       	ret

00001302 <__tablejump2__>:
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	05 90       	lpm	r0, Z+
    1308:	f4 91       	lpm	r31, Z
    130a:	e0 2d       	mov	r30, r0
    130c:	09 94       	ijmp

0000130e <malloc>:
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	10 f4       	brcc	.+4      	; 0x1320 <malloc+0x12>
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	e0 91 0a 29 	lds	r30, 0x290A	; 0x80290a <__flp>
    1324:	f0 91 0b 29 	lds	r31, 0x290B	; 0x80290b <__flp+0x1>
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	19 f1       	breq	.+70     	; 0x137a <malloc+0x6c>
    1334:	40 81       	ld	r20, Z
    1336:	51 81       	ldd	r21, Z+1	; 0x01
    1338:	02 81       	ldd	r16, Z+2	; 0x02
    133a:	13 81       	ldd	r17, Z+3	; 0x03
    133c:	48 17       	cp	r20, r24
    133e:	59 07       	cpc	r21, r25
    1340:	c8 f0       	brcs	.+50     	; 0x1374 <malloc+0x66>
    1342:	84 17       	cp	r24, r20
    1344:	95 07       	cpc	r25, r21
    1346:	69 f4       	brne	.+26     	; 0x1362 <malloc+0x54>
    1348:	10 97       	sbiw	r26, 0x00	; 0
    134a:	31 f0       	breq	.+12     	; 0x1358 <malloc+0x4a>
    134c:	12 96       	adiw	r26, 0x02	; 2
    134e:	0c 93       	st	X, r16
    1350:	12 97       	sbiw	r26, 0x02	; 2
    1352:	13 96       	adiw	r26, 0x03	; 3
    1354:	1c 93       	st	X, r17
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <malloc+0x98>
    1358:	00 93 0a 29 	sts	0x290A, r16	; 0x80290a <__flp>
    135c:	10 93 0b 29 	sts	0x290B, r17	; 0x80290b <__flp+0x1>
    1360:	22 c0       	rjmp	.+68     	; 0x13a6 <malloc+0x98>
    1362:	21 15       	cp	r18, r1
    1364:	31 05       	cpc	r19, r1
    1366:	19 f0       	breq	.+6      	; 0x136e <malloc+0x60>
    1368:	42 17       	cp	r20, r18
    136a:	53 07       	cpc	r21, r19
    136c:	18 f4       	brcc	.+6      	; 0x1374 <malloc+0x66>
    136e:	9a 01       	movw	r18, r20
    1370:	bd 01       	movw	r22, r26
    1372:	ef 01       	movw	r28, r30
    1374:	df 01       	movw	r26, r30
    1376:	f8 01       	movw	r30, r16
    1378:	db cf       	rjmp	.-74     	; 0x1330 <malloc+0x22>
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	f9 f0       	breq	.+62     	; 0x13be <malloc+0xb0>
    1380:	28 1b       	sub	r18, r24
    1382:	39 0b       	sbc	r19, r25
    1384:	24 30       	cpi	r18, 0x04	; 4
    1386:	31 05       	cpc	r19, r1
    1388:	80 f4       	brcc	.+32     	; 0x13aa <malloc+0x9c>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	61 15       	cp	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	21 f0       	breq	.+8      	; 0x139c <malloc+0x8e>
    1394:	fb 01       	movw	r30, r22
    1396:	82 83       	std	Z+2, r24	; 0x02
    1398:	93 83       	std	Z+3, r25	; 0x03
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <malloc+0x96>
    139c:	80 93 0a 29 	sts	0x290A, r24	; 0x80290a <__flp>
    13a0:	90 93 0b 29 	sts	0x290B, r25	; 0x80290b <__flp+0x1>
    13a4:	fe 01       	movw	r30, r28
    13a6:	32 96       	adiw	r30, 0x02	; 2
    13a8:	44 c0       	rjmp	.+136    	; 0x1432 <malloc+0x124>
    13aa:	fe 01       	movw	r30, r28
    13ac:	e2 0f       	add	r30, r18
    13ae:	f3 1f       	adc	r31, r19
    13b0:	81 93       	st	Z+, r24
    13b2:	91 93       	st	Z+, r25
    13b4:	22 50       	subi	r18, 0x02	; 2
    13b6:	31 09       	sbc	r19, r1
    13b8:	28 83       	st	Y, r18
    13ba:	39 83       	std	Y+1, r19	; 0x01
    13bc:	3a c0       	rjmp	.+116    	; 0x1432 <malloc+0x124>
    13be:	20 91 08 29 	lds	r18, 0x2908	; 0x802908 <__brkval>
    13c2:	30 91 09 29 	lds	r19, 0x2909	; 0x802909 <__brkval+0x1>
    13c6:	23 2b       	or	r18, r19
    13c8:	41 f4       	brne	.+16     	; 0x13da <malloc+0xcc>
    13ca:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    13ce:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    13d2:	20 93 08 29 	sts	0x2908, r18	; 0x802908 <__brkval>
    13d6:	30 93 09 29 	sts	0x2909, r19	; 0x802909 <__brkval+0x1>
    13da:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    13de:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    13e2:	21 15       	cp	r18, r1
    13e4:	31 05       	cpc	r19, r1
    13e6:	41 f4       	brne	.+16     	; 0x13f8 <malloc+0xea>
    13e8:	2d b7       	in	r18, 0x3d	; 61
    13ea:	3e b7       	in	r19, 0x3e	; 62
    13ec:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    13f0:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    13f4:	24 1b       	sub	r18, r20
    13f6:	35 0b       	sbc	r19, r21
    13f8:	e0 91 08 29 	lds	r30, 0x2908	; 0x802908 <__brkval>
    13fc:	f0 91 09 29 	lds	r31, 0x2909	; 0x802909 <__brkval+0x1>
    1400:	e2 17       	cp	r30, r18
    1402:	f3 07       	cpc	r31, r19
    1404:	a0 f4       	brcc	.+40     	; 0x142e <malloc+0x120>
    1406:	2e 1b       	sub	r18, r30
    1408:	3f 0b       	sbc	r19, r31
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	78 f0       	brcs	.+30     	; 0x142e <malloc+0x120>
    1410:	ac 01       	movw	r20, r24
    1412:	4e 5f       	subi	r20, 0xFE	; 254
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	24 17       	cp	r18, r20
    1418:	35 07       	cpc	r19, r21
    141a:	48 f0       	brcs	.+18     	; 0x142e <malloc+0x120>
    141c:	4e 0f       	add	r20, r30
    141e:	5f 1f       	adc	r21, r31
    1420:	40 93 08 29 	sts	0x2908, r20	; 0x802908 <__brkval>
    1424:	50 93 09 29 	sts	0x2909, r21	; 0x802909 <__brkval+0x1>
    1428:	81 93       	st	Z+, r24
    142a:	91 93       	st	Z+, r25
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <malloc+0x124>
    142e:	e0 e0       	ldi	r30, 0x00	; 0
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	cf 01       	movw	r24, r30
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <free>:
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	09 f4       	brne	.+2      	; 0x1448 <free+0xa>
    1446:	81 c0       	rjmp	.+258    	; 0x154a <free+0x10c>
    1448:	fc 01       	movw	r30, r24
    144a:	32 97       	sbiw	r30, 0x02	; 2
    144c:	12 82       	std	Z+2, r1	; 0x02
    144e:	13 82       	std	Z+3, r1	; 0x03
    1450:	a0 91 0a 29 	lds	r26, 0x290A	; 0x80290a <__flp>
    1454:	b0 91 0b 29 	lds	r27, 0x290B	; 0x80290b <__flp+0x1>
    1458:	10 97       	sbiw	r26, 0x00	; 0
    145a:	81 f4       	brne	.+32     	; 0x147c <free+0x3e>
    145c:	20 81       	ld	r18, Z
    145e:	31 81       	ldd	r19, Z+1	; 0x01
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	20 91 08 29 	lds	r18, 0x2908	; 0x802908 <__brkval>
    1468:	30 91 09 29 	lds	r19, 0x2909	; 0x802909 <__brkval+0x1>
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	51 f5       	brne	.+84     	; 0x14c6 <free+0x88>
    1472:	e0 93 08 29 	sts	0x2908, r30	; 0x802908 <__brkval>
    1476:	f0 93 09 29 	sts	0x2909, r31	; 0x802909 <__brkval+0x1>
    147a:	67 c0       	rjmp	.+206    	; 0x154a <free+0x10c>
    147c:	ed 01       	movw	r28, r26
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	ce 17       	cp	r28, r30
    1484:	df 07       	cpc	r29, r31
    1486:	40 f4       	brcc	.+16     	; 0x1498 <free+0x5a>
    1488:	4a 81       	ldd	r20, Y+2	; 0x02
    148a:	5b 81       	ldd	r21, Y+3	; 0x03
    148c:	9e 01       	movw	r18, r28
    148e:	41 15       	cp	r20, r1
    1490:	51 05       	cpc	r21, r1
    1492:	f1 f0       	breq	.+60     	; 0x14d0 <free+0x92>
    1494:	ea 01       	movw	r28, r20
    1496:	f5 cf       	rjmp	.-22     	; 0x1482 <free+0x44>
    1498:	c2 83       	std	Z+2, r28	; 0x02
    149a:	d3 83       	std	Z+3, r29	; 0x03
    149c:	40 81       	ld	r20, Z
    149e:	51 81       	ldd	r21, Z+1	; 0x01
    14a0:	84 0f       	add	r24, r20
    14a2:	95 1f       	adc	r25, r21
    14a4:	c8 17       	cp	r28, r24
    14a6:	d9 07       	cpc	r29, r25
    14a8:	59 f4       	brne	.+22     	; 0x14c0 <free+0x82>
    14aa:	88 81       	ld	r24, Y
    14ac:	99 81       	ldd	r25, Y+1	; 0x01
    14ae:	84 0f       	add	r24, r20
    14b0:	95 1f       	adc	r25, r21
    14b2:	02 96       	adiw	r24, 0x02	; 2
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	82 83       	std	Z+2, r24	; 0x02
    14be:	93 83       	std	Z+3, r25	; 0x03
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <free+0x92>
    14c6:	e0 93 0a 29 	sts	0x290A, r30	; 0x80290a <__flp>
    14ca:	f0 93 0b 29 	sts	0x290B, r31	; 0x80290b <__flp+0x1>
    14ce:	3d c0       	rjmp	.+122    	; 0x154a <free+0x10c>
    14d0:	e9 01       	movw	r28, r18
    14d2:	ea 83       	std	Y+2, r30	; 0x02
    14d4:	fb 83       	std	Y+3, r31	; 0x03
    14d6:	49 91       	ld	r20, Y+
    14d8:	59 91       	ld	r21, Y+
    14da:	c4 0f       	add	r28, r20
    14dc:	d5 1f       	adc	r29, r21
    14de:	ec 17       	cp	r30, r28
    14e0:	fd 07       	cpc	r31, r29
    14e2:	61 f4       	brne	.+24     	; 0x14fc <free+0xbe>
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	84 0f       	add	r24, r20
    14ea:	95 1f       	adc	r25, r21
    14ec:	02 96       	adiw	r24, 0x02	; 2
    14ee:	e9 01       	movw	r28, r18
    14f0:	88 83       	st	Y, r24
    14f2:	99 83       	std	Y+1, r25	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	9b 83       	std	Y+3, r25	; 0x03
    14fc:	e0 e0       	ldi	r30, 0x00	; 0
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	12 96       	adiw	r26, 0x02	; 2
    1502:	8d 91       	ld	r24, X+
    1504:	9c 91       	ld	r25, X
    1506:	13 97       	sbiw	r26, 0x03	; 3
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	19 f0       	breq	.+6      	; 0x1512 <free+0xd4>
    150c:	fd 01       	movw	r30, r26
    150e:	dc 01       	movw	r26, r24
    1510:	f7 cf       	rjmp	.-18     	; 0x1500 <free+0xc2>
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	11 97       	sbiw	r26, 0x01	; 1
    1518:	9d 01       	movw	r18, r26
    151a:	2e 5f       	subi	r18, 0xFE	; 254
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	20 91 08 29 	lds	r18, 0x2908	; 0x802908 <__brkval>
    1526:	30 91 09 29 	lds	r19, 0x2909	; 0x802909 <__brkval+0x1>
    152a:	28 17       	cp	r18, r24
    152c:	39 07       	cpc	r19, r25
    152e:	69 f4       	brne	.+26     	; 0x154a <free+0x10c>
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	29 f4       	brne	.+10     	; 0x153e <free+0x100>
    1534:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <__flp>
    1538:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <__flp+0x1>
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <free+0x104>
    153e:	12 82       	std	Z+2, r1	; 0x02
    1540:	13 82       	std	Z+3, r1	; 0x03
    1542:	a0 93 08 29 	sts	0x2908, r26	; 0x802908 <__brkval>
    1546:	b0 93 09 29 	sts	0x2909, r27	; 0x802909 <__brkval+0x1>
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <memcpy>:
    1550:	fb 01       	movw	r30, r22
    1552:	dc 01       	movw	r26, r24
    1554:	02 c0       	rjmp	.+4      	; 0x155a <memcpy+0xa>
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	41 50       	subi	r20, 0x01	; 1
    155c:	50 40       	sbci	r21, 0x00	; 0
    155e:	d8 f7       	brcc	.-10     	; 0x1556 <memcpy+0x6>
    1560:	08 95       	ret

00001562 <_exit>:
    1562:	f8 94       	cli

00001564 <__stop_program>:
    1564:	ff cf       	rjmp	.-2      	; 0x1564 <__stop_program>
