
BoatDriveControl_2021_01_31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08008268  08008268  00018268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b8  080087b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c0  080087c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080087c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001e8  080089b0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080089b0  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cc2  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a5d  00000000  00000000  00035eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  000399c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fdb9  00000000  00000000  0003a910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9c5  00000000  00000000  0005a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c65cf  00000000  00000000  0006908e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f65d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  0012f6d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800824c 	.word	0x0800824c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800824c 	.word	0x0800824c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <calcBearing>:
	float distance = EARTHRADIUS * acos(sin(coordA.lat) * sin(coordB.lat) + cos(coordA.lat) * cos(coordB.lat) * cos(coordB.lon - coordA.lon));
	return distance;
}


float calcBearing(coord_t coordA, coord_t coordB){
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	ed2d 8b02 	vpush	{d8}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	eeb0 6a40 	vmov.f32	s12, s0
 8000fa8:	eef0 6a60 	vmov.f32	s13, s1
 8000fac:	eeb0 7a41 	vmov.f32	s14, s2
 8000fb0:	eef0 7a61 	vmov.f32	s15, s3
 8000fb4:	ed87 6a02 	vstr	s12, [r7, #8]
 8000fb8:	edc7 6a03 	vstr	s13, [r7, #12]
 8000fbc:	ed87 7a00 	vstr	s14, [r7]
 8000fc0:	edc7 7a01 	vstr	s15, [r7, #4]
	// Breite
	coordA.lat *= DEG_TO_RAD;
 8000fc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc8:	4b77      	ldr	r3, [pc, #476]	; (80011a8 <calcBearing+0x210>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	edc7 7a02 	vstr	s15, [r7, #8]
	coordB.lat *= DEG_TO_RAD;
 8000fd6:	ed97 7a00 	vldr	s14, [r7]
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <calcBearing+0x210>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe4:	edc7 7a00 	vstr	s15, [r7]
	// Laenge
	coordA.lon *= DEG_TO_RAD;
 8000fe8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fec:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <calcBearing+0x210>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff6:	edc7 7a03 	vstr	s15, [r7, #12]
	coordB.lon *= DEG_TO_RAD;
 8000ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffe:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <calcBearing+0x210>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001008:	edc7 7a01 	vstr	s15, [r7, #4]

	// https://www.delius-klasing.de/media/pdf/0e/3b/d3/978-3-88412-494-9-nautische-formelsammlung-navigation-stand-12-2016.pdf
	float bearing = atan2(sin(coordB.lon-coordA.lon)*cos(coordB.lat),(cos(coordA.lat)*sin(coordB.lat))-
 800100c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001010:	edd7 7a03 	vldr	s15, [r7, #12]
 8001014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff fabc 	bl	8000598 <__aeabi_f2d>
 8001020:	4603      	mov	r3, r0
 8001022:	460c      	mov	r4, r1
 8001024:	ec44 3b10 	vmov	d0, r3, r4
 8001028:	f005 fcfe 	bl	8006a28 <sin>
 800102c:	ec55 4b10 	vmov	r4, r5, d0
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fab0 	bl	8000598 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b10 	vmov	d0, r2, r3
 8001040:	f005 fc62 	bl	8006908 <cos>
 8001044:	ec53 2b10 	vmov	r2, r3, d0
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fafc 	bl	8000648 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	ec44 3b18 	vmov	d8, r3, r4
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa9c 	bl	8000598 <__aeabi_f2d>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	ec44 3b10 	vmov	d0, r3, r4
 8001068:	f005 fc4e 	bl	8006908 <cos>
 800106c:	ec55 4b10 	vmov	r4, r5, d0
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa90 	bl	8000598 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	ec43 2b10 	vmov	d0, r2, r3
 8001080:	f005 fcd2 	bl	8006a28 <sin>
 8001084:	ec53 2b10 	vmov	r2, r3, d0
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff fadc 	bl	8000648 <__aeabi_dmul>
 8001090:	4603      	mov	r3, r0
 8001092:	460c      	mov	r4, r1
 8001094:	4625      	mov	r5, r4
 8001096:	461c      	mov	r4, r3
			(sin(coordA.lat)*cos(coordB.lat)*cos(coordB.lon-coordA.lon)));
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa7c 	bl	8000598 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	ec43 2b10 	vmov	d0, r2, r3
 80010a8:	f005 fcbe 	bl	8006a28 <sin>
 80010ac:	ec59 8b10 	vmov	r8, r9, d0
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa70 	bl	8000598 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b10 	vmov	d0, r2, r3
 80010c0:	f005 fc22 	bl	8006908 <cos>
 80010c4:	ec53 2b10 	vmov	r2, r3, d0
 80010c8:	4640      	mov	r0, r8
 80010ca:	4649      	mov	r1, r9
 80010cc:	f7ff fabc 	bl	8000648 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4690      	mov	r8, r2
 80010d6:	4699      	mov	r9, r3
 80010d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80010dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	ee17 0a90 	vmov	r0, s15
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b10 	vmov	d0, r2, r3
 80010f4:	f005 fc08 	bl	8006908 <cos>
 80010f8:	ec53 2b10 	vmov	r2, r3, d0
 80010fc:	4640      	mov	r0, r8
 80010fe:	4649      	mov	r1, r9
 8001100:	f7ff faa2 	bl	8000648 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
	float bearing = atan2(sin(coordB.lon-coordA.lon)*cos(coordB.lat),(cos(coordA.lat)*sin(coordB.lat))-
 8001108:	4620      	mov	r0, r4
 800110a:	4629      	mov	r1, r5
 800110c:	f7ff f8e4 	bl	80002d8 <__aeabi_dsub>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	ec44 3b17 	vmov	d7, r3, r4
 8001118:	eeb0 1a47 	vmov.f32	s2, s14
 800111c:	eef0 1a67 	vmov.f32	s3, s15
 8001120:	eeb0 0a48 	vmov.f32	s0, s16
 8001124:	eef0 0a68 	vmov.f32	s1, s17
 8001128:	f005 fcc6 	bl	8006ab8 <atan2>
 800112c:	ec54 3b10 	vmov	r3, r4, d0
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fd60 	bl	8000bf8 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	617b      	str	r3, [r7, #20]
	bearing = fmod((bearing*RAD_TO_DEG + 360.0), 360);
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <calcBearing+0x214>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114a:	ee17 0a90 	vmov	r0, s15
 800114e:	f7ff fa23 	bl	8000598 <__aeabi_f2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <calcBearing+0x218>)
 8001158:	f7ff f8c0 	bl	80002dc <__adddf3>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	ec44 3b17 	vmov	d7, r3, r4
 8001164:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80011a0 <calcBearing+0x208>
 8001168:	eeb0 0a47 	vmov.f32	s0, s14
 800116c:	eef0 0a67 	vmov.f32	s1, s15
 8001170:	f005 fca4 	bl	8006abc <fmod>
 8001174:	ec54 3b10 	vmov	r3, r4, d0
 8001178:	4618      	mov	r0, r3
 800117a:	4621      	mov	r1, r4
 800117c:	f7ff fd3c 	bl	8000bf8 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	617b      	str	r3, [r7, #20]
	return bearing;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	ee07 3a90 	vmov	s15, r3
}
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	ecbd 8b02 	vpop	{d8}
 8001196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40768000 	.word	0x40768000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
 80011b0:	40768000 	.word	0x40768000

080011b4 <initCom>:

UART_HandleTypeDef handleUart;


// --- Einmalige Uebergabe des UART-Handle ---
void initCom(UART_HandleTypeDef handle){
 80011b4:	b084      	sub	sp, #16
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	f107 0c08 	add.w	ip, r7, #8
 80011be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	handleUart = handle;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <initCom+0x2c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	238c      	movs	r3, #140	; 0x8c
 80011cc:	461a      	mov	r2, r3
 80011ce:	f003 fb3f 	bl	8004850 <memcpy>
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011da:	b004      	add	sp, #16
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000029c 	.word	0x2000029c

080011e4 <updateSensorBlock>:


// --- Aktualisiert den gesamten Sensorgroessen-Block (lesen vom Bus) ---
status updateSensorBlock(localData* pLocalData){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	uint8_t tmp[17];

	status Status = readData(busaddr_gesb, tmp, 17);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2211      	movs	r2, #17
 80011f2:	4619      	mov	r1, r3
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f8bf 	bl	8001378 <readData>
 80011fa:	4603      	mov	r3, r0
 80011fc:	77fb      	strb	r3, [r7, #31]
	if(Status == STATUS_OK){						// busaddr_gesb ist die erste adresse des blocks, 17 = Anzahl der Bytes, die empfangen werden sollen
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d14d      	bne.n	80012a0 <updateSensorBlock+0xbc>
		(*pLocalData).gesb = tmp[0];
 8001204:	7b3a      	ldrb	r2, [r7, #12]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	701a      	strb	r2, [r3, #0]

		(*pLocalData).currPos.lon = convFixedToF32(&tmp[1], 4, 9, 17);		// 4 = Anzahl der Bytes, 9 = pIntegerBits, 17 = qFractionalBits
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	2311      	movs	r3, #17
 8001212:	2209      	movs	r2, #9
 8001214:	2104      	movs	r1, #4
 8001216:	f000 fa86 	bl	8001726 <convFixedToF32>
 800121a:	eef0 7a40 	vmov.f32	s15, s0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edc3 7a06 	vstr	s15, [r3, #24]

		(*pLocalData).currPos.lat = convFixedToF32(&tmp[5], 4, 9, 17);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	1d58      	adds	r0, r3, #5
 800122a:	2311      	movs	r3, #17
 800122c:	2209      	movs	r2, #9
 800122e:	2104      	movs	r1, #4
 8001230:	f000 fa79 	bl	8001726 <convFixedToF32>
 8001234:	eef0 7a40 	vmov.f32	s15, s0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a05 	vstr	s15, [r3, #20]

		(*pLocalData).currGPSSpeed = convFixedToF32(&tmp[10], 2, 8, 8);		// SatFix bei temp[9] ->wird nicht benoetigt
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	f103 000a 	add.w	r0, r3, #10
 8001246:	2308      	movs	r3, #8
 8001248:	2208      	movs	r2, #8
 800124a:	2102      	movs	r1, #2
 800124c:	f000 fa6b 	bl	8001726 <convFixedToF32>
 8001250:	eef0 7a40 	vmov.f32	s15, s0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a02 	vstr	s15, [r3, #8]

		(*pLocalData).currHeadingAngle = convFixedToF32(&tmp[12], 2, 9, 7);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	f103 000c 	add.w	r0, r3, #12
 8001262:	2307      	movs	r3, #7
 8001264:	2209      	movs	r2, #9
 8001266:	2102      	movs	r1, #2
 8001268:	f000 fa5d 	bl	8001726 <convFixedToF32>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edc3 7a03 	vstr	s15, [r3, #12]

		(*pLocalData).timestamp = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
		(*pLocalData).timestamp = tmp[14];			// sekunden
 800127c:	7ebb      	ldrb	r3, [r7, #26]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	611a      	str	r2, [r3, #16]
		(*pLocalData).timestamp |= (((uint32_t)tmp[15]) << 8); 	// minute
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	7efb      	ldrb	r3, [r7, #27]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	611a      	str	r2, [r3, #16]
		(*pLocalData).timestamp |= (((uint32_t)tmp[16]) << 16); // stunde
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	7f3b      	ldrb	r3, [r7, #28]
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
	}
	return Status;
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <updateFuehrungsgrBlock>:


// --- Aktualisiert den gesamten Fuehrungsgroessen-Block (lesen vom Bus) ---
status updateFuehrungsgrBlock(localData* pLocalData){
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b088      	sub	sp, #32
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	uint8_t tmp[20];

	status Status = readData(busaddr_coordA, tmp, 20);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2214      	movs	r2, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012be:	f000 f85b 	bl	8001378 <readData>
 80012c2:	4603      	mov	r3, r0
 80012c4:	77fb      	strb	r3, [r7, #31]
	if(Status == STATUS_OK){						// busaddr_coordA ist die erste adresse des blocks
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d150      	bne.n	800136e <updateFuehrungsgrBlock+0xc4>
		(*pLocalData).pointA.lat = convFixedToF32(&tmp[0], 4, 9, 17);
 80012cc:	f107 0008 	add.w	r0, r7, #8
 80012d0:	2311      	movs	r3, #17
 80012d2:	2209      	movs	r2, #9
 80012d4:	2104      	movs	r1, #4
 80012d6:	f000 fa26 	bl	8001726 <convFixedToF32>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edc3 7a07 	vstr	s15, [r3, #28]
		(*pLocalData).pointA.lon = convFixedToF32(&tmp[4], 4, 9, 17);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	1d18      	adds	r0, r3, #4
 80012ea:	2311      	movs	r3, #17
 80012ec:	2209      	movs	r2, #9
 80012ee:	2104      	movs	r1, #4
 80012f0:	f000 fa19 	bl	8001726 <convFixedToF32>
 80012f4:	eef0 7a40 	vmov.f32	s15, s0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a08 	vstr	s15, [r3, #32]

		(*pLocalData).pointB.lat = convFixedToF32(&tmp[8], 4, 9, 17);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	f103 0008 	add.w	r0, r3, #8
 8001306:	2311      	movs	r3, #17
 8001308:	2209      	movs	r2, #9
 800130a:	2104      	movs	r1, #4
 800130c:	f000 fa0b 	bl	8001726 <convFixedToF32>
 8001310:	eef0 7a40 	vmov.f32	s15, s0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		(*pLocalData).pointB.lon = convFixedToF32(&tmp[12], 4, 9, 17);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	f103 000c 	add.w	r0, r3, #12
 8001322:	2311      	movs	r3, #17
 8001324:	2209      	movs	r2, #9
 8001326:	2104      	movs	r1, #4
 8001328:	f000 f9fd 	bl	8001726 <convFixedToF32>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

		(*pLocalData).targetSpeed = convFixedToF32(&tmp[16], 2, 8, 8);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	f103 0010 	add.w	r0, r3, #16
 800133e:	2308      	movs	r3, #8
 8001340:	2208      	movs	r2, #8
 8001342:	2102      	movs	r1, #2
 8001344:	f000 f9ef 	bl	8001726 <convFixedToF32>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		(*pLocalData).epsilon = convFixedToF32(&tmp[18], 2, 8, 8);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	f103 0012 	add.w	r0, r3, #18
 800135a:	2308      	movs	r3, #8
 800135c:	2208      	movs	r2, #8
 800135e:	2102      	movs	r1, #2
 8001360:	f000 f9e1 	bl	8001726 <convFixedToF32>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	}
	return Status;
 800136e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <readData>:
   	}
}


// --- Fordert Daten einzeln vom Bus an und speichert diese ---
status readData(busaddr addr, uint8_t* pDB, uint8_t lndB){
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
 8001384:	4613      	mov	r3, r2
 8001386:	717b      	strb	r3, [r7, #5]
 8001388:	466b      	mov	r3, sp
 800138a:	461d      	mov	r5, r3
	// --- Sendebuffer erstellen ---
	uint8_t txDB[8];												// maximalen Speicher für txDatenbuffer (txDB) reservieren = 8 Bytes

	// --- txDatenbuffer fuellen ---
	txDB[0] = STARTBYTE;											// Startbyte
 800138c:	23a5      	movs	r3, #165	; 0xa5
 800138e:	723b      	strb	r3, [r7, #8]
	txDB[1] = SLAVEID;												// SLAVEID
 8001390:	2301      	movs	r3, #1
 8001392:	727b      	strb	r3, [r7, #9]
	txDB[3] = (READDATA + addr) >> 8;								// Daten-schreiben-Command (0x8000) + Adresse (12bit) -->hoechsten 8 bit (4Bit-Command und hoechsten 4 Bit Adresse)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	b2db      	uxtb	r3, r3
 800139e:	72fb      	strb	r3, [r7, #11]
	txDB[2] = (READDATA + addr);									// Daten-schreiben-Command (0x8000) + Adresse (12bit) -->niedrigsten 8 bit (niedrigsten 8 Bit Adresse)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	72bb      	strb	r3, [r7, #10]
	txDB[4] = 8;													// Framelaenge = 8 Bytes
 80013a6:	2308      	movs	r3, #8
 80013a8:	733b      	strb	r3, [r7, #12]
	txDB[5] = lndB;													// Datenlaengenanfrage
 80013aa:	797b      	ldrb	r3, [r7, #5]
 80013ac:	737b      	strb	r3, [r7, #13]
	txDB[6] = CRC8(&txDB[5], 1);									// Checksumme von der Datenlängenanfrage bilden: CRC8(Datenlänge, Anzahl der Datenbytes)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	3305      	adds	r3, #5
 80013b4:	2101      	movs	r1, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f97e 	bl	80016b8 <CRC8>
 80013bc:	4603      	mov	r3, r0
 80013be:	73bb      	strb	r3, [r7, #14]
	txDB[7] = ENDBYTE;												// Endbyte
 80013c0:	23a6      	movs	r3, #166	; 0xa6
 80013c2:	73fb      	strb	r3, [r7, #15]

	// --- Datenbuffer ueber UART senden ---
	HAL_StatusTypeDef TxStatusResult = HAL_UART_Transmit(&handleUart, (uint8_t *)txDB, 8, TIMEOUT_TIME);
 80013c4:	f107 0108 	add.w	r1, r7, #8
 80013c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013cc:	2208      	movs	r2, #8
 80013ce:	4855      	ldr	r0, [pc, #340]	; (8001524 <readData+0x1ac>)
 80013d0:	f002 fb86 	bl	8003ae0 <HAL_UART_Transmit>
 80013d4:	4603      	mov	r3, r0
 80013d6:	77bb      	strb	r3, [r7, #30]
	if (TxStatusResult != HAL_OK){
 80013d8:	7fbb      	ldrb	r3, [r7, #30]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00c      	beq.n	80013f8 <readData+0x80>
		sendStrToUSB("ErrorTX\r", 8);
 80013de:	2108      	movs	r1, #8
 80013e0:	4851      	ldr	r0, [pc, #324]	; (8001528 <readData+0x1b0>)
 80013e2:	f000 faa1 	bl	8001928 <sendStrToUSB>
		if (TxStatusResult == HAL_TIMEOUT)
 80013e6:	7fbb      	ldrb	r3, [r7, #30]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d103      	bne.n	80013f4 <readData+0x7c>
			sendStrToUSB("Timeout\r", 8);
 80013ec:	2108      	movs	r1, #8
 80013ee:	484f      	ldr	r0, [pc, #316]	; (800152c <readData+0x1b4>)
 80013f0:	f000 fa9a 	bl	8001928 <sendStrToUSB>
		return STATUS_TX_ERROR;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e090      	b.n	800151a <readData+0x1a2>
	}

	// --- Empfangsbuffer erstellen ---
	uint8_t rxDB[7+lndB];											// maximalen Speicher für rxDatenbuffer (rxDB) reservieren
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	1dd8      	adds	r0, r3, #7
 80013fc:	1e43      	subs	r3, r0, #1
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	4603      	mov	r3, r0
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f04f 0400 	mov.w	r4, #0
 8001410:	00d4      	lsls	r4, r2, #3
 8001412:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001416:	00cb      	lsls	r3, r1, #3
 8001418:	4603      	mov	r3, r0
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	f04f 0400 	mov.w	r4, #0
 8001428:	00d4      	lsls	r4, r2, #3
 800142a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800142e:	00cb      	lsls	r3, r1, #3
 8001430:	4603      	mov	r3, r0
 8001432:	3307      	adds	r3, #7
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	ebad 0d03 	sub.w	sp, sp, r3
 800143c:	466b      	mov	r3, sp
 800143e:	3300      	adds	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

	// --- Empfangsbuffer ueber UART-Funktion fuellen ---
	HAL_StatusTypeDef RxStatusResult = HAL_UART_Receive(&handleUart, (uint8_t *)rxDB, 7+lndB, TIMEOUT_TIME);
 8001442:	6979      	ldr	r1, [r7, #20]
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	b29b      	uxth	r3, r3
 8001448:	3307      	adds	r3, #7
 800144a:	b29a      	uxth	r2, r3
 800144c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001450:	4834      	ldr	r0, [pc, #208]	; (8001524 <readData+0x1ac>)
 8001452:	f002 fbdb 	bl	8003c0c <HAL_UART_Receive>
 8001456:	4603      	mov	r3, r0
 8001458:	74fb      	strb	r3, [r7, #19]
	if (RxStatusResult != HAL_OK){
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <readData+0x102>
		sendStrToUSB("ErrorRX\r", 8);
 8001460:	2108      	movs	r1, #8
 8001462:	4833      	ldr	r0, [pc, #204]	; (8001530 <readData+0x1b8>)
 8001464:	f000 fa60 	bl	8001928 <sendStrToUSB>
		if (RxStatusResult == HAL_TIMEOUT)
 8001468:	7cfb      	ldrb	r3, [r7, #19]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d103      	bne.n	8001476 <readData+0xfe>
			sendStrToUSB("Timeout\r", 8);
 800146e:	2108      	movs	r1, #8
 8001470:	482e      	ldr	r0, [pc, #184]	; (800152c <readData+0x1b4>)
 8001472:	f000 fa59 	bl	8001928 <sendStrToUSB>
		return STATUS_RX_ERROR;										// Letzte empfangene Byte ist nicht das Endbyte
 8001476:	2304      	movs	r3, #4
 8001478:	e04f      	b.n	800151a <readData+0x1a2>
	}

	// --- Relevante Daten in Databuffer extrahieren ---
	for (uint8_t i=0; i<lndB; i++){
 800147a:	2300      	movs	r3, #0
 800147c:	77fb      	strb	r3, [r7, #31]
 800147e:	e00a      	b.n	8001496 <readData+0x11e>
		pDB[i] = rxDB[5+i];
 8001480:	7ffb      	ldrb	r3, [r7, #31]
 8001482:	1d5a      	adds	r2, r3, #5
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	440b      	add	r3, r1
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	5c8a      	ldrb	r2, [r1, r2]
 800148e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<lndB; i++){
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	3301      	adds	r3, #1
 8001494:	77fb      	strb	r3, [r7, #31]
 8001496:	7ffa      	ldrb	r2, [r7, #31]
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3f0      	bcc.n	8001480 <readData+0x108>
	}

	// --- Empfangene Daten auswerten ---
	if (rxDB[0] != STARTBYTE)							// Startbyte auswerten
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2ba5      	cmp	r3, #165	; 0xa5
 80014a4:	d001      	beq.n	80014aa <readData+0x132>
		return STATUS_ERROR;
 80014a6:	2302      	movs	r3, #2
 80014a8:	e037      	b.n	800151a <readData+0x1a2>
	if (rxDB[1] != SLAVEID)								// SlaveID auswerten
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <readData+0x13e>
		return STATUS_ERROR;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e031      	b.n	800151a <readData+0x1a2>
	if (rxDB[3] != (uint8_t)(addr >> 8))				// Null-Bits (0x0) und die ersten 4 Adressbits auswerten
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	78da      	ldrb	r2, [r3, #3]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <readData+0x152>
		return STATUS_ERROR;
 80014c6:	2302      	movs	r3, #2
 80014c8:	e027      	b.n	800151a <readData+0x1a2>
	if (rxDB[2] != txDB[2])								// niedrigsten 8 Bits der Adresse auswerten
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	789a      	ldrb	r2, [r3, #2]
 80014ce:	7abb      	ldrb	r3, [r7, #10]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <readData+0x160>
		return STATUS_ERROR;
 80014d4:	2302      	movs	r3, #2
 80014d6:	e020      	b.n	800151a <readData+0x1a2>
	if (rxDB[4] != (lndB+7))							// Framelange auswerten
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	461a      	mov	r2, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	3307      	adds	r3, #7
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <readData+0x172>
		return STATUS_ERROR;
 80014e6:	2302      	movs	r3, #2
 80014e8:	e017      	b.n	800151a <readData+0x1a2>
	if (CRC8(pDB, lndB) != rxDB[4+lndB+1])				// Checksumme auswerten
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	4619      	mov	r1, r3
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f000 f8e2 	bl	80016b8 <CRC8>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4619      	mov	r1, r3
 80014f8:	797b      	ldrb	r3, [r7, #5]
 80014fa:	3305      	adds	r3, #5
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	4299      	cmp	r1, r3
 8001502:	d001      	beq.n	8001508 <readData+0x190>
		return STATUS_ERROR;
 8001504:	2302      	movs	r3, #2
 8001506:	e008      	b.n	800151a <readData+0x1a2>
	if (rxDB[4+lndB+2] != ENDBYTE)						// Endbyte auswerten
 8001508:	797b      	ldrb	r3, [r7, #5]
 800150a:	3306      	adds	r3, #6
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	2ba6      	cmp	r3, #166	; 0xa6
 8001512:	d001      	beq.n	8001518 <readData+0x1a0>
		return STATUS_ERROR;
 8001514:	2302      	movs	r3, #2
 8001516:	e000      	b.n	800151a <readData+0x1a2>

	return STATUS_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	46ad      	mov	sp, r5
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	2000029c 	.word	0x2000029c
 8001528:	08008268 	.word	0x08008268
 800152c:	08008274 	.word	0x08008274
 8001530:	08008280 	.word	0x08008280

08001534 <updateStellgrBlock>:


// --- Aktualisiert den gesamten Stellgroessen-Block (schreiben auf den Bus) ---
status updateStellgrBlock(localData* pLocalData){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	uint8_t tmp[4];

	convF32ToFixed((*pLocalData).thrust, tmp, 2, 1, 15);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001542:	f107 000c 	add.w	r0, r7, #12
 8001546:	230f      	movs	r3, #15
 8001548:	2201      	movs	r2, #1
 800154a:	2102      	movs	r1, #2
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	f000 f932 	bl	80017b8 <convF32ToFixed>
	convF32ToFixed((*pLocalData).rudder, &tmp[2], 2, 1, 15);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	1c98      	adds	r0, r3, #2
 8001560:	230f      	movs	r3, #15
 8001562:	2201      	movs	r2, #1
 8001564:	2102      	movs	r1, #2
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f000 f925 	bl	80017b8 <convF32ToFixed>

	return sendData(busaddr_thrust, tmp, 4); 					// busaddr_thrust ist die erste adresse des blocks
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2204      	movs	r2, #4
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 7090 	mov.w	r0, #288	; 0x120
 800157a:	f000 f805 	bl	8001588 <sendData>
 800157e:	4603      	mov	r3, r0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <sendData>:
	sendData(busaddr_esb, &(*pLocalData).esb, 1);
}


// --- Sendet Daten an den Bus ---
status sendData(busaddr addr, uint8_t* pDB, uint8_t n){
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	80fb      	strh	r3, [r7, #6]
 8001594:	4613      	mov	r3, r2
 8001596:	717b      	strb	r3, [r7, #5]
 8001598:	466b      	mov	r3, sp
 800159a:	461d      	mov	r5, r3
	// --- Sendebuffer erstellen ---
	uint8_t txDB[7+n];							// maximalen Speicher für txDatenbuffer (txDB) reservieren
 800159c:	797b      	ldrb	r3, [r7, #5]
 800159e:	1dd8      	adds	r0, r3, #7
 80015a0:	1e43      	subs	r3, r0, #1
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	f04f 0400 	mov.w	r4, #0
 80015b4:	00d4      	lsls	r4, r2, #3
 80015b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80015ba:	00cb      	lsls	r3, r1, #3
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	00d4      	lsls	r4, r2, #3
 80015ce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80015d2:	00cb      	lsls	r3, r1, #3
 80015d4:	4603      	mov	r3, r0
 80015d6:	3307      	adds	r3, #7
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	ebad 0d03 	sub.w	sp, sp, r3
 80015e0:	466b      	mov	r3, sp
 80015e2:	3300      	adds	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]

	// --- txDatenbuffer fuellen ---
	txDB[0] = STARTBYTE;						// Startbyte
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	22a5      	movs	r2, #165	; 0xa5
 80015ea:	701a      	strb	r2, [r3, #0]
	txDB[1] = SLAVEID;							// SlaveID
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	705a      	strb	r2, [r3, #1]
	txDB[3] = (WRITEDATA + addr) >> 8;			// Daten-schreiben-Command (0x8000) + Adresse (12bit) -->hoechsten 8 bit (4Bit-Command und hoechsten 4 Bit Adresse)
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015f8:	121b      	asrs	r3, r3, #8
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	70da      	strb	r2, [r3, #3]
	txDB[2] = (WRITEDATA + addr);				// Daten-schreiben-Command (0x8000) + Adresse (12bit) -->niedrigsten 8 bit (niedrigsten 8 Bit Adresse)
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	709a      	strb	r2, [r3, #2]
	txDB[4] = 7 + n;							// Framelaenge
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	3307      	adds	r3, #7
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	711a      	strb	r2, [r3, #4]

	for(uint8_t i=0; i<n; i++)	{				// die zu sendenden Datenbytes in txDatenbuffer schreiben
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	e00a      	b.n	800162e <sendData+0xa6>
		txDB[5+i] = pDB[i];
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	441a      	add	r2, r3
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	3305      	adds	r3, #5
 8001622:	7811      	ldrb	r1, [r2, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<n; i++)	{				// die zu sendenden Datenbytes in txDatenbuffer schreiben
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3301      	adds	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
 800162e:	7dfa      	ldrb	r2, [r7, #23]
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3f0      	bcc.n	8001618 <sendData+0x90>
	}

	txDB[5+n] = CRC8(&txDB[5], n);				// Checksumme von den Datenbytes erstellen: CRC(Daten, Anzahl Datenbytes)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1d5a      	adds	r2, r3, #5
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	1d5c      	adds	r4, r3, #5
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f000 f838 	bl	80016b8 <CRC8>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	551a      	strb	r2, [r3, r4]
	txDB[5+n+1] = ENDBYTE;						// Endbyte
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	3306      	adds	r3, #6
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	21a6      	movs	r1, #166	; 0xa6
 8001658:	54d1      	strb	r1, [r2, r3]

	// --- Datenbuffer ueber UART senden ---
	HAL_StatusTypeDef TxStatusResult = HAL_UART_Transmit(&handleUart, (uint8_t *)txDB, (5+n+1+1), TIMEOUT_TIME);
 800165a:	68f9      	ldr	r1, [r7, #12]
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3307      	adds	r3, #7
 8001662:	b29a      	uxth	r2, r3
 8001664:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <sendData+0x12c>)
 800166a:	f002 fa39 	bl	8003ae0 <HAL_UART_Transmit>
 800166e:	4603      	mov	r3, r0
 8001670:	72fb      	strb	r3, [r7, #11]
	if (TxStatusResult != HAL_OK)
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <sendData+0xf4>
		return STATUS_TX_ERROR;
 8001678:	2303      	movs	r3, #3
 800167a:	e016      	b.n	80016aa <sendData+0x122>

	// --- Empfangsbuffer erstellen ---
	uint8_t rxDB = 0;							// fuer das Empfangen der USV-Slave-Antwort
 800167c:	2300      	movs	r3, #0
 800167e:	727b      	strb	r3, [r7, #9]

	// --- Antwort des USV-Slave empfangen (ACK oder NACK) ---
	HAL_StatusTypeDef RxStatusResult = HAL_UART_Receive(&handleUart, &rxDB, sizeof(rxDB), TIMEOUT_TIME);
 8001680:	f107 0109 	add.w	r1, r7, #9
 8001684:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001688:	2201      	movs	r2, #1
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <sendData+0x12c>)
 800168c:	f002 fabe 	bl	8003c0c <HAL_UART_Receive>
 8001690:	4603      	mov	r3, r0
 8001692:	72bb      	strb	r3, [r7, #10]
	if (RxStatusResult != HAL_OK)
 8001694:	7abb      	ldrb	r3, [r7, #10]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <sendData+0x116>
		return STATUS_RX_ERROR;
 800169a:	2304      	movs	r3, #4
 800169c:	e005      	b.n	80016aa <sendData+0x122>

	// --- Antwort auswerten ---
	if (rxDB == ACK)							// ACK: Acknowledgement
 800169e:	7a7b      	ldrb	r3, [r7, #9]
 80016a0:	2ba1      	cmp	r3, #161	; 0xa1
 80016a2:	d101      	bne.n	80016a8 <sendData+0x120>
		return STATUS_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <sendData+0x122>

	return STATUS_ERROR;						// Wenn Antwort vom Slave: NACK (No Acknowledgement)
 80016a8:	2302      	movs	r3, #2
 80016aa:	46ad      	mov	sp, r5
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdb0      	pop	{r4, r5, r7, pc}
 80016b4:	2000029c 	.word	0x2000029c

080016b8 <CRC8>:


// --- Berechnet die CRC-8 Check-Summe ---
uint8_t CRC8(uint8_t* data, uint8_t size){
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
	  uint8_t i;
	  uint8_t polynom = 0xD5;
 80016c4:	23d5      	movs	r3, #213	; 0xd5
 80016c6:	737b      	strb	r3, [r7, #13]
	  uint8_t crc = 0x00;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]

	  while(size--){
 80016cc:	e01f      	b.n	800170e <CRC8+0x56>
	    crc = crc ^ *data++;					// crc-Byte mit Daten bitweises XOR (1^1=0, 0^0=0, 1^0=1, 0^1=1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	4053      	eors	r3, r2
 80016da:	73bb      	strb	r3, [r7, #14]

	    for(i=0; i<8; i++){
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e012      	b.n	8001708 <CRC8+0x50>
	      if (crc & 0x80)
 80016e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da08      	bge.n	80016fc <CRC8+0x44>
	        crc = (crc << 1) ^ polynom;
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	b25a      	sxtb	r2, r3
 80016f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016f4:	4053      	eors	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	73bb      	strb	r3, [r7, #14]
 80016fa:	e002      	b.n	8001702 <CRC8+0x4a>
	      else
	        crc = (crc << 1);
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	73bb      	strb	r3, [r7, #14]
	    for(i=0; i<8; i++){
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9e9      	bls.n	80016e2 <CRC8+0x2a>
	  while(size--){
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	70fa      	strb	r2, [r7, #3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1da      	bne.n	80016ce <CRC8+0x16>
	    }
	  }

	  return crc;
 8001718:	7bbb      	ldrb	r3, [r7, #14]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <convFixedToF32>:
typedef union unint32_t{
	int32_t val;
	uint8_t Bytes[4];
}unint32_t;

float convFixedToF32(uint8_t* bytes, uint8_t byteCount, uint8_t intBits, uint8_t fracBits){
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4603      	mov	r3, r0
 8001736:	70fb      	strb	r3, [r7, #3]
 8001738:	460b      	mov	r3, r1
 800173a:	70bb      	strb	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
	unint32_t fixed = {0}; // -> Achtung: somit max 4 bytes moeglich!
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]

	// Byte-Array zusammensetzen
	for(uint8_t i = 0; i < byteCount; i++){
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]
 8001748:	e00c      	b.n	8001764 <convFixedToF32+0x3e>
		fixed.Bytes[i] = bytes[i];
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	441a      	add	r2, r3
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	f107 0118 	add.w	r1, r7, #24
 8001758:	440b      	add	r3, r1
 800175a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < byteCount; i++){
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	3301      	adds	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	7dfa      	ldrb	r2, [r7, #23]
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3ee      	bcc.n	800174a <convFixedToF32+0x24>
	}

	// Konvertierung fixed -> f32
	float f32 = (float)fixed.val;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	edc7 7a04 	vstr	s15, [r7, #16]
	float divider = (float)(1 << (byteCount*8 - intBits));
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	00da      	lsls	r2, r3, #3
 800177e:	78bb      	ldrb	r3, [r7, #2]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001790:	edc7 7a03 	vstr	s15, [r7, #12]

	return f32 /= divider;
 8001794:	edd7 6a04 	vldr	s13, [r7, #16]
 8001798:	ed97 7a03 	vldr	s14, [r7, #12]
 800179c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a0:	edc7 7a04 	vstr	s15, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	ee07 3a90 	vmov	s15, r3
}
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <convF32ToFixed>:

void convF32ToFixed(float value, uint8_t* bytes, uint8_t byteCount, uint8_t intBits, uint8_t fracBits){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0a03 	vstr	s0, [r7, #12]
 80017c2:	60b8      	str	r0, [r7, #8]
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	460b      	mov	r3, r1
 80017d0:	71bb      	strb	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	717b      	strb	r3, [r7, #5]
	unint32_t fixed = {0};
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]

	if(value >= (1 << intBits)-1){ // >= groesster darstellbarer fixed Wert
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	2201      	movs	r2, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	db09      	blt.n	800180e <convF32ToFixed+0x56>
		fixed.val = (1 << (intBits + fracBits - 1))-1; // max Wert
 80017fa:	79ba      	ldrb	r2, [r7, #6]
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	4413      	add	r3, r2
 8001800:	3b01      	subs	r3, #1
 8001802:	2201      	movs	r2, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e037      	b.n	800187e <convF32ToFixed+0xc6>
	}
	else if(value <= -(1 << (intBits - 1))){ // >= kleinster darstellbarer fixed Wert
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	3b01      	subs	r3, #1
 8001812:	2201      	movs	r2, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	425b      	negs	r3, r3
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed97 7a03 	vldr	s14, [r7, #12]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d808      	bhi.n	8001842 <convF32ToFixed+0x8a>
		fixed.val = (1 << (intBits + fracBits - 1)); // min Wert
 8001830:	79ba      	ldrb	r2, [r7, #6]
 8001832:	797b      	ldrb	r3, [r7, #5]
 8001834:	4413      	add	r3, r2
 8001836:	3b01      	subs	r3, #1
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	e01d      	b.n	800187e <convF32ToFixed+0xc6>
	}
	else{ // Konvertierung f32 -> fixed
		fixed.val = round(value * (1 << fracBits));
 8001842:	797b      	ldrb	r3, [r7, #5]
 8001844:	2201      	movs	r2, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001852:	edd7 7a03 	vldr	s15, [r7, #12]
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe9b 	bl	8000598 <__aeabi_f2d>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	ec44 3b10 	vmov	d0, r3, r4
 800186a:	f005 f891 	bl	8006990 <round>
 800186e:	ec54 3b10 	vmov	r3, r4, d0
 8001872:	4618      	mov	r0, r3
 8001874:	4621      	mov	r1, r4
 8001876:	f7ff f997 	bl	8000ba8 <__aeabi_d2iz>
 800187a:	4603      	mov	r3, r0
 800187c:	613b      	str	r3, [r7, #16]
//	// Aufteilen in Byte-Array
//	for(uint8_t i = 0; i < byteCount; i++){
//		bytes[byteCount-1 - i] = (uint8_t) (fixed >> 8*i);
//	}

	for(uint8_t i = 0; i < byteCount; i++){
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	e00c      	b.n	800189e <convF32ToFixed+0xe6>
		bytes[i] = fixed.Bytes[i];
 8001884:	7dfa      	ldrb	r2, [r7, #23]
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	440b      	add	r3, r1
 800188c:	f107 0118 	add.w	r1, r7, #24
 8001890:	440a      	add	r2, r1
 8001892:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001896:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < byteCount; i++){
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	3301      	adds	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
 800189e:	7dfa      	ldrb	r2, [r7, #23]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3ee      	bcc.n	8001884 <convF32ToFixed+0xcc>
	}
}
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
	...

080018b0 <initDebug>:
#include <math.h>
#include <stdio.h>
#include <string.h>
#include "debug.h"

void initDebug(UART_HandleTypeDef handle){
 80018b0:	b084      	sub	sp, #16
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	f107 0c08 	add.w	ip, r7, #8
 80018ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	handleDebugUart = handle;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <initDebug+0x2c>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f107 0108 	add.w	r1, r7, #8
 80018c6:	238c      	movs	r3, #140	; 0x8c
 80018c8:	461a      	mov	r2, r3
 80018ca:	f002 ffc1 	bl	8004850 <memcpy>
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018d6:	b004      	add	sp, #16
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000210 	.word	0x20000210

080018e0 <sendFloatToUSB>:

void sendFloatToUSB(float fVal){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t str[32];
	int strLen = snprintf(str,32,"%f\r",fVal);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fe54 	bl	8000598 <__aeabi_f2d>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	f107 000c 	add.w	r0, r7, #12
 80018f8:	e9cd 3400 	strd	r3, r4, [sp]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <sendFloatToUSB+0x40>)
 80018fe:	2120      	movs	r1, #32
 8001900:	f003 fc16 	bl	8005130 <sniprintf>
 8001904:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&handleDebugUart, &str, strLen, 100);
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	b29a      	uxth	r2, r3
 800190a:	f107 010c 	add.w	r1, r7, #12
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <sendFloatToUSB+0x44>)
 8001912:	f002 f8e5 	bl	8003ae0 <HAL_UART_Transmit>
}
 8001916:	bf00      	nop
 8001918:	3734      	adds	r7, #52	; 0x34
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	0800828c 	.word	0x0800828c
 8001924:	20000210 	.word	0x20000210

08001928 <sendStrToUSB>:

void sendStrToUSB(char* str, uint8_t len){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&handleDebugUart, str, len, 100);
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <sendStrToUSB+0x24>)
 800193e:	f002 f8cf 	bl	8003ae0 <HAL_UART_Transmit>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000210 	.word	0x20000210

08001950 <main>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM6_Init(void);

int main(void){
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b0c6      	sub	sp, #280	; 0x118
 8001954:	af20      	add	r7, sp, #128	; 0x80
  HAL_Init();
 8001956:	f000 fbf8 	bl	800214a <HAL_Init>
  SystemClock_Config();
 800195a:	f000 f8c9 	bl	8001af0 <SystemClock_Config>
  //MX_GPIO_Init();
  MX_USART1_UART_Init(); 		// pins
 800195e:	f000 f957 	bl	8001c10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); 		// usb (ST-LINK)
 8001962:	f000 f9a5 	bl	8001cb0 <MX_USART2_UART_Init>
  MX_TIM6_Init();				// laeuft mit 1kHz
 8001966:	f000 f91b 	bl	8001ba0 <MX_TIM6_Init>
  initCom(hUARTPins);
 800196a:	4c5a      	ldr	r4, [pc, #360]	; (8001ad4 <main+0x184>)
 800196c:	4668      	mov	r0, sp
 800196e:	f104 0310 	add.w	r3, r4, #16
 8001972:	227c      	movs	r2, #124	; 0x7c
 8001974:	4619      	mov	r1, r3
 8001976:	f002 ff6b 	bl	8004850 <memcpy>
 800197a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800197e:	f7ff fc19 	bl	80011b4 <initCom>

  initDebug(hUARTUSB);
 8001982:	4c55      	ldr	r4, [pc, #340]	; (8001ad8 <main+0x188>)
 8001984:	4668      	mov	r0, sp
 8001986:	f104 0310 	add.w	r3, r4, #16
 800198a:	227c      	movs	r2, #124	; 0x7c
 800198c:	4619      	mov	r1, r3
 800198e:	f002 ff5f 	bl	8004850 <memcpy>
 8001992:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001996:	f7ff ff8b 	bl	80018b0 <initDebug>

  // --- Reglerparameter initialisieren ---
  // Geschwindigkeits-Regler
  controller pidVelocity = {
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <main+0x18c>)
 800199c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	6023      	str	r3, [r4, #0]
		  .ta = 1,
		  .y_max = 0.999,
		  .y_min = -1
  };
  // Peilungs-/Kurswinkel-Regler
  controller pidBearing = {
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <main+0x190>)
 80019b0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80019b4:	461d      	mov	r5, r3
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	6023      	str	r3, [r4, #0]
		  .y_max = 0.999,
		  .y_min = -1
  };

  // Deklaration Datenstruktur der lokalen Daten
  localData data = { 0 };
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 ff4c 	bl	8004866 <memset>

  uint32_t oldTimestamp = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  float setpointBearing = 0;
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  //uint16_t timer_val;
  //float ta = 1;
  HAL_TIM_Base_Start(&htim6);
 80019dc:	4841      	ldr	r0, [pc, #260]	; (8001ae4 <main+0x194>)
 80019de:	f001 febb 	bl	8003758 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim6,0);
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <main+0x194>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24


  // Hauptschleife
  while(1){
	  // Daten von Bus holen
	  status s = updateSensorBlock(&data);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fbf9 	bl	80011e4 <updateSensorBlock>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if(s != STATUS_OK){
 80019f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <main+0xba>
		  // TODO Fehlerbehandlung
		  sendStrToUSB("Error1\r", 7);
 8001a00:	2107      	movs	r1, #7
 8001a02:	4839      	ldr	r0, [pc, #228]	; (8001ae8 <main+0x198>)
 8001a04:	f7ff ff90 	bl	8001928 <sendStrToUSB>
 8001a08:	e00e      	b.n	8001a28 <main+0xd8>
	  }
	  else{
		  s = updateFuehrungsgrBlock(&data);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fc4c 	bl	80012aa <updateFuehrungsgrBlock>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  if(s != STATUS_OK){
 8001a18:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <main+0xd8>
		  // TODO Fehlerbehandlung
		  sendStrToUSB("Error2\r", 7);
 8001a20:	2107      	movs	r1, #7
 8001a22:	4832      	ldr	r0, [pc, #200]	; (8001aec <main+0x19c>)
 8001a24:	f7ff ff80 	bl	8001928 <sendStrToUSB>
		  }
	  }

	  if(oldTimestamp != data.timestamp){
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d041      	beq.n	8001ab6 <main+0x166>
		  //pidBearing.ta = ta;
		  //pidVelocity.ta = ta;
		  // ---------- ignorieren, nicht in Nutznung ----------

		  // Schub Stellgr. berechnen
		  data.thrust = pid_controll(&pidVelocity, data.targetSpeed, data.currGPSSpeed);
 8001a32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a36:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a3e:	eef0 0a47 	vmov.f32	s1, s14
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f982 	bl	8001d50 <pid_controll>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
 8001a50:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  if(data.thrust < 0) // TODO negative Geschwindigkeiten
 8001a54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d502      	bpl.n	8001a68 <main+0x118>
			  data.thrust = 0;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
		  // coord_t tp = calcTargetpoint(data.pointA, data.pointB, data.currPos);
		  //setpointBearing = calcBearing(data.currPos, tp);
		  // ---------- ignorieren, nicht in Nutznung ----------

		  // Sollwert Kurswinkel berechnen (ohne TP)
		  setpointBearing = calcBearing(data.currPos, data.pointB);
 8001a68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a70:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a78:	eeb0 1a46 	vmov.f32	s2, s12
 8001a7c:	eef0 1a66 	vmov.f32	s3, s13
 8001a80:	eeb0 0a47 	vmov.f32	s0, s14
 8001a84:	eef0 0a67 	vmov.f32	s1, s15
 8001a88:	f7ff fa86 	bl	8000f98 <calcBearing>
 8001a8c:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

		  // Rudder Stellgr. berechnen
		  data.rudder = pid_controll(&pidBearing, data.currHeadingAngle, setpointBearing);
 8001a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a98:	edd7 0a24 	vldr	s1, [r7, #144]	; 0x90
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f955 	bl	8001d50 <pid_controll>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		  // Stellgr. auf Bus schreiben
		  if(updateStellgrBlock(&data) != STATUS_OK){
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd3f 	bl	8001534 <updateStellgrBlock>
			  // TODO Fehlerbehandlung
		  }

	  }
	  oldTimestamp = data.timestamp;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	  // Warten bis 1 sek seit letztem ruecksetzen vergangen
	  while(__HAL_TIM_GET_COUNTER(&htim6) < 1000);
 8001abc:	bf00      	nop
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <main+0x194>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac8:	d3f9      	bcc.n	8001abe <main+0x16e>
	  // Timer ruecksetzen
	  __HAL_TIM_SET_COUNTER(&htim6,0);
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <main+0x194>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  while(1){
 8001ad2:	e78a      	b.n	80019ea <main+0x9a>
 8001ad4:	20000374 	.word	0x20000374
 8001ad8:	20000400 	.word	0x20000400
 8001adc:	080082a0 	.word	0x080082a0
 8001ae0:	080082c4 	.word	0x080082c4
 8001ae4:	20000328 	.word	0x20000328
 8001ae8:	08008290 	.word	0x08008290
 8001aec:	08008298 	.word	0x08008298

08001af0 <SystemClock_Config>:
//		  c = 0;
//	  }


void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0a4      	sub	sp, #144	; 0x90
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001afa:	2238      	movs	r2, #56	; 0x38
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 feb1 	bl	8004866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2244      	movs	r2, #68	; 0x44
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fea3 	bl	8004866 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b24:	f000 fde8 	bl	80026f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fe8e 	bl	8002860 <HAL_RCC_OscConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b4a:	f000 f8fd 	bl	8001d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4e:	230f      	movs	r3, #15
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 f990 	bl	8002e90 <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b76:	f000 f8e7 	bl	8001d48 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b82:	2304      	movs	r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fb9d 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001b94:	f000 f8d8 	bl	8001d48 <Error_Handler>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3790      	adds	r7, #144	; 0x90
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <MX_TIM6_Init+0x6c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2000-1;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bd4:	f001 fd68 	bl	80036a8 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bde:	f000 f8b3 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bf0:	f001 fea4 	bl	800393c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bfa:	f000 f8a5 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000328 	.word	0x20000328
 8001c0c:	40001000 	.word	0x40001000

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hUARTPins.Instance = USART1;
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <MX_USART1_UART_Init+0x98>)
 8001c18:	601a      	str	r2, [r3, #0]
  hUARTPins.Init.BaudRate = 250000;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_USART1_UART_Init+0x9c>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hUARTPins.Init.WordLength = UART_WORDLENGTH_9B;
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c26:	609a      	str	r2, [r3, #8]
  hUARTPins.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hUARTPins.Init.Parity = UART_PARITY_ODD;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c34:	611a      	str	r2, [r3, #16]
  hUARTPins.Init.Mode = UART_MODE_TX_RX;
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c38:	220c      	movs	r2, #12
 8001c3a:	615a      	str	r2, [r3, #20]
  hUARTPins.Init.HwFlowCtl = UART_HWCONTROL_NONE; // UART_HWCONTROL_RTS_CTS;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  hUARTPins.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hUARTPins.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hUARTPins.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hUARTPins.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hUARTPins) != HAL_OK)
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c5c:	f001 fef0 	bl	8003a40 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001c66:	f000 f86f 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hUARTPins, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c6e:	f002 fce0 	bl	8004632 <HAL_UARTEx_SetTxFifoThreshold>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001c78:	f000 f866 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hUARTPins, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c80:	f002 fd15 	bl	80046ae <HAL_UARTEx_SetRxFifoThreshold>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c8a:	f000 f85d 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hUARTPins) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USART1_UART_Init+0x94>)
 8001c90:	f002 fc96 	bl	80045c0 <HAL_UARTEx_DisableFifoMode>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c9a:	f000 f855 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000374 	.word	0x20000374
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	0003d090 	.word	0x0003d090

08001cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  hUARTUSB.Instance = USART2;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <MX_USART2_UART_Init+0x94>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hUARTUSB.Init.BaudRate = 115200;
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  hUARTUSB.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hUARTUSB.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hUARTUSB.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hUARTUSB.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  hUARTUSB.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  hUARTUSB.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  hUARTUSB.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hUARTUSB.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hUARTUSB.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hUARTUSB) != HAL_OK)
 8001cf8:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001cfa:	f001 fea1 	bl	8003a40 <HAL_UART_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d04:	f000 f820 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hUARTUSB, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001d0c:	f002 fc91 	bl	8004632 <HAL_UARTEx_SetTxFifoThreshold>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d16:	f000 f817 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hUARTUSB, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001d1e:	f002 fcc6 	bl	80046ae <HAL_UARTEx_SetRxFifoThreshold>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d28:	f000 f80e 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hUARTUSB) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_USART2_UART_Init+0x90>)
 8001d2e:	f002 fc47 	bl	80045c0 <HAL_UARTEx_DisableFifoMode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d38:	f000 f806 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000400 	.word	0x20000400
 8001d44:	40004400 	.word	0x40004400

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <Error_Handler+0x6>

08001d50 <pid_controll>:
// pid_controller.c

#include "pid_controller.h"
#include "debug.h"

float pid_controll(controller* ini, float w, float x){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d5c:	edc7 0a01 	vstr	s1, [r7, #4]
	// Regelabweichung = Soll - Ist
	float e = w - x;
 8001d60:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	edc7 7a08 	vstr	s15, [r7, #32]
	sendStrToUSB("e:", 3);
 8001d70:	2103      	movs	r1, #3
 8001d72:	4849      	ldr	r0, [pc, #292]	; (8001e98 <pid_controll+0x148>)
 8001d74:	f7ff fdd8 	bl	8001928 <sendStrToUSB>
	sendFloatToUSB(e);
 8001d78:	ed97 0a08 	vldr	s0, [r7, #32]
 8001d7c:	f7ff fdb0 	bl	80018e0 <sendFloatToUSB>

	// --- P-Term ---
	float Pout = (*ini).kp*e;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a07 	vstr	s15, [r7, #28]

	// --- I-Term ---
	(*ini).esum = (*ini).esum + e; // Integration
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d98:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edc3 7a04 	vstr	s15, [r3, #16]
	// Anti-WindUp-Massnahme
	if((*ini).esum < -((*ini).esum_limit)) // untere Begrenzung I-Anteil
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001db2:	eef1 7a67 	vneg.f32	s15, s15
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d508      	bpl.n	8001dd2 <pid_controll+0x82>
		(*ini).esum = -(*ini).esum_limit;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc6:	eef1 7a67 	vneg.f32	s15, s15
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	edc3 7a04 	vstr	s15, [r3, #16]
 8001dd0:	e00e      	b.n	8001df0 <pid_controll+0xa0>
	else if( (*ini).esum > (*ini).esum_limit) // obere Begrenzung I-Anteil
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	dd03      	ble.n	8001df0 <pid_controll+0xa0>
		(*ini).esum = (*ini).esum_limit;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	611a      	str	r2, [r3, #16]
	float Iout = (*ini).ki*(*ini).ta*(*ini).esum;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	edc7 7a06 	vstr	s15, [r7, #24]

	// --- D-Term ---
	float Dout = (*ini).kd*((e-(*ini).eold)/(*ini).ta);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e1a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e1e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e30:	edc7 7a05 	vstr	s15, [r7, #20]

	// --- Stellgr. ---
	float y = Pout + Iout + Dout;
 8001e34:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// Stellgr.-Begrenzung
	if(y < (*ini).y_min) y = (*ini).y_min; // untere
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	d503      	bpl.n	8001e68 <pid_controll+0x118>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e00c      	b.n	8001e82 <pid_controll+0x132>
	else if(y > (*ini).y_max) y = (*ini).y_max; // obere
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	dd02      	ble.n	8001e82 <pid_controll+0x132>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24

	// e sichern
	(*ini).eold = e;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	615a      	str	r2, [r3, #20]

	return y;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	ee07 3a90 	vmov	s15, r3
}
 8001e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	080082e8 	.word	0x080082e8

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6613      	str	r3, [r2, #96]	; 0x60
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ed2:	f000 fcb5 	bl	8002840 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_TIM_Base_MspInit+0x38>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10b      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40001000 	.word	0x40001000
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <HAL_UART_MspInit+0xdc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12a      	bne.n	8001f9c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f76:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f000 fa2d 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9a:	e02d      	b.n	8001ff8 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_UART_MspInit+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_UART_MspInit+0xe0>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f000 f9fe 	bl	80023f4 <HAL_GPIO_Init>
}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40013800 	.word	0x40013800
 8002004:	40021000 	.word	0x40021000
 8002008:	40004400 	.word	0x40004400

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f8ca 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f002 fbb4 	bl	80047fc <__errno>
 8002094:	4602      	mov	r2, r0
 8002096:	230c      	movs	r3, #12
 8002098:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20008000 	.word	0x20008000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	20000204 	.word	0x20000204
 80020c8:	20000498 	.word	0x20000498

080020cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <SystemInit+0x28>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <SystemInit+0x28>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SystemInit+0x28>)
 80020e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e6:	609a      	str	r2, [r3, #8]
#endif
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <LoopForever+0x6>)
  ldr r1, =_edata
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <LoopForever+0xe>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002114:	4c0b      	ldr	r4, [pc, #44]	; (8002144 <LoopForever+0x16>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002122:	f7ff ffd3 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002126:	f002 fb6f 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800212a:	f7ff fc11 	bl	8001950 <main>

0800212e <LoopForever>:

LoopForever:
    b LoopForever
 800212e:	e7fe      	b.n	800212e <LoopForever>
  ldr   r0, =_estack
 8002130:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800213c:	080087c8 	.word	0x080087c8
  ldr r2, =_sbss
 8002140:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002144:	20000494 	.word	0x20000494

08002148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC1_2_IRQHandler>

0800214a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f91b 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f80e 	bl	800217c <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	e001      	b.n	8002170 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800216c:	f7ff fe96 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002170:	79fb      	ldrb	r3, [r7, #7]

}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_InitTick+0x68>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d022      	beq.n	80021d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_InitTick+0x6c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_InitTick+0x68>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800219c:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f918 	bl	80023da <HAL_SYSTICK_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10f      	bne.n	80021d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	d809      	bhi.n	80021ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b6:	2200      	movs	r2, #0
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	f000 f8f2 	bl	80023a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_InitTick+0x70>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e007      	b.n	80021da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e004      	b.n	80021da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e001      	b.n	80021da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000010 	.word	0x20000010
 80021e8:	20000008 	.word	0x20000008
 80021ec:	2000000c 	.word	0x2000000c

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_IncTick+0x1c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_IncTick+0x20>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <HAL_IncTick+0x1c>)
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	2000048c 	.word	0x2000048c
 8002210:	20000010 	.word	0x20000010

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000048c 	.word	0x2000048c

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff47 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff5e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffb2 	bl	800234c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002402:	e15a      	b.n	80026ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 814c 	beq.w	80026b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d00b      	beq.n	800243c <HAL_GPIO_Init+0x48>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d007      	beq.n	800243c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002430:	2b11      	cmp	r3, #17
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d130      	bne.n	800249e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002472:	2201      	movs	r2, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0xea>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b12      	cmp	r3, #18
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	6939      	ldr	r1, [r7, #16]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80a6 	beq.w	80026b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_GPIO_Init+0x2e4>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256c:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_GPIO_Init+0x2e4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6613      	str	r3, [r2, #96]	; 0x60
 8002574:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <HAL_GPIO_Init+0x2e4>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002580:	4a56      	ldr	r2, [pc, #344]	; (80026dc <HAL_GPIO_Init+0x2e8>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025aa:	d01f      	beq.n	80025ec <HAL_GPIO_Init+0x1f8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <HAL_GPIO_Init+0x2ec>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d019      	beq.n	80025e8 <HAL_GPIO_Init+0x1f4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4b      	ldr	r2, [pc, #300]	; (80026e4 <HAL_GPIO_Init+0x2f0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_GPIO_Init+0x1f0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <HAL_GPIO_Init+0x2f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a49      	ldr	r2, [pc, #292]	; (80026ec <HAL_GPIO_Init+0x2f8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x1e8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a48      	ldr	r2, [pc, #288]	; (80026f0 <HAL_GPIO_Init+0x2fc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e00a      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025d8:	2306      	movs	r3, #6
 80025da:	e008      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025dc:	2304      	movs	r3, #4
 80025de:	e006      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e0:	2303      	movs	r3, #3
 80025e2:	e004      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025ec:	2300      	movs	r3, #0
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fe:	4937      	ldr	r1, [pc, #220]	; (80026dc <HAL_GPIO_Init+0x2e8>)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800260c:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_GPIO_Init+0x300>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002630:	4a30      	ldr	r2, [pc, #192]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800265a:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_GPIO_Init+0x300>)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_GPIO_Init+0x300>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_GPIO_Init+0x300>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ae:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_GPIO_Init+0x300>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f ae9d 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	48000400 	.word	0x48000400
 80026e4:	48000800 	.word	0x48000800
 80026e8:	48000c00 	.word	0x48000c00
 80026ec:	48001000 	.word	0x48001000
 80026f0:	48001400 	.word	0x48001400
 80026f4:	40010400 	.word	0x40010400

080026f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d141      	bne.n	800278a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d131      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800272c:	4a41      	ldr	r2, [pc, #260]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2232      	movs	r2, #50	; 0x32
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a3f      	ldr	r2, [pc, #252]	; (800283c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274a:	e002      	b.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b01      	subs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d102      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f2      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d158      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e057      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002788:	e04d      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002790:	d141      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d131      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2232      	movs	r2, #50	; 0x32
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d6:	e002      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3b01      	subs	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d102      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f2      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d112      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e011      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002814:	e007      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002824:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40007000 	.word	0x40007000
 8002838:	20000008 	.word	0x20000008
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284e:	6093      	str	r3, [r2, #8]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e308      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d075      	beq.n	800296a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287e:	4ba3      	ldr	r3, [pc, #652]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002888:	4ba0      	ldr	r3, [pc, #640]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d102      	bne.n	800289e <HAL_RCC_OscConfig+0x3e>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_OscConfig+0x44>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b99      	ldr	r3, [pc, #612]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <HAL_RCC_OscConfig+0x108>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d157      	bne.n	8002968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e2e3      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x74>
 80028c6:	4b91      	ldr	r3, [pc, #580]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a90      	ldr	r2, [pc, #576]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xb0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x98>
 80028de:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a87      	ldr	r2, [pc, #540]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xb0>
 80028f8:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a83      	ldr	r2, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff fc7c 	bl	8002214 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fc78 	bl	8002214 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e2a8      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xc0>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff fc68 	bl	8002214 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fc64 	bl	8002214 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e294      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0xe8>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002976:	4b65      	ldr	r3, [pc, #404]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x136>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d002      	beq.n	800299c <HAL_RCC_OscConfig+0x13c>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11f      	bne.n	80029dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x154>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e267      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	4952      	ldr	r1, [pc, #328]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029c8:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <HAL_RCC_OscConfig+0x2b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fbd5 	bl	800217c <HAL_InitTick>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d043      	beq.n	8002a60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e253      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff fc10 	bl	8002214 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff fc0c 	bl	8002214 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e23c      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	4939      	ldr	r1, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
 8002a2a:	e01a      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff fbec 	bl	8002214 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff fbe8 	bl	8002214 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e218      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1e0>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	4a23      	ldr	r2, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7ff fbc5 	bl	8002214 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fbc1 	bl	8002214 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1f1      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ef      	beq.n	8002a8e <HAL_RCC_OscConfig+0x22e>
 8002aae:	e01b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fba8 	bl	8002214 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fba4 	bl	8002214 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1d4      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ef      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80ab 	beq.w	8002c4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2b4>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e005      	b.n	8002b16 <HAL_RCC_OscConfig+0x2b6>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4baf      	ldr	r3, [pc, #700]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4aae      	ldr	r2, [pc, #696]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
 8002b26:	4bac      	ldr	r3, [pc, #688]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	4ba9      	ldr	r3, [pc, #676]	; (8002ddc <HAL_RCC_OscConfig+0x57c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b42:	4ba6      	ldr	r3, [pc, #664]	; (8002ddc <HAL_RCC_OscConfig+0x57c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4aa5      	ldr	r2, [pc, #660]	; (8002ddc <HAL_RCC_OscConfig+0x57c>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fb61 	bl	8002214 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7ff fb5d 	bl	8002214 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e18d      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b68:	4b9c      	ldr	r3, [pc, #624]	; (8002ddc <HAL_RCC_OscConfig+0x57c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d108      	bne.n	8002b8e <HAL_RCC_OscConfig+0x32e>
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a95      	ldr	r2, [pc, #596]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8c:	e024      	b.n	8002bd8 <HAL_RCC_OscConfig+0x378>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d110      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x358>
 8002b96:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4a8e      	ldr	r2, [pc, #568]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba6:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	4a8a      	ldr	r2, [pc, #552]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x378>
 8002bb8:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	4a86      	ldr	r2, [pc, #536]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc8:	4b83      	ldr	r3, [pc, #524]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	4a82      	ldr	r2, [pc, #520]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d016      	beq.n	8002c0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7ff fb18 	bl	8002214 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7ff fb14 	bl	8002214 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e142      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfe:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ed      	beq.n	8002be8 <HAL_RCC_OscConfig+0x388>
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fb01 	bl	8002214 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7ff fafd 	bl	8002214 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e12b      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ed      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	4a64      	ldr	r2, [pc, #400]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c60:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c66:	4a5c      	ldr	r2, [pc, #368]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff fad0 	bl	8002214 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c78:	f7ff facc 	bl	8002214 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0fc      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <HAL_RCC_OscConfig+0x418>
 8002c98:	e01b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7ff fab3 	bl	8002214 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb2:	f7ff faaf 	bl	8002214 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0df      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cc4:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ef      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80d3 	beq.w	8002e82 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cdc:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	f000 808d 	beq.w	8002e04 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d15a      	bne.n	8002da8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fa89 	bl	8002214 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7ff fa85 	bl	8002214 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0b5      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_OscConfig+0x580>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6a11      	ldr	r1, [r2, #32]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d34:	3a01      	subs	r2, #1
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d3e:	0212      	lsls	r2, r2, #8
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0552      	lsls	r2, r2, #21
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d52:	0852      	lsrs	r2, r2, #1
 8002d54:	3a01      	subs	r2, #1
 8002d56:	0652      	lsls	r2, r2, #25
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d5e:	06d2      	lsls	r2, r2, #27
 8002d60:	430a      	orrs	r2, r1
 8002d62:	491d      	ldr	r1, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff fa48 	bl	8002214 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff fa44 	bl	8002214 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e074      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x528>
 8002da6:	e06c      	b.n	8002e82 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fa20 	bl	8002214 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd6:	e00e      	b.n	8002df6 <HAL_RCC_OscConfig+0x596>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7ff fa16 	bl	8002214 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e046      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_OscConfig+0x62c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x584>
 8002e02:	e03e      	b.n	8002e82 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e039      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_OscConfig+0x62c>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d12c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d123      	bne.n	8002e7e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d11b      	bne.n	8002e7e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d113      	bne.n	8002e7e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e11e      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	498c      	ldr	r1, [pc, #560]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e106      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d073      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d129      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	4b81      	ldr	r3, [pc, #516]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0f4      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002efc:	f000 f99e 	bl	800323c <RCC_GetSysClockFreqFromPLLSource>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <HAL_RCC_ClockConfig+0x268>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d93f      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d033      	beq.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d12f      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f2a:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	4a70      	ldr	r2, [pc, #448]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e024      	b.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0c6      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0be      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f68:	f000 f8ce 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCC_ClockConfig+0x268>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d909      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f76:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f7e:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4957      	ldr	r1, [pc, #348]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f93a 	bl	8002214 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff f936 	bl	8002214 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e095      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b4e      	ldr	r3, [pc, #312]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d023      	beq.n	8003020 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800300a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4936      	ldr	r1, [pc, #216]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
 800301e:	e008      	b.n	8003032 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d105      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800302c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003030:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d21d      	bcs.n	800307c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	4929      	ldr	r1, [pc, #164]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003050:	f7ff f8e0 	bl	8002214 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7ff f8dc 	bl	8002214 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e03b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d1ed      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490f      	ldr	r1, [pc, #60]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ba:	f000 f825 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_RCC_ClockConfig+0x26c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	fa21 f303 	lsr.w	r3, r1, r3
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x270>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f84c 	bl	800217c <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	04c4b400 	.word	0x04c4b400
 80030fc:	080082fc 	.word	0x080082fc
 8003100:	20000008 	.word	0x20000008
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d102      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e047      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e03e      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d136      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d10c      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003166:	68d2      	ldr	r2, [r2, #12]
 8003168:	0a12      	lsrs	r2, r2, #8
 800316a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
      break;
 8003174:	e00c      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	0a12      	lsrs	r2, r2, #8
 8003184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
      break;
 800318e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e001      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031b0:	693b      	ldr	r3, [r7, #16]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000008 	.word	0x20000008

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031e8:	f7ff fff0 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80031ec:	4601      	mov	r1, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	0800830c 	.word	0x0800830c

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003214:	f7ff ffda 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8003218:	4601      	mov	r1, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0adb      	lsrs	r3, r3, #11
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	0800830c 	.word	0x0800830c

0800323c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d10c      	bne.n	800327a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800326a:	68d2      	ldr	r2, [r2, #12]
 800326c:	0a12      	lsrs	r2, r2, #8
 800326e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	617b      	str	r3, [r7, #20]
    break;
 8003278:	e00c      	b.n	8003294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	0a12      	lsrs	r2, r2, #8
 8003288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
    break;
 8003292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0e5b      	lsrs	r3, r3, #25
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	3301      	adds	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032ae:	687b      	ldr	r3, [r7, #4]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40021000 	.word	0x40021000
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	00f42400 	.word	0x00f42400

080032c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d0:	2300      	movs	r3, #0
 80032d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d4:	2300      	movs	r3, #0
 80032d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8098 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	4a3f      	ldr	r2, [pc, #252]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	; 0x58
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003312:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a39      	ldr	r2, [pc, #228]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800331e:	f7fe ff79 	bl	8002214 <HAL_GetTick>
 8003322:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003324:	e009      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fe ff75 	bl	8002214 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d902      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	74fb      	strb	r3, [r7, #19]
        break;
 8003338:	e005      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	4b30      	ldr	r3, [pc, #192]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ef      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d159      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01e      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	429a      	cmp	r2, r3
 8003366:	d019      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003368:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe ff35 	bl	8002214 <HAL_GetTick>
 80033aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ac:	e00b      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe ff31 	bl	8002214 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d902      	bls.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	74fb      	strb	r3, [r7, #19]
            break;
 80033c4:	e006      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ec      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033f0:	e008      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	74bb      	strb	r3, [r7, #18]
 80033f6:	e005      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003404:	7c7b      	ldrb	r3, [r7, #17]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4ba6      	ldr	r3, [pc, #664]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	4aa5      	ldr	r2, [pc, #660]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003422:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f023 0203 	bic.w	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	499c      	ldr	r1, [pc, #624]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003444:	4b97      	ldr	r3, [pc, #604]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f023 020c 	bic.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4994      	ldr	r1, [pc, #592]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003466:	4b8f      	ldr	r3, [pc, #572]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	498b      	ldr	r1, [pc, #556]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003488:	4b86      	ldr	r3, [pc, #536]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4983      	ldr	r1, [pc, #524]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034aa:	4b7e      	ldr	r3, [pc, #504]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	497a      	ldr	r1, [pc, #488]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034cc:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	4972      	ldr	r1, [pc, #456]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ee:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4969      	ldr	r1, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003510:	4b64      	ldr	r3, [pc, #400]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4961      	ldr	r1, [pc, #388]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	4958      	ldr	r1, [pc, #352]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	4950      	ldr	r1, [pc, #320]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4942      	ldr	r1, [pc, #264]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4934      	ldr	r1, [pc, #208]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a2e      	ldr	r2, [pc, #184]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	4926      	ldr	r1, [pc, #152]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361a:	d105      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003626:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	4918      	ldr	r1, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003652:	d105      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003698:	7cbb      	ldrb	r3, [r7, #18]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e049      	b.n	800374e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe fc08 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 f898 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e042      	b.n	80037f6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_TIM_Base_Start+0xac>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_TIM_Base_Start+0x5c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d013      	beq.n	80037b4 <HAL_TIM_Base_Start+0x5c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_TIM_Base_Start+0xb0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_TIM_Base_Start+0x5c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIM_Base_Start+0xb4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_TIM_Base_Start+0x5c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <HAL_TIM_Base_Start+0xb8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIM_Base_Start+0x5c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_TIM_Base_Start+0xbc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d115      	bne.n	80037e0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_TIM_Base_Start+0xc0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d015      	beq.n	80037f2 <HAL_TIM_Base_Start+0x9a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d011      	beq.n	80037f2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e008      	b.n	80037f2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	00010007 	.word	0x00010007

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3c      	ldr	r2, [pc, #240]	; (8003920 <TIM_Base_SetConfig+0x104>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a39      	ldr	r2, [pc, #228]	; (8003924 <TIM_Base_SetConfig+0x108>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a38      	ldr	r2, [pc, #224]	; (8003928 <TIM_Base_SetConfig+0x10c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a37      	ldr	r2, [pc, #220]	; (800392c <TIM_Base_SetConfig+0x110>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <TIM_Base_SetConfig+0x104>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d017      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <TIM_Base_SetConfig+0x108>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <TIM_Base_SetConfig+0x10c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <TIM_Base_SetConfig+0x110>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <TIM_Base_SetConfig+0x114>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <TIM_Base_SetConfig+0x118>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0x11c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <TIM_Base_SetConfig+0x104>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00f      	beq.n	8003904 <TIM_Base_SetConfig+0xe8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <TIM_Base_SetConfig+0x110>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00b      	beq.n	8003904 <TIM_Base_SetConfig+0xe8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_Base_SetConfig+0xe8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <TIM_Base_SetConfig+0x118>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_Base_SetConfig+0xe8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <TIM_Base_SetConfig+0x11c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d103      	bne.n	800390c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	615a      	str	r2, [r3, #20]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40013400 	.word	0x40013400
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003950:	2302      	movs	r3, #2
 8003952:	e065      	b.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800398e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d013      	beq.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10c      	bne.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40014000 	.word	0x40014000

08003a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e042      	b.n	8003ad8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe fa5d 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2224      	movs	r2, #36	; 0x24
 8003a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f98a 	bl	8003d9c <UART_SetConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fc26 	bl	80042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fcad 	bl	8004430 <UART_CheckIdleState>
 8003ad6:	4603      	mov	r3, r0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 8083 	bne.w	8003c02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Transmit+0x28>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e07b      	b.n	8003c04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Transmit+0x3a>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e074      	b.n	8003c04 <HAL_UART_Transmit+0x124>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fe fb6f 	bl	8002214 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d108      	bne.n	8003b64 <HAL_UART_Transmit+0x84>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003b74:	e02c      	b.n	8003bd0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fc9d 	bl	80044c0 <UART_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e039      	b.n	8003c04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e007      	b.n	8003bbe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cc      	bne.n	8003b76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fc6a 	bl	80044c0 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	f040 80b5 	bne.w	8003d92 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Receive+0x28>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0ad      	b.n	8003d94 <HAL_UART_Receive+0x188>
    }

    __HAL_LOCK(huart);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Receive+0x3a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0a6      	b.n	8003d94 <HAL_UART_Receive+0x188>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2222      	movs	r2, #34	; 0x22
 8003c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fad9 	bl	8002214 <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7c:	d10e      	bne.n	8003c9c <HAL_UART_Receive+0x90>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_UART_Receive+0x86>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c90:	e02d      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c9a:	e028      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_UART_Receive+0xb4>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <HAL_UART_Receive+0xaa>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	22ff      	movs	r2, #255	; 0xff
 8003cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cb4:	e01b      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	227f      	movs	r2, #127	; 0x7f
 8003cba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cbe:	e016      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_UART_Receive+0xda>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_UART_Receive+0xd0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	227f      	movs	r2, #127	; 0x7f
 8003cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cda:	e008      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	223f      	movs	r2, #63	; 0x3f
 8003ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ce4:	e003      	b.n	8003cee <HAL_UART_Receive+0xe2>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cf4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d108      	bne.n	8003d12 <HAL_UART_Receive+0x106>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e003      	b.n	8003d1a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d22:	e02a      	b.n	8003d7a <HAL_UART_Receive+0x16e>
    {
      if ((huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_UART_Receive+0x122>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e032      	b.n	8003d94 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	8a7b      	ldrh	r3, [r7, #18]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	3302      	adds	r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	e00c      	b.n	8003d68 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8a7b      	ldrh	r3, [r7, #18]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3301      	adds	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ce      	bne.n	8003d24 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e000      	b.n	8003d94 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003da0:	b088      	sub	sp, #32
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4bb0      	ldr	r3, [pc, #704]	; (8004094 <UART_SetConfig+0x2f8>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4aa5      	ldr	r2, [pc, #660]	; (8004098 <UART_SetConfig+0x2fc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	69f9      	ldr	r1, [r7, #28]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f023 010f 	bic.w	r1, r3, #15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a96      	ldr	r2, [pc, #600]	; (800409c <UART_SetConfig+0x300>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d121      	bne.n	8003e8c <UART_SetConfig+0xf0>
 8003e48:	4b95      	ldr	r3, [pc, #596]	; (80040a0 <UART_SetConfig+0x304>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d816      	bhi.n	8003e84 <UART_SetConfig+0xe8>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0xc0>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e79 	.word	0x08003e79
 8003e64:	08003e73 	.word	0x08003e73
 8003e68:	08003e7f 	.word	0x08003e7f
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e0be      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003e72:	2302      	movs	r3, #2
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e0bb      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e0b8      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e0b5      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003e84:	2310      	movs	r3, #16
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	bf00      	nop
 8003e8a:	e0b1      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a84      	ldr	r2, [pc, #528]	; (80040a4 <UART_SetConfig+0x308>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d134      	bne.n	8003f00 <UART_SetConfig+0x164>
 8003e96:	4b82      	ldr	r3, [pc, #520]	; (80040a0 <UART_SetConfig+0x304>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d829      	bhi.n	8003ef8 <UART_SetConfig+0x15c>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x110>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003ef9 	.word	0x08003ef9
 8003eb4:	08003ef9 	.word	0x08003ef9
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003ef9 	.word	0x08003ef9
 8003ec8:	08003ef9 	.word	0x08003ef9
 8003ecc:	08003ee7 	.word	0x08003ee7
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003ef9 	.word	0x08003ef9
 8003edc:	08003ef3 	.word	0x08003ef3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e084      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	76fb      	strb	r3, [r7, #27]
 8003eea:	e081      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003eec:	2304      	movs	r3, #4
 8003eee:	76fb      	strb	r3, [r7, #27]
 8003ef0:	e07e      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	76fb      	strb	r3, [r7, #27]
 8003ef6:	e07b      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	bf00      	nop
 8003efe:	e077      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a68      	ldr	r2, [pc, #416]	; (80040a8 <UART_SetConfig+0x30c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d120      	bne.n	8003f4c <UART_SetConfig+0x1b0>
 8003f0a:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <UART_SetConfig+0x304>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d00f      	beq.n	8003f38 <UART_SetConfig+0x19c>
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d802      	bhi.n	8003f22 <UART_SetConfig+0x186>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <UART_SetConfig+0x190>
 8003f20:	e010      	b.n	8003f44 <UART_SetConfig+0x1a8>
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d005      	beq.n	8003f32 <UART_SetConfig+0x196>
 8003f26:	2b30      	cmp	r3, #48	; 0x30
 8003f28:	d009      	beq.n	8003f3e <UART_SetConfig+0x1a2>
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x1a8>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e05e      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f32:	2302      	movs	r3, #2
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e05b      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e058      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e055      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f44:	2310      	movs	r3, #16
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	bf00      	nop
 8003f4a:	e051      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a56      	ldr	r2, [pc, #344]	; (80040ac <UART_SetConfig+0x310>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d120      	bne.n	8003f98 <UART_SetConfig+0x1fc>
 8003f56:	4b52      	ldr	r3, [pc, #328]	; (80040a0 <UART_SetConfig+0x304>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d00f      	beq.n	8003f84 <UART_SetConfig+0x1e8>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d802      	bhi.n	8003f6e <UART_SetConfig+0x1d2>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <UART_SetConfig+0x1dc>
 8003f6c:	e010      	b.n	8003f90 <UART_SetConfig+0x1f4>
 8003f6e:	2b80      	cmp	r3, #128	; 0x80
 8003f70:	d005      	beq.n	8003f7e <UART_SetConfig+0x1e2>
 8003f72:	2bc0      	cmp	r3, #192	; 0xc0
 8003f74:	d009      	beq.n	8003f8a <UART_SetConfig+0x1ee>
 8003f76:	e00b      	b.n	8003f90 <UART_SetConfig+0x1f4>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	76fb      	strb	r3, [r7, #27]
 8003f7c:	e038      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	76fb      	strb	r3, [r7, #27]
 8003f82:	e035      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f84:	2304      	movs	r3, #4
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	e032      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	76fb      	strb	r3, [r7, #27]
 8003f8e:	e02f      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f90:	2310      	movs	r3, #16
 8003f92:	76fb      	strb	r3, [r7, #27]
 8003f94:	bf00      	nop
 8003f96:	e02b      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3e      	ldr	r2, [pc, #248]	; (8004098 <UART_SetConfig+0x2fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d124      	bne.n	8003fec <UART_SetConfig+0x250>
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <UART_SetConfig+0x304>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d012      	beq.n	8003fd8 <UART_SetConfig+0x23c>
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d802      	bhi.n	8003fbe <UART_SetConfig+0x222>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <UART_SetConfig+0x230>
 8003fbc:	e012      	b.n	8003fe4 <UART_SetConfig+0x248>
 8003fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc2:	d006      	beq.n	8003fd2 <UART_SetConfig+0x236>
 8003fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc8:	d009      	beq.n	8003fde <UART_SetConfig+0x242>
 8003fca:	e00b      	b.n	8003fe4 <UART_SetConfig+0x248>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	76fb      	strb	r3, [r7, #27]
 8003fd0:	e00e      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	76fb      	strb	r3, [r7, #27]
 8003fd6:	e00b      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	76fb      	strb	r3, [r7, #27]
 8003fdc:	e008      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	76fb      	strb	r3, [r7, #27]
 8003fe2:	e005      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	76fb      	strb	r3, [r7, #27]
 8003fe8:	bf00      	nop
 8003fea:	e001      	b.n	8003ff0 <UART_SetConfig+0x254>
 8003fec:	2310      	movs	r3, #16
 8003fee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a28      	ldr	r2, [pc, #160]	; (8004098 <UART_SetConfig+0x2fc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f040 80a1 	bne.w	800413e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ffc:	7efb      	ldrb	r3, [r7, #27]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d823      	bhi.n	800404a <UART_SetConfig+0x2ae>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x26c>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	0800402d 	.word	0x0800402d
 800400c:	0800404b 	.word	0x0800404b
 8004010:	08004035 	.word	0x08004035
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800403b 	.word	0x0800403b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800404b 	.word	0x0800404b
 8004028:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7ff f8da 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8004030:	6178      	str	r0, [r7, #20]
        break;
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <UART_SetConfig+0x314>)
 8004036:	617b      	str	r3, [r7, #20]
        break;
 8004038:	e00c      	b.n	8004054 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7ff f865 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 800403e:	6178      	str	r0, [r7, #20]
        break;
 8004040:	e008      	b.n	8004054 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	617b      	str	r3, [r7, #20]
        break;
 8004048:	e004      	b.n	8004054 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	76bb      	strb	r3, [r7, #26]
        break;
 8004052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8130 	beq.w	80042bc <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <UART_SetConfig+0x318>)
 8004062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004066:	461a      	mov	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fbb3 f3f2 	udiv	r3, r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d305      	bcc.n	800408c <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d915      	bls.n	80040b8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	76bb      	strb	r3, [r7, #26]
 8004090:	e114      	b.n	80042bc <UART_SetConfig+0x520>
 8004092:	bf00      	nop
 8004094:	cfff69f3 	.word	0xcfff69f3
 8004098:	40008000 	.word	0x40008000
 800409c:	40013800 	.word	0x40013800
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40004400 	.word	0x40004400
 80040a8:	40004800 	.word	0x40004800
 80040ac:	40004c00 	.word	0x40004c00
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	08008314 	.word	0x08008314
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	4a87      	ldr	r2, [pc, #540]	; (80042e4 <UART_SetConfig+0x548>)
 80040c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4623      	mov	r3, r4
 80040d4:	f7fc fde0 	bl	8000c98 <__aeabi_uldivmod>
 80040d8:	4603      	mov	r3, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	4619      	mov	r1, r3
 80040de:	4622      	mov	r2, r4
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	0214      	lsls	r4, r2, #8
 80040ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040ee:	020b      	lsls	r3, r1, #8
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6852      	ldr	r2, [r2, #4]
 80040f4:	0852      	lsrs	r2, r2, #1
 80040f6:	4611      	mov	r1, r2
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	eb13 0b01 	adds.w	fp, r3, r1
 8004100:	eb44 0c02 	adc.w	ip, r4, r2
 8004104:	4658      	mov	r0, fp
 8004106:	4661      	mov	r1, ip
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f04f 0400 	mov.w	r4, #0
 8004110:	461a      	mov	r2, r3
 8004112:	4623      	mov	r3, r4
 8004114:	f7fc fdc0 	bl	8000c98 <__aeabi_uldivmod>
 8004118:	4603      	mov	r3, r0
 800411a:	460c      	mov	r4, r1
 800411c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004124:	d308      	bcc.n	8004138 <UART_SetConfig+0x39c>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412c:	d204      	bcs.n	8004138 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	e0c1      	b.n	80042bc <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	76bb      	strb	r3, [r7, #26]
 800413c:	e0be      	b.n	80042bc <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004146:	d164      	bne.n	8004212 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8004148:	7efb      	ldrb	r3, [r7, #27]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x402>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x3b8>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7ff f834 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 800417c:	6178      	str	r0, [r7, #20]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7ff f846 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004184:	6178      	str	r0, [r7, #20]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <UART_SetConfig+0x54c>)
 800418a:	617b      	str	r3, [r7, #20]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe ffbb 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8004192:	6178      	str	r0, [r7, #20]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	617b      	str	r3, [r7, #20]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	76bb      	strb	r3, [r7, #26]
        break;
 80041a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8086 	beq.w	80042bc <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	4a4b      	ldr	r2, [pc, #300]	; (80042e4 <UART_SetConfig+0x548>)
 80041b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ba:	461a      	mov	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c2:	005a      	lsls	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	441a      	add	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	d916      	bls.n	800420c <UART_SetConfig+0x470>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d212      	bcs.n	800420c <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f023 030f 	bic.w	r3, r3, #15
 80041ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	4313      	orrs	r3, r2
 8004200:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	89fa      	ldrh	r2, [r7, #14]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	e057      	b.n	80042bc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	76bb      	strb	r3, [r7, #26]
 8004210:	e054      	b.n	80042bc <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004212:	7efb      	ldrb	r3, [r7, #27]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d828      	bhi.n	800426a <UART_SetConfig+0x4ce>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x484>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe ffce 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8004248:	6178      	str	r0, [r7, #20]
        break;
 800424a:	e013      	b.n	8004274 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe ffe0 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004250:	6178      	str	r0, [r7, #20]
        break;
 8004252:	e00f      	b.n	8004274 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <UART_SetConfig+0x54c>)
 8004256:	617b      	str	r3, [r7, #20]
        break;
 8004258:	e00c      	b.n	8004274 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe ff55 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 800425e:	6178      	str	r0, [r7, #20]
        break;
 8004260:	e008      	b.n	8004274 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	617b      	str	r3, [r7, #20]
        break;
 8004268:	e004      	b.n	8004274 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	76bb      	strb	r3, [r7, #26]
        break;
 8004272:	bf00      	nop
    }

    if (pclk != 0U)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d020      	beq.n	80042bc <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <UART_SetConfig+0x548>)
 8004280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004284:	461a      	mov	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	fbb3 f2f2 	udiv	r2, r3, r2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	441a      	add	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d908      	bls.n	80042b8 <UART_SetConfig+0x51c>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d204      	bcs.n	80042b8 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e001      	b.n	80042bc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80042d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80042e4:	08008314 	.word	0x08008314
 80042e8:	00f42400 	.word	0x00f42400

080042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01a      	beq.n	8004402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ea:	d10a      	bne.n	8004402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004440:	f7fd fee8 	bl	8002214 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10e      	bne.n	8004472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f82c 	bl	80044c0 <UART_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e022      	b.n	80044b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d10e      	bne.n	800449e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f816 	bl	80044c0 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00c      	b.n	80044b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d0:	e062      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d05e      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fd fe9b 	bl	8002214 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11d      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e045      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02e      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d126      	bne.n	8004598 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004552:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004562:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d08d      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e027      	b.n	8004626 <HAL_UARTEx_DisableFifoMode+0x66>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2224      	movs	r2, #36	; 0x24
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004646:	2302      	movs	r3, #2
 8004648:	e02d      	b.n	80046a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2224      	movs	r2, #36	; 0x24
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f850 	bl	800472c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e02d      	b.n	8004722 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2224      	movs	r2, #36	; 0x24
 80046d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f812 	bl	800472c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004734:	4a2f      	ldr	r2, [pc, #188]	; (80047f4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004736:	f107 0314 	add.w	r3, r7, #20
 800473a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800473e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800474c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004754:	2b00      	cmp	r3, #0
 8004756:	d108      	bne.n	800476a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004768:	e03d      	b.n	80047e6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800476e:	2308      	movs	r3, #8
 8004770:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	0e5b      	lsrs	r3, r3, #25
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	0f5b      	lsrs	r3, r3, #29
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004792:	7fbb      	ldrb	r3, [r7, #30]
 8004794:	7f3a      	ldrb	r2, [r7, #28]
 8004796:	f107 0120 	add.w	r1, r7, #32
 800479a:	440a      	add	r2, r1
 800479c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047a4:	7f3a      	ldrb	r2, [r7, #28]
 80047a6:	f107 0120 	add.w	r1, r7, #32
 80047aa:	440a      	add	r2, r1
 80047ac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
 80047be:	7f7a      	ldrb	r2, [r7, #29]
 80047c0:	f107 0120 	add.w	r1, r7, #32
 80047c4:	440a      	add	r2, r1
 80047c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047ce:	7f7a      	ldrb	r2, [r7, #29]
 80047d0:	f107 0120 	add.w	r1, r7, #32
 80047d4:	440a      	add	r2, r1
 80047d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047da:	fb93 f3f2 	sdiv	r3, r3, r2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047e6:	bf00      	nop
 80047e8:	3724      	adds	r7, #36	; 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	080082ec 	.word	0x080082ec
 80047f8:	080082f4 	.word	0x080082f4

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000014 	.word	0x20000014

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0d      	ldr	r6, [pc, #52]	; (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 800480e:	1ba4      	subs	r4, r4, r6
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2500      	movs	r5, #0
 8004814:	42a5      	cmp	r5, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4e0b      	ldr	r6, [pc, #44]	; (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <__libc_init_array+0x44>)
 800481c:	f003 fd16 	bl	800824c <_init>
 8004820:	1ba4      	subs	r4, r4, r6
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2500      	movs	r5, #0
 8004826:	42a5      	cmp	r5, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004830:	4798      	blx	r3
 8004832:	3501      	adds	r5, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800483a:	4798      	blx	r3
 800483c:	3501      	adds	r5, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	080087c0 	.word	0x080087c0
 8004844:	080087c0 	.word	0x080087c0
 8004848:	080087c0 	.word	0x080087c0
 800484c:	080087c4 	.word	0x080087c4

08004850 <memcpy>:
 8004850:	b510      	push	{r4, lr}
 8004852:	1e43      	subs	r3, r0, #1
 8004854:	440a      	add	r2, r1
 8004856:	4291      	cmp	r1, r2
 8004858:	d100      	bne.n	800485c <memcpy+0xc>
 800485a:	bd10      	pop	{r4, pc}
 800485c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004864:	e7f7      	b.n	8004856 <memcpy+0x6>

08004866 <memset>:
 8004866:	4402      	add	r2, r0
 8004868:	4603      	mov	r3, r0
 800486a:	4293      	cmp	r3, r2
 800486c:	d100      	bne.n	8004870 <memset+0xa>
 800486e:	4770      	bx	lr
 8004870:	f803 1b01 	strb.w	r1, [r3], #1
 8004874:	e7f9      	b.n	800486a <memset+0x4>

08004876 <__cvt>:
 8004876:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800487a:	ec55 4b10 	vmov	r4, r5, d0
 800487e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004880:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004884:	2d00      	cmp	r5, #0
 8004886:	460e      	mov	r6, r1
 8004888:	4691      	mov	r9, r2
 800488a:	4619      	mov	r1, r3
 800488c:	bfb8      	it	lt
 800488e:	4622      	movlt	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	f027 0720 	bic.w	r7, r7, #32
 8004896:	bfbb      	ittet	lt
 8004898:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800489c:	461d      	movlt	r5, r3
 800489e:	2300      	movge	r3, #0
 80048a0:	232d      	movlt	r3, #45	; 0x2d
 80048a2:	bfb8      	it	lt
 80048a4:	4614      	movlt	r4, r2
 80048a6:	2f46      	cmp	r7, #70	; 0x46
 80048a8:	700b      	strb	r3, [r1, #0]
 80048aa:	d004      	beq.n	80048b6 <__cvt+0x40>
 80048ac:	2f45      	cmp	r7, #69	; 0x45
 80048ae:	d100      	bne.n	80048b2 <__cvt+0x3c>
 80048b0:	3601      	adds	r6, #1
 80048b2:	2102      	movs	r1, #2
 80048b4:	e000      	b.n	80048b8 <__cvt+0x42>
 80048b6:	2103      	movs	r1, #3
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	ab02      	add	r3, sp, #8
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4632      	mov	r2, r6
 80048c2:	4653      	mov	r3, sl
 80048c4:	ec45 4b10 	vmov	d0, r4, r5
 80048c8:	f000 fcf2 	bl	80052b0 <_dtoa_r>
 80048cc:	2f47      	cmp	r7, #71	; 0x47
 80048ce:	4680      	mov	r8, r0
 80048d0:	d102      	bne.n	80048d8 <__cvt+0x62>
 80048d2:	f019 0f01 	tst.w	r9, #1
 80048d6:	d026      	beq.n	8004926 <__cvt+0xb0>
 80048d8:	2f46      	cmp	r7, #70	; 0x46
 80048da:	eb08 0906 	add.w	r9, r8, r6
 80048de:	d111      	bne.n	8004904 <__cvt+0x8e>
 80048e0:	f898 3000 	ldrb.w	r3, [r8]
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d10a      	bne.n	80048fe <__cvt+0x88>
 80048e8:	2200      	movs	r2, #0
 80048ea:	2300      	movs	r3, #0
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fc f912 	bl	8000b18 <__aeabi_dcmpeq>
 80048f4:	b918      	cbnz	r0, 80048fe <__cvt+0x88>
 80048f6:	f1c6 0601 	rsb	r6, r6, #1
 80048fa:	f8ca 6000 	str.w	r6, [sl]
 80048fe:	f8da 3000 	ldr.w	r3, [sl]
 8004902:	4499      	add	r9, r3
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fc f904 	bl	8000b18 <__aeabi_dcmpeq>
 8004910:	b938      	cbnz	r0, 8004922 <__cvt+0xac>
 8004912:	2230      	movs	r2, #48	; 0x30
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	454b      	cmp	r3, r9
 8004918:	d205      	bcs.n	8004926 <__cvt+0xb0>
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e7f8      	b.n	8004914 <__cvt+0x9e>
 8004922:	f8cd 900c 	str.w	r9, [sp, #12]
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800492a:	eba3 0308 	sub.w	r3, r3, r8
 800492e:	4640      	mov	r0, r8
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	b004      	add	sp, #16
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004938 <__exponent>:
 8004938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493a:	2900      	cmp	r1, #0
 800493c:	4604      	mov	r4, r0
 800493e:	bfba      	itte	lt
 8004940:	4249      	neglt	r1, r1
 8004942:	232d      	movlt	r3, #45	; 0x2d
 8004944:	232b      	movge	r3, #43	; 0x2b
 8004946:	2909      	cmp	r1, #9
 8004948:	f804 2b02 	strb.w	r2, [r4], #2
 800494c:	7043      	strb	r3, [r0, #1]
 800494e:	dd20      	ble.n	8004992 <__exponent+0x5a>
 8004950:	f10d 0307 	add.w	r3, sp, #7
 8004954:	461f      	mov	r7, r3
 8004956:	260a      	movs	r6, #10
 8004958:	fb91 f5f6 	sdiv	r5, r1, r6
 800495c:	fb06 1115 	mls	r1, r6, r5, r1
 8004960:	3130      	adds	r1, #48	; 0x30
 8004962:	2d09      	cmp	r5, #9
 8004964:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004968:	f103 32ff 	add.w	r2, r3, #4294967295
 800496c:	4629      	mov	r1, r5
 800496e:	dc09      	bgt.n	8004984 <__exponent+0x4c>
 8004970:	3130      	adds	r1, #48	; 0x30
 8004972:	3b02      	subs	r3, #2
 8004974:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004978:	42bb      	cmp	r3, r7
 800497a:	4622      	mov	r2, r4
 800497c:	d304      	bcc.n	8004988 <__exponent+0x50>
 800497e:	1a10      	subs	r0, r2, r0
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004984:	4613      	mov	r3, r2
 8004986:	e7e7      	b.n	8004958 <__exponent+0x20>
 8004988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800498c:	f804 2b01 	strb.w	r2, [r4], #1
 8004990:	e7f2      	b.n	8004978 <__exponent+0x40>
 8004992:	2330      	movs	r3, #48	; 0x30
 8004994:	4419      	add	r1, r3
 8004996:	7083      	strb	r3, [r0, #2]
 8004998:	1d02      	adds	r2, r0, #4
 800499a:	70c1      	strb	r1, [r0, #3]
 800499c:	e7ef      	b.n	800497e <__exponent+0x46>
	...

080049a0 <_printf_float>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b08d      	sub	sp, #52	; 0x34
 80049a6:	460c      	mov	r4, r1
 80049a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80049ac:	4616      	mov	r6, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	4605      	mov	r5, r0
 80049b2:	f001 fa35 	bl	8005e20 <_localeconv_r>
 80049b6:	6803      	ldr	r3, [r0, #0]
 80049b8:	9304      	str	r3, [sp, #16]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fc30 	bl	8000220 <strlen>
 80049c0:	2300      	movs	r3, #0
 80049c2:	930a      	str	r3, [sp, #40]	; 0x28
 80049c4:	f8d8 3000 	ldr.w	r3, [r8]
 80049c8:	9005      	str	r0, [sp, #20]
 80049ca:	3307      	adds	r3, #7
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	f103 0208 	add.w	r2, r3, #8
 80049d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049d8:	f8d4 b000 	ldr.w	fp, [r4]
 80049dc:	f8c8 2000 	str.w	r2, [r8]
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049f0:	9307      	str	r3, [sp, #28]
 80049f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	4ba7      	ldr	r3, [pc, #668]	; (8004c98 <_printf_float+0x2f8>)
 80049fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a00:	f7fc f8bc 	bl	8000b7c <__aeabi_dcmpun>
 8004a04:	bb70      	cbnz	r0, 8004a64 <_printf_float+0xc4>
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	4ba3      	ldr	r3, [pc, #652]	; (8004c98 <_printf_float+0x2f8>)
 8004a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a10:	f7fc f896 	bl	8000b40 <__aeabi_dcmple>
 8004a14:	bb30      	cbnz	r0, 8004a64 <_printf_float+0xc4>
 8004a16:	2200      	movs	r2, #0
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f7fc f885 	bl	8000b2c <__aeabi_dcmplt>
 8004a22:	b110      	cbz	r0, 8004a2a <_printf_float+0x8a>
 8004a24:	232d      	movs	r3, #45	; 0x2d
 8004a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2a:	4a9c      	ldr	r2, [pc, #624]	; (8004c9c <_printf_float+0x2fc>)
 8004a2c:	4b9c      	ldr	r3, [pc, #624]	; (8004ca0 <_printf_float+0x300>)
 8004a2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a32:	bf8c      	ite	hi
 8004a34:	4690      	movhi	r8, r2
 8004a36:	4698      	movls	r8, r3
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f02b 0204 	bic.w	r2, fp, #4
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	f04f 0900 	mov.w	r9, #0
 8004a46:	9700      	str	r7, [sp, #0]
 8004a48:	4633      	mov	r3, r6
 8004a4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f9e6 	bl	8004e20 <_printf_common>
 8004a54:	3001      	adds	r0, #1
 8004a56:	f040 808d 	bne.w	8004b74 <_printf_float+0x1d4>
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	b00d      	add	sp, #52	; 0x34
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a64:	4642      	mov	r2, r8
 8004a66:	464b      	mov	r3, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fc f886 	bl	8000b7c <__aeabi_dcmpun>
 8004a70:	b110      	cbz	r0, 8004a78 <_printf_float+0xd8>
 8004a72:	4a8c      	ldr	r2, [pc, #560]	; (8004ca4 <_printf_float+0x304>)
 8004a74:	4b8c      	ldr	r3, [pc, #560]	; (8004ca8 <_printf_float+0x308>)
 8004a76:	e7da      	b.n	8004a2e <_printf_float+0x8e>
 8004a78:	6861      	ldr	r1, [r4, #4]
 8004a7a:	1c4b      	adds	r3, r1, #1
 8004a7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004a80:	a80a      	add	r0, sp, #40	; 0x28
 8004a82:	d13e      	bne.n	8004b02 <_printf_float+0x162>
 8004a84:	2306      	movs	r3, #6
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004a8e:	ab09      	add	r3, sp, #36	; 0x24
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	ec49 8b10 	vmov	d0, r8, r9
 8004a96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a9a:	6022      	str	r2, [r4, #0]
 8004a9c:	f8cd a004 	str.w	sl, [sp, #4]
 8004aa0:	6861      	ldr	r1, [r4, #4]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff fee7 	bl	8004876 <__cvt>
 8004aa8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004aac:	2b47      	cmp	r3, #71	; 0x47
 8004aae:	4680      	mov	r8, r0
 8004ab0:	d109      	bne.n	8004ac6 <_printf_float+0x126>
 8004ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab4:	1cd8      	adds	r0, r3, #3
 8004ab6:	db02      	blt.n	8004abe <_printf_float+0x11e>
 8004ab8:	6862      	ldr	r2, [r4, #4]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	dd47      	ble.n	8004b4e <_printf_float+0x1ae>
 8004abe:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ac2:	fa5f fa8a 	uxtb.w	sl, sl
 8004ac6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004acc:	d824      	bhi.n	8004b18 <_printf_float+0x178>
 8004ace:	3901      	subs	r1, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ad6:	9109      	str	r1, [sp, #36]	; 0x24
 8004ad8:	f7ff ff2e 	bl	8004938 <__exponent>
 8004adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ade:	1813      	adds	r3, r2, r0
 8004ae0:	2a01      	cmp	r2, #1
 8004ae2:	4681      	mov	r9, r0
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	dc02      	bgt.n	8004aee <_printf_float+0x14e>
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	07d1      	lsls	r1, r2, #31
 8004aec:	d501      	bpl.n	8004af2 <_printf_float+0x152>
 8004aee:	3301      	adds	r3, #1
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0a5      	beq.n	8004a46 <_printf_float+0xa6>
 8004afa:	232d      	movs	r3, #45	; 0x2d
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	e7a1      	b.n	8004a46 <_printf_float+0xa6>
 8004b02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004b06:	f000 8177 	beq.w	8004df8 <_printf_float+0x458>
 8004b0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b0e:	d1bb      	bne.n	8004a88 <_printf_float+0xe8>
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d1b9      	bne.n	8004a88 <_printf_float+0xe8>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e7b6      	b.n	8004a86 <_printf_float+0xe6>
 8004b18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004b1c:	d119      	bne.n	8004b52 <_printf_float+0x1b2>
 8004b1e:	2900      	cmp	r1, #0
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	dd0c      	ble.n	8004b3e <_printf_float+0x19e>
 8004b24:	6121      	str	r1, [r4, #16]
 8004b26:	b913      	cbnz	r3, 8004b2e <_printf_float+0x18e>
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	07d2      	lsls	r2, r2, #31
 8004b2c:	d502      	bpl.n	8004b34 <_printf_float+0x194>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	440b      	add	r3, r1
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b36:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b38:	f04f 0900 	mov.w	r9, #0
 8004b3c:	e7d9      	b.n	8004af2 <_printf_float+0x152>
 8004b3e:	b913      	cbnz	r3, 8004b46 <_printf_float+0x1a6>
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	07d0      	lsls	r0, r2, #31
 8004b44:	d501      	bpl.n	8004b4a <_printf_float+0x1aa>
 8004b46:	3302      	adds	r3, #2
 8004b48:	e7f3      	b.n	8004b32 <_printf_float+0x192>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e7f1      	b.n	8004b32 <_printf_float+0x192>
 8004b4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004b52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b56:	4293      	cmp	r3, r2
 8004b58:	db05      	blt.n	8004b66 <_printf_float+0x1c6>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	07d1      	lsls	r1, r2, #31
 8004b60:	d5e8      	bpl.n	8004b34 <_printf_float+0x194>
 8004b62:	3301      	adds	r3, #1
 8004b64:	e7e5      	b.n	8004b32 <_printf_float+0x192>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfd4      	ite	le
 8004b6a:	f1c3 0302 	rsble	r3, r3, #2
 8004b6e:	2301      	movgt	r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	e7de      	b.n	8004b32 <_printf_float+0x192>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	055a      	lsls	r2, r3, #21
 8004b78:	d407      	bmi.n	8004b8a <_printf_float+0x1ea>
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	d12b      	bne.n	8004be0 <_printf_float+0x240>
 8004b88:	e767      	b.n	8004a5a <_printf_float+0xba>
 8004b8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b8e:	f240 80dc 	bls.w	8004d4a <_printf_float+0x3aa>
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b9a:	f7fb ffbd 	bl	8000b18 <__aeabi_dcmpeq>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d033      	beq.n	8004c0a <_printf_float+0x26a>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4a41      	ldr	r2, [pc, #260]	; (8004cac <_printf_float+0x30c>)
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f af54 	beq.w	8004a5a <_printf_float+0xba>
 8004bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	db02      	blt.n	8004bc0 <_printf_float+0x220>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	07d8      	lsls	r0, r3, #31
 8004bbe:	d50f      	bpl.n	8004be0 <_printf_float+0x240>
 8004bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f43f af45 	beq.w	8004a5a <_printf_float+0xba>
 8004bd0:	f04f 0800 	mov.w	r8, #0
 8004bd4:	f104 091a 	add.w	r9, r4, #26
 8004bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	4543      	cmp	r3, r8
 8004bde:	dc09      	bgt.n	8004bf4 <_printf_float+0x254>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	079b      	lsls	r3, r3, #30
 8004be4:	f100 8103 	bmi.w	8004dee <_printf_float+0x44e>
 8004be8:	68e0      	ldr	r0, [r4, #12]
 8004bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bec:	4298      	cmp	r0, r3
 8004bee:	bfb8      	it	lt
 8004bf0:	4618      	movlt	r0, r3
 8004bf2:	e734      	b.n	8004a5e <_printf_float+0xbe>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	464a      	mov	r2, r9
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f43f af2b 	beq.w	8004a5a <_printf_float+0xba>
 8004c04:	f108 0801 	add.w	r8, r8, #1
 8004c08:	e7e6      	b.n	8004bd8 <_printf_float+0x238>
 8004c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dc2b      	bgt.n	8004c68 <_printf_float+0x2c8>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4a26      	ldr	r2, [pc, #152]	; (8004cac <_printf_float+0x30c>)
 8004c14:	4631      	mov	r1, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	47b8      	blx	r7
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	f43f af1d 	beq.w	8004a5a <_printf_float+0xba>
 8004c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c22:	b923      	cbnz	r3, 8004c2e <_printf_float+0x28e>
 8004c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c26:	b913      	cbnz	r3, 8004c2e <_printf_float+0x28e>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	07d9      	lsls	r1, r3, #31
 8004c2c:	d5d8      	bpl.n	8004be0 <_printf_float+0x240>
 8004c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f af0e 	beq.w	8004a5a <_printf_float+0xba>
 8004c3e:	f04f 0900 	mov.w	r9, #0
 8004c42:	f104 0a1a 	add.w	sl, r4, #26
 8004c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c48:	425b      	negs	r3, r3
 8004c4a:	454b      	cmp	r3, r9
 8004c4c:	dc01      	bgt.n	8004c52 <_printf_float+0x2b2>
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	e794      	b.n	8004b7c <_printf_float+0x1dc>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f aefc 	beq.w	8004a5a <_printf_float+0xba>
 8004c62:	f109 0901 	add.w	r9, r9, #1
 8004c66:	e7ee      	b.n	8004c46 <_printf_float+0x2a6>
 8004c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	bfa8      	it	ge
 8004c70:	461a      	movge	r2, r3
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	4691      	mov	r9, r2
 8004c76:	dd07      	ble.n	8004c88 <_printf_float+0x2e8>
 8004c78:	4613      	mov	r3, r2
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f aee9 	beq.w	8004a5a <_printf_float+0xba>
 8004c88:	f104 031a 	add.w	r3, r4, #26
 8004c8c:	f04f 0b00 	mov.w	fp, #0
 8004c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c94:	9306      	str	r3, [sp, #24]
 8004c96:	e015      	b.n	8004cc4 <_printf_float+0x324>
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	08008330 	.word	0x08008330
 8004ca0:	0800832c 	.word	0x0800832c
 8004ca4:	08008338 	.word	0x08008338
 8004ca8:	08008334 	.word	0x08008334
 8004cac:	0800833c 	.word	0x0800833c
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	9a06      	ldr	r2, [sp, #24]
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f aecd 	beq.w	8004a5a <_printf_float+0xba>
 8004cc0:	f10b 0b01 	add.w	fp, fp, #1
 8004cc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004cc8:	ebaa 0309 	sub.w	r3, sl, r9
 8004ccc:	455b      	cmp	r3, fp
 8004cce:	dcef      	bgt.n	8004cb0 <_printf_float+0x310>
 8004cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	44d0      	add	r8, sl
 8004cd8:	db15      	blt.n	8004d06 <_printf_float+0x366>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07da      	lsls	r2, r3, #31
 8004cde:	d412      	bmi.n	8004d06 <_printf_float+0x366>
 8004ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ce4:	eba3 020a 	sub.w	r2, r3, sl
 8004ce8:	eba3 0a01 	sub.w	sl, r3, r1
 8004cec:	4592      	cmp	sl, r2
 8004cee:	bfa8      	it	ge
 8004cf0:	4692      	movge	sl, r2
 8004cf2:	f1ba 0f00 	cmp.w	sl, #0
 8004cf6:	dc0e      	bgt.n	8004d16 <_printf_float+0x376>
 8004cf8:	f04f 0800 	mov.w	r8, #0
 8004cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d00:	f104 091a 	add.w	r9, r4, #26
 8004d04:	e019      	b.n	8004d3a <_printf_float+0x39a>
 8004d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1e5      	bne.n	8004ce0 <_printf_float+0x340>
 8004d14:	e6a1      	b.n	8004a5a <_printf_float+0xba>
 8004d16:	4653      	mov	r3, sl
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b8      	blx	r7
 8004d20:	3001      	adds	r0, #1
 8004d22:	d1e9      	bne.n	8004cf8 <_printf_float+0x358>
 8004d24:	e699      	b.n	8004a5a <_printf_float+0xba>
 8004d26:	2301      	movs	r3, #1
 8004d28:	464a      	mov	r2, r9
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f ae92 	beq.w	8004a5a <_printf_float+0xba>
 8004d36:	f108 0801 	add.w	r8, r8, #1
 8004d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	eba3 030a 	sub.w	r3, r3, sl
 8004d44:	4543      	cmp	r3, r8
 8004d46:	dcee      	bgt.n	8004d26 <_printf_float+0x386>
 8004d48:	e74a      	b.n	8004be0 <_printf_float+0x240>
 8004d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d4c:	2a01      	cmp	r2, #1
 8004d4e:	dc01      	bgt.n	8004d54 <_printf_float+0x3b4>
 8004d50:	07db      	lsls	r3, r3, #31
 8004d52:	d53a      	bpl.n	8004dca <_printf_float+0x42a>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4642      	mov	r2, r8
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b8      	blx	r7
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f43f ae7b 	beq.w	8004a5a <_printf_float+0xba>
 8004d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f108 0801 	add.w	r8, r8, #1
 8004d74:	f43f ae71 	beq.w	8004a5a <_printf_float+0xba>
 8004d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d84:	2300      	movs	r3, #0
 8004d86:	f7fb fec7 	bl	8000b18 <__aeabi_dcmpeq>
 8004d8a:	b9c8      	cbnz	r0, 8004dc0 <_printf_float+0x420>
 8004d8c:	4653      	mov	r3, sl
 8004d8e:	4642      	mov	r2, r8
 8004d90:	4631      	mov	r1, r6
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	d10e      	bne.n	8004db8 <_printf_float+0x418>
 8004d9a:	e65e      	b.n	8004a5a <_printf_float+0xba>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4652      	mov	r2, sl
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae57 	beq.w	8004a5a <_printf_float+0xba>
 8004dac:	f108 0801 	add.w	r8, r8, #1
 8004db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dcf1      	bgt.n	8004d9c <_printf_float+0x3fc>
 8004db8:	464b      	mov	r3, r9
 8004dba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dbe:	e6de      	b.n	8004b7e <_printf_float+0x1de>
 8004dc0:	f04f 0800 	mov.w	r8, #0
 8004dc4:	f104 0a1a 	add.w	sl, r4, #26
 8004dc8:	e7f2      	b.n	8004db0 <_printf_float+0x410>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e7df      	b.n	8004d8e <_printf_float+0x3ee>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	464a      	mov	r2, r9
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f ae3e 	beq.w	8004a5a <_printf_float+0xba>
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	68e3      	ldr	r3, [r4, #12]
 8004de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	4543      	cmp	r3, r8
 8004dea:	dcf0      	bgt.n	8004dce <_printf_float+0x42e>
 8004dec:	e6fc      	b.n	8004be8 <_printf_float+0x248>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	f104 0919 	add.w	r9, r4, #25
 8004df6:	e7f4      	b.n	8004de2 <_printf_float+0x442>
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	f43f ae8b 	beq.w	8004b14 <_printf_float+0x174>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e04:	ab09      	add	r3, sp, #36	; 0x24
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	ec49 8b10 	vmov	d0, r8, r9
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	f8cd a004 	str.w	sl, [sp, #4]
 8004e12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7ff fd2d 	bl	8004876 <__cvt>
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	e648      	b.n	8004ab2 <_printf_float+0x112>

08004e20 <_printf_common>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	4691      	mov	r9, r2
 8004e26:	461f      	mov	r7, r3
 8004e28:	688a      	ldr	r2, [r1, #8]
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bfb8      	it	lt
 8004e34:	4613      	movlt	r3, r2
 8004e36:	f8c9 3000 	str.w	r3, [r9]
 8004e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e3e:	4606      	mov	r6, r0
 8004e40:	460c      	mov	r4, r1
 8004e42:	b112      	cbz	r2, 8004e4a <_printf_common+0x2a>
 8004e44:	3301      	adds	r3, #1
 8004e46:	f8c9 3000 	str.w	r3, [r9]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	0699      	lsls	r1, r3, #26
 8004e4e:	bf42      	ittt	mi
 8004e50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e54:	3302      	addmi	r3, #2
 8004e56:	f8c9 3000 	strmi.w	r3, [r9]
 8004e5a:	6825      	ldr	r5, [r4, #0]
 8004e5c:	f015 0506 	ands.w	r5, r5, #6
 8004e60:	d107      	bne.n	8004e72 <_printf_common+0x52>
 8004e62:	f104 0a19 	add.w	sl, r4, #25
 8004e66:	68e3      	ldr	r3, [r4, #12]
 8004e68:	f8d9 2000 	ldr.w	r2, [r9]
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	42ab      	cmp	r3, r5
 8004e70:	dc28      	bgt.n	8004ec4 <_printf_common+0xa4>
 8004e72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	3300      	adds	r3, #0
 8004e7a:	bf18      	it	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	0692      	lsls	r2, r2, #26
 8004e80:	d42d      	bmi.n	8004ede <_printf_common+0xbe>
 8004e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e86:	4639      	mov	r1, r7
 8004e88:	4630      	mov	r0, r6
 8004e8a:	47c0      	blx	r8
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d020      	beq.n	8004ed2 <_printf_common+0xb2>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	68e5      	ldr	r5, [r4, #12]
 8004e94:	f8d9 2000 	ldr.w	r2, [r9]
 8004e98:	f003 0306 	and.w	r3, r3, #6
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	bf08      	it	eq
 8004ea0:	1aad      	subeq	r5, r5, r2
 8004ea2:	68a3      	ldr	r3, [r4, #8]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	bf0c      	ite	eq
 8004ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eac:	2500      	movne	r5, #0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bfc4      	itt	gt
 8004eb2:	1a9b      	subgt	r3, r3, r2
 8004eb4:	18ed      	addgt	r5, r5, r3
 8004eb6:	f04f 0900 	mov.w	r9, #0
 8004eba:	341a      	adds	r4, #26
 8004ebc:	454d      	cmp	r5, r9
 8004ebe:	d11a      	bne.n	8004ef6 <_printf_common+0xd6>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e008      	b.n	8004ed6 <_printf_common+0xb6>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	4639      	mov	r1, r7
 8004eca:	4630      	mov	r0, r6
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d103      	bne.n	8004eda <_printf_common+0xba>
 8004ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	3501      	adds	r5, #1
 8004edc:	e7c3      	b.n	8004e66 <_printf_common+0x46>
 8004ede:	18e1      	adds	r1, r4, r3
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	2030      	movs	r0, #48	; 0x30
 8004ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ee8:	4422      	add	r2, r4
 8004eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	e7c5      	b.n	8004e82 <_printf_common+0x62>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4639      	mov	r1, r7
 8004efc:	4630      	mov	r0, r6
 8004efe:	47c0      	blx	r8
 8004f00:	3001      	adds	r0, #1
 8004f02:	d0e6      	beq.n	8004ed2 <_printf_common+0xb2>
 8004f04:	f109 0901 	add.w	r9, r9, #1
 8004f08:	e7d8      	b.n	8004ebc <_printf_common+0x9c>
	...

08004f0c <_printf_i>:
 8004f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f14:	460c      	mov	r4, r1
 8004f16:	7e09      	ldrb	r1, [r1, #24]
 8004f18:	b085      	sub	sp, #20
 8004f1a:	296e      	cmp	r1, #110	; 0x6e
 8004f1c:	4617      	mov	r7, r2
 8004f1e:	4606      	mov	r6, r0
 8004f20:	4698      	mov	r8, r3
 8004f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f24:	f000 80b3 	beq.w	800508e <_printf_i+0x182>
 8004f28:	d822      	bhi.n	8004f70 <_printf_i+0x64>
 8004f2a:	2963      	cmp	r1, #99	; 0x63
 8004f2c:	d036      	beq.n	8004f9c <_printf_i+0x90>
 8004f2e:	d80a      	bhi.n	8004f46 <_printf_i+0x3a>
 8004f30:	2900      	cmp	r1, #0
 8004f32:	f000 80b9 	beq.w	80050a8 <_printf_i+0x19c>
 8004f36:	2958      	cmp	r1, #88	; 0x58
 8004f38:	f000 8083 	beq.w	8005042 <_printf_i+0x136>
 8004f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f44:	e032      	b.n	8004fac <_printf_i+0xa0>
 8004f46:	2964      	cmp	r1, #100	; 0x64
 8004f48:	d001      	beq.n	8004f4e <_printf_i+0x42>
 8004f4a:	2969      	cmp	r1, #105	; 0x69
 8004f4c:	d1f6      	bne.n	8004f3c <_printf_i+0x30>
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	0605      	lsls	r5, r0, #24
 8004f54:	f103 0104 	add.w	r1, r3, #4
 8004f58:	d52a      	bpl.n	8004fb0 <_printf_i+0xa4>
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da03      	bge.n	8004f6a <_printf_i+0x5e>
 8004f62:	222d      	movs	r2, #45	; 0x2d
 8004f64:	425b      	negs	r3, r3
 8004f66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f6a:	486f      	ldr	r0, [pc, #444]	; (8005128 <_printf_i+0x21c>)
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	e039      	b.n	8004fe4 <_printf_i+0xd8>
 8004f70:	2973      	cmp	r1, #115	; 0x73
 8004f72:	f000 809d 	beq.w	80050b0 <_printf_i+0x1a4>
 8004f76:	d808      	bhi.n	8004f8a <_printf_i+0x7e>
 8004f78:	296f      	cmp	r1, #111	; 0x6f
 8004f7a:	d020      	beq.n	8004fbe <_printf_i+0xb2>
 8004f7c:	2970      	cmp	r1, #112	; 0x70
 8004f7e:	d1dd      	bne.n	8004f3c <_printf_i+0x30>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	e003      	b.n	8004f92 <_printf_i+0x86>
 8004f8a:	2975      	cmp	r1, #117	; 0x75
 8004f8c:	d017      	beq.n	8004fbe <_printf_i+0xb2>
 8004f8e:	2978      	cmp	r1, #120	; 0x78
 8004f90:	d1d4      	bne.n	8004f3c <_printf_i+0x30>
 8004f92:	2378      	movs	r3, #120	; 0x78
 8004f94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f98:	4864      	ldr	r0, [pc, #400]	; (800512c <_printf_i+0x220>)
 8004f9a:	e055      	b.n	8005048 <_printf_i+0x13c>
 8004f9c:	6813      	ldr	r3, [r2, #0]
 8004f9e:	1d19      	adds	r1, r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6011      	str	r1, [r2, #0]
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fac:	2301      	movs	r3, #1
 8004fae:	e08c      	b.n	80050ca <_printf_i+0x1be>
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6011      	str	r1, [r2, #0]
 8004fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fb8:	bf18      	it	ne
 8004fba:	b21b      	sxthne	r3, r3
 8004fbc:	e7cf      	b.n	8004f5e <_printf_i+0x52>
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	6825      	ldr	r5, [r4, #0]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6010      	str	r0, [r2, #0]
 8004fc6:	0628      	lsls	r0, r5, #24
 8004fc8:	d501      	bpl.n	8004fce <_printf_i+0xc2>
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	e002      	b.n	8004fd4 <_printf_i+0xc8>
 8004fce:	0668      	lsls	r0, r5, #25
 8004fd0:	d5fb      	bpl.n	8004fca <_printf_i+0xbe>
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	4854      	ldr	r0, [pc, #336]	; (8005128 <_printf_i+0x21c>)
 8004fd6:	296f      	cmp	r1, #111	; 0x6f
 8004fd8:	bf14      	ite	ne
 8004fda:	220a      	movne	r2, #10
 8004fdc:	2208      	moveq	r2, #8
 8004fde:	2100      	movs	r1, #0
 8004fe0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fe4:	6865      	ldr	r5, [r4, #4]
 8004fe6:	60a5      	str	r5, [r4, #8]
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	f2c0 8095 	blt.w	8005118 <_printf_i+0x20c>
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	f021 0104 	bic.w	r1, r1, #4
 8004ff4:	6021      	str	r1, [r4, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d13d      	bne.n	8005076 <_printf_i+0x16a>
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	f040 808e 	bne.w	800511c <_printf_i+0x210>
 8005000:	4665      	mov	r5, ip
 8005002:	2a08      	cmp	r2, #8
 8005004:	d10b      	bne.n	800501e <_printf_i+0x112>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	07db      	lsls	r3, r3, #31
 800500a:	d508      	bpl.n	800501e <_printf_i+0x112>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	6862      	ldr	r2, [r4, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	bfde      	ittt	le
 8005014:	2330      	movle	r3, #48	; 0x30
 8005016:	f805 3c01 	strble.w	r3, [r5, #-1]
 800501a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800501e:	ebac 0305 	sub.w	r3, ip, r5
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	f8cd 8000 	str.w	r8, [sp]
 8005028:	463b      	mov	r3, r7
 800502a:	aa03      	add	r2, sp, #12
 800502c:	4621      	mov	r1, r4
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff fef6 	bl	8004e20 <_printf_common>
 8005034:	3001      	adds	r0, #1
 8005036:	d14d      	bne.n	80050d4 <_printf_i+0x1c8>
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	b005      	add	sp, #20
 800503e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005042:	4839      	ldr	r0, [pc, #228]	; (8005128 <_printf_i+0x21c>)
 8005044:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005048:	6813      	ldr	r3, [r2, #0]
 800504a:	6821      	ldr	r1, [r4, #0]
 800504c:	1d1d      	adds	r5, r3, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6015      	str	r5, [r2, #0]
 8005052:	060a      	lsls	r2, r1, #24
 8005054:	d50b      	bpl.n	800506e <_printf_i+0x162>
 8005056:	07ca      	lsls	r2, r1, #31
 8005058:	bf44      	itt	mi
 800505a:	f041 0120 	orrmi.w	r1, r1, #32
 800505e:	6021      	strmi	r1, [r4, #0]
 8005060:	b91b      	cbnz	r3, 800506a <_printf_i+0x15e>
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	f022 0220 	bic.w	r2, r2, #32
 8005068:	6022      	str	r2, [r4, #0]
 800506a:	2210      	movs	r2, #16
 800506c:	e7b7      	b.n	8004fde <_printf_i+0xd2>
 800506e:	064d      	lsls	r5, r1, #25
 8005070:	bf48      	it	mi
 8005072:	b29b      	uxthmi	r3, r3
 8005074:	e7ef      	b.n	8005056 <_printf_i+0x14a>
 8005076:	4665      	mov	r5, ip
 8005078:	fbb3 f1f2 	udiv	r1, r3, r2
 800507c:	fb02 3311 	mls	r3, r2, r1, r3
 8005080:	5cc3      	ldrb	r3, [r0, r3]
 8005082:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005086:	460b      	mov	r3, r1
 8005088:	2900      	cmp	r1, #0
 800508a:	d1f5      	bne.n	8005078 <_printf_i+0x16c>
 800508c:	e7b9      	b.n	8005002 <_printf_i+0xf6>
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	6825      	ldr	r5, [r4, #0]
 8005092:	6961      	ldr	r1, [r4, #20]
 8005094:	1d18      	adds	r0, r3, #4
 8005096:	6010      	str	r0, [r2, #0]
 8005098:	0628      	lsls	r0, r5, #24
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	d501      	bpl.n	80050a2 <_printf_i+0x196>
 800509e:	6019      	str	r1, [r3, #0]
 80050a0:	e002      	b.n	80050a8 <_printf_i+0x19c>
 80050a2:	066a      	lsls	r2, r5, #25
 80050a4:	d5fb      	bpl.n	800509e <_printf_i+0x192>
 80050a6:	8019      	strh	r1, [r3, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	4665      	mov	r5, ip
 80050ae:	e7b9      	b.n	8005024 <_printf_i+0x118>
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	1d19      	adds	r1, r3, #4
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	681d      	ldr	r5, [r3, #0]
 80050b8:	6862      	ldr	r2, [r4, #4]
 80050ba:	2100      	movs	r1, #0
 80050bc:	4628      	mov	r0, r5
 80050be:	f7fb f8b7 	bl	8000230 <memchr>
 80050c2:	b108      	cbz	r0, 80050c8 <_printf_i+0x1bc>
 80050c4:	1b40      	subs	r0, r0, r5
 80050c6:	6060      	str	r0, [r4, #4]
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	2300      	movs	r3, #0
 80050ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d2:	e7a7      	b.n	8005024 <_printf_i+0x118>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	462a      	mov	r2, r5
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	47c0      	blx	r8
 80050de:	3001      	adds	r0, #1
 80050e0:	d0aa      	beq.n	8005038 <_printf_i+0x12c>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	079b      	lsls	r3, r3, #30
 80050e6:	d413      	bmi.n	8005110 <_printf_i+0x204>
 80050e8:	68e0      	ldr	r0, [r4, #12]
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	4298      	cmp	r0, r3
 80050ee:	bfb8      	it	lt
 80050f0:	4618      	movlt	r0, r3
 80050f2:	e7a3      	b.n	800503c <_printf_i+0x130>
 80050f4:	2301      	movs	r3, #1
 80050f6:	464a      	mov	r2, r9
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d09a      	beq.n	8005038 <_printf_i+0x12c>
 8005102:	3501      	adds	r5, #1
 8005104:	68e3      	ldr	r3, [r4, #12]
 8005106:	9a03      	ldr	r2, [sp, #12]
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	42ab      	cmp	r3, r5
 800510c:	dcf2      	bgt.n	80050f4 <_printf_i+0x1e8>
 800510e:	e7eb      	b.n	80050e8 <_printf_i+0x1dc>
 8005110:	2500      	movs	r5, #0
 8005112:	f104 0919 	add.w	r9, r4, #25
 8005116:	e7f5      	b.n	8005104 <_printf_i+0x1f8>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ac      	bne.n	8005076 <_printf_i+0x16a>
 800511c:	7803      	ldrb	r3, [r0, #0]
 800511e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005126:	e76c      	b.n	8005002 <_printf_i+0xf6>
 8005128:	0800833e 	.word	0x0800833e
 800512c:	0800834f 	.word	0x0800834f

08005130 <sniprintf>:
 8005130:	b40c      	push	{r2, r3}
 8005132:	b530      	push	{r4, r5, lr}
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <sniprintf+0x64>)
 8005136:	1e0c      	subs	r4, r1, #0
 8005138:	b09d      	sub	sp, #116	; 0x74
 800513a:	681d      	ldr	r5, [r3, #0]
 800513c:	da08      	bge.n	8005150 <sniprintf+0x20>
 800513e:	238b      	movs	r3, #139	; 0x8b
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	b01d      	add	sp, #116	; 0x74
 8005148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800514c:	b002      	add	sp, #8
 800514e:	4770      	bx	lr
 8005150:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005154:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005158:	bf14      	ite	ne
 800515a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800515e:	4623      	moveq	r3, r4
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	9307      	str	r3, [sp, #28]
 8005164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005170:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005172:	ab21      	add	r3, sp, #132	; 0x84
 8005174:	a902      	add	r1, sp, #8
 8005176:	4628      	mov	r0, r5
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f001 fa53 	bl	8006624 <_svfiprintf_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	bfbc      	itt	lt
 8005182:	238b      	movlt	r3, #139	; 0x8b
 8005184:	602b      	strlt	r3, [r5, #0]
 8005186:	2c00      	cmp	r4, #0
 8005188:	d0dd      	beq.n	8005146 <sniprintf+0x16>
 800518a:	9b02      	ldr	r3, [sp, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e7d9      	b.n	8005146 <sniprintf+0x16>
 8005192:	bf00      	nop
 8005194:	20000014 	.word	0x20000014

08005198 <quorem>:
 8005198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	6903      	ldr	r3, [r0, #16]
 800519e:	690c      	ldr	r4, [r1, #16]
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	4680      	mov	r8, r0
 80051a4:	f2c0 8082 	blt.w	80052ac <quorem+0x114>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	f101 0714 	add.w	r7, r1, #20
 80051ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80051b2:	f100 0614 	add.w	r6, r0, #20
 80051b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80051ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80051be:	eb06 030c 	add.w	r3, r6, ip
 80051c2:	3501      	adds	r5, #1
 80051c4:	eb07 090c 	add.w	r9, r7, ip
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80051ce:	b395      	cbz	r5, 8005236 <quorem+0x9e>
 80051d0:	f04f 0a00 	mov.w	sl, #0
 80051d4:	4638      	mov	r0, r7
 80051d6:	46b6      	mov	lr, r6
 80051d8:	46d3      	mov	fp, sl
 80051da:	f850 2b04 	ldr.w	r2, [r0], #4
 80051de:	b293      	uxth	r3, r2
 80051e0:	fb05 a303 	mla	r3, r5, r3, sl
 80051e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ebab 0303 	sub.w	r3, fp, r3
 80051ee:	0c12      	lsrs	r2, r2, #16
 80051f0:	f8de b000 	ldr.w	fp, [lr]
 80051f4:	fb05 a202 	mla	r2, r5, r2, sl
 80051f8:	fa13 f38b 	uxtah	r3, r3, fp
 80051fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005200:	fa1f fb82 	uxth.w	fp, r2
 8005204:	f8de 2000 	ldr.w	r2, [lr]
 8005208:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800520c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005216:	4581      	cmp	r9, r0
 8005218:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800521c:	f84e 3b04 	str.w	r3, [lr], #4
 8005220:	d2db      	bcs.n	80051da <quorem+0x42>
 8005222:	f856 300c 	ldr.w	r3, [r6, ip]
 8005226:	b933      	cbnz	r3, 8005236 <quorem+0x9e>
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	3b04      	subs	r3, #4
 800522c:	429e      	cmp	r6, r3
 800522e:	461a      	mov	r2, r3
 8005230:	d330      	bcc.n	8005294 <quorem+0xfc>
 8005232:	f8c8 4010 	str.w	r4, [r8, #16]
 8005236:	4640      	mov	r0, r8
 8005238:	f001 f81e 	bl	8006278 <__mcmp>
 800523c:	2800      	cmp	r0, #0
 800523e:	db25      	blt.n	800528c <quorem+0xf4>
 8005240:	3501      	adds	r5, #1
 8005242:	4630      	mov	r0, r6
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	f857 2b04 	ldr.w	r2, [r7], #4
 800524c:	f8d0 e000 	ldr.w	lr, [r0]
 8005250:	b293      	uxth	r3, r2
 8005252:	ebac 0303 	sub.w	r3, ip, r3
 8005256:	0c12      	lsrs	r2, r2, #16
 8005258:	fa13 f38e 	uxtah	r3, r3, lr
 800525c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800526a:	45b9      	cmp	r9, r7
 800526c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005270:	f840 3b04 	str.w	r3, [r0], #4
 8005274:	d2e8      	bcs.n	8005248 <quorem+0xb0>
 8005276:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800527a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800527e:	b92a      	cbnz	r2, 800528c <quorem+0xf4>
 8005280:	3b04      	subs	r3, #4
 8005282:	429e      	cmp	r6, r3
 8005284:	461a      	mov	r2, r3
 8005286:	d30b      	bcc.n	80052a0 <quorem+0x108>
 8005288:	f8c8 4010 	str.w	r4, [r8, #16]
 800528c:	4628      	mov	r0, r5
 800528e:	b003      	add	sp, #12
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	3b04      	subs	r3, #4
 8005298:	2a00      	cmp	r2, #0
 800529a:	d1ca      	bne.n	8005232 <quorem+0x9a>
 800529c:	3c01      	subs	r4, #1
 800529e:	e7c5      	b.n	800522c <quorem+0x94>
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d1ef      	bne.n	8005288 <quorem+0xf0>
 80052a8:	3c01      	subs	r4, #1
 80052aa:	e7ea      	b.n	8005282 <quorem+0xea>
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7ee      	b.n	800528e <quorem+0xf6>

080052b0 <_dtoa_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	ec57 6b10 	vmov	r6, r7, d0
 80052b8:	b097      	sub	sp, #92	; 0x5c
 80052ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052bc:	9106      	str	r1, [sp, #24]
 80052be:	4604      	mov	r4, r0
 80052c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80052c2:	9312      	str	r3, [sp, #72]	; 0x48
 80052c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052c8:	e9cd 6700 	strd	r6, r7, [sp]
 80052cc:	b93d      	cbnz	r5, 80052de <_dtoa_r+0x2e>
 80052ce:	2010      	movs	r0, #16
 80052d0:	f000 fdb4 	bl	8005e3c <malloc>
 80052d4:	6260      	str	r0, [r4, #36]	; 0x24
 80052d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052da:	6005      	str	r5, [r0, #0]
 80052dc:	60c5      	str	r5, [r0, #12]
 80052de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	b151      	cbz	r1, 80052fa <_dtoa_r+0x4a>
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	604a      	str	r2, [r1, #4]
 80052e8:	2301      	movs	r3, #1
 80052ea:	4093      	lsls	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 fde0 	bl	8005eb4 <_Bfree>
 80052f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	1e3b      	subs	r3, r7, #0
 80052fc:	bfbb      	ittet	lt
 80052fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005302:	9301      	strlt	r3, [sp, #4]
 8005304:	2300      	movge	r3, #0
 8005306:	2201      	movlt	r2, #1
 8005308:	bfac      	ite	ge
 800530a:	f8c8 3000 	strge.w	r3, [r8]
 800530e:	f8c8 2000 	strlt.w	r2, [r8]
 8005312:	4baf      	ldr	r3, [pc, #700]	; (80055d0 <_dtoa_r+0x320>)
 8005314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005318:	ea33 0308 	bics.w	r3, r3, r8
 800531c:	d114      	bne.n	8005348 <_dtoa_r+0x98>
 800531e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005320:	f242 730f 	movw	r3, #9999	; 0x270f
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	b923      	cbnz	r3, 8005334 <_dtoa_r+0x84>
 800532a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800532e:	2800      	cmp	r0, #0
 8005330:	f000 8542 	beq.w	8005db8 <_dtoa_r+0xb08>
 8005334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005336:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80055e4 <_dtoa_r+0x334>
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8544 	beq.w	8005dc8 <_dtoa_r+0xb18>
 8005340:	f10b 0303 	add.w	r3, fp, #3
 8005344:	f000 bd3e 	b.w	8005dc4 <_dtoa_r+0xb14>
 8005348:	e9dd 6700 	ldrd	r6, r7, [sp]
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f7fb fbe0 	bl	8000b18 <__aeabi_dcmpeq>
 8005358:	4681      	mov	r9, r0
 800535a:	b168      	cbz	r0, 8005378 <_dtoa_r+0xc8>
 800535c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800535e:	2301      	movs	r3, #1
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8524 	beq.w	8005db2 <_dtoa_r+0xb02>
 800536a:	4b9a      	ldr	r3, [pc, #616]	; (80055d4 <_dtoa_r+0x324>)
 800536c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800536e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	f000 bd28 	b.w	8005dc8 <_dtoa_r+0xb18>
 8005378:	aa14      	add	r2, sp, #80	; 0x50
 800537a:	a915      	add	r1, sp, #84	; 0x54
 800537c:	ec47 6b10 	vmov	d0, r6, r7
 8005380:	4620      	mov	r0, r4
 8005382:	f000 fff0 	bl	8006366 <__d2b>
 8005386:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800538a:	9004      	str	r0, [sp, #16]
 800538c:	2d00      	cmp	r5, #0
 800538e:	d07c      	beq.n	800548a <_dtoa_r+0x1da>
 8005390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005394:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005398:	46b2      	mov	sl, r6
 800539a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800539e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80053a6:	2200      	movs	r2, #0
 80053a8:	4b8b      	ldr	r3, [pc, #556]	; (80055d8 <_dtoa_r+0x328>)
 80053aa:	4650      	mov	r0, sl
 80053ac:	4659      	mov	r1, fp
 80053ae:	f7fa ff93 	bl	80002d8 <__aeabi_dsub>
 80053b2:	a381      	add	r3, pc, #516	; (adr r3, 80055b8 <_dtoa_r+0x308>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb f946 	bl	8000648 <__aeabi_dmul>
 80053bc:	a380      	add	r3, pc, #512	; (adr r3, 80055c0 <_dtoa_r+0x310>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fa ff8b 	bl	80002dc <__adddf3>
 80053c6:	4606      	mov	r6, r0
 80053c8:	4628      	mov	r0, r5
 80053ca:	460f      	mov	r7, r1
 80053cc:	f7fb f8d2 	bl	8000574 <__aeabi_i2d>
 80053d0:	a37d      	add	r3, pc, #500	; (adr r3, 80055c8 <_dtoa_r+0x318>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb f937 	bl	8000648 <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fa ff7b 	bl	80002dc <__adddf3>
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	f7fb fbdd 	bl	8000ba8 <__aeabi_d2iz>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4682      	mov	sl, r0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4630      	mov	r0, r6
 80053f6:	4639      	mov	r1, r7
 80053f8:	f7fb fb98 	bl	8000b2c <__aeabi_dcmplt>
 80053fc:	b148      	cbz	r0, 8005412 <_dtoa_r+0x162>
 80053fe:	4650      	mov	r0, sl
 8005400:	f7fb f8b8 	bl	8000574 <__aeabi_i2d>
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	f7fb fb86 	bl	8000b18 <__aeabi_dcmpeq>
 800540c:	b908      	cbnz	r0, 8005412 <_dtoa_r+0x162>
 800540e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005412:	f1ba 0f16 	cmp.w	sl, #22
 8005416:	d859      	bhi.n	80054cc <_dtoa_r+0x21c>
 8005418:	4970      	ldr	r1, [pc, #448]	; (80055dc <_dtoa_r+0x32c>)
 800541a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800541e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005426:	f7fb fb9f 	bl	8000b68 <__aeabi_dcmpgt>
 800542a:	2800      	cmp	r0, #0
 800542c:	d050      	beq.n	80054d0 <_dtoa_r+0x220>
 800542e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005432:	2300      	movs	r3, #0
 8005434:	930f      	str	r3, [sp, #60]	; 0x3c
 8005436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005438:	1b5d      	subs	r5, r3, r5
 800543a:	f1b5 0801 	subs.w	r8, r5, #1
 800543e:	bf49      	itett	mi
 8005440:	f1c5 0301 	rsbmi	r3, r5, #1
 8005444:	2300      	movpl	r3, #0
 8005446:	9305      	strmi	r3, [sp, #20]
 8005448:	f04f 0800 	movmi.w	r8, #0
 800544c:	bf58      	it	pl
 800544e:	9305      	strpl	r3, [sp, #20]
 8005450:	f1ba 0f00 	cmp.w	sl, #0
 8005454:	db3e      	blt.n	80054d4 <_dtoa_r+0x224>
 8005456:	2300      	movs	r3, #0
 8005458:	44d0      	add	r8, sl
 800545a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	2b09      	cmp	r3, #9
 8005464:	f200 8090 	bhi.w	8005588 <_dtoa_r+0x2d8>
 8005468:	2b05      	cmp	r3, #5
 800546a:	bfc4      	itt	gt
 800546c:	3b04      	subgt	r3, #4
 800546e:	9306      	strgt	r3, [sp, #24]
 8005470:	9b06      	ldr	r3, [sp, #24]
 8005472:	f1a3 0302 	sub.w	r3, r3, #2
 8005476:	bfcc      	ite	gt
 8005478:	2500      	movgt	r5, #0
 800547a:	2501      	movle	r5, #1
 800547c:	2b03      	cmp	r3, #3
 800547e:	f200 808f 	bhi.w	80055a0 <_dtoa_r+0x2f0>
 8005482:	e8df f003 	tbb	[pc, r3]
 8005486:	7f7d      	.short	0x7f7d
 8005488:	7131      	.short	0x7131
 800548a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800548e:	441d      	add	r5, r3
 8005490:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005494:	2820      	cmp	r0, #32
 8005496:	dd13      	ble.n	80054c0 <_dtoa_r+0x210>
 8005498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800549c:	9b00      	ldr	r3, [sp, #0]
 800549e:	fa08 f800 	lsl.w	r8, r8, r0
 80054a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80054a6:	fa23 f000 	lsr.w	r0, r3, r0
 80054aa:	ea48 0000 	orr.w	r0, r8, r0
 80054ae:	f7fb f851 	bl	8000554 <__aeabi_ui2d>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4682      	mov	sl, r0
 80054b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80054ba:	3d01      	subs	r5, #1
 80054bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80054be:	e772      	b.n	80053a6 <_dtoa_r+0xf6>
 80054c0:	9b00      	ldr	r3, [sp, #0]
 80054c2:	f1c0 0020 	rsb	r0, r0, #32
 80054c6:	fa03 f000 	lsl.w	r0, r3, r0
 80054ca:	e7f0      	b.n	80054ae <_dtoa_r+0x1fe>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e7b1      	b.n	8005434 <_dtoa_r+0x184>
 80054d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80054d2:	e7b0      	b.n	8005436 <_dtoa_r+0x186>
 80054d4:	9b05      	ldr	r3, [sp, #20]
 80054d6:	eba3 030a 	sub.w	r3, r3, sl
 80054da:	9305      	str	r3, [sp, #20]
 80054dc:	f1ca 0300 	rsb	r3, sl, #0
 80054e0:	9307      	str	r3, [sp, #28]
 80054e2:	2300      	movs	r3, #0
 80054e4:	930e      	str	r3, [sp, #56]	; 0x38
 80054e6:	e7bb      	b.n	8005460 <_dtoa_r+0x1b0>
 80054e8:	2301      	movs	r3, #1
 80054ea:	930a      	str	r3, [sp, #40]	; 0x28
 80054ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dd59      	ble.n	80055a6 <_dtoa_r+0x2f6>
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	4699      	mov	r9, r3
 80054f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054f8:	2200      	movs	r2, #0
 80054fa:	6072      	str	r2, [r6, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	f102 0014 	add.w	r0, r2, #20
 8005502:	4298      	cmp	r0, r3
 8005504:	6871      	ldr	r1, [r6, #4]
 8005506:	d953      	bls.n	80055b0 <_dtoa_r+0x300>
 8005508:	4620      	mov	r0, r4
 800550a:	f000 fc9f 	bl	8005e4c <_Balloc>
 800550e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005510:	6030      	str	r0, [r6, #0]
 8005512:	f1b9 0f0e 	cmp.w	r9, #14
 8005516:	f8d3 b000 	ldr.w	fp, [r3]
 800551a:	f200 80e6 	bhi.w	80056ea <_dtoa_r+0x43a>
 800551e:	2d00      	cmp	r5, #0
 8005520:	f000 80e3 	beq.w	80056ea <_dtoa_r+0x43a>
 8005524:	ed9d 7b00 	vldr	d7, [sp]
 8005528:	f1ba 0f00 	cmp.w	sl, #0
 800552c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005530:	dd74      	ble.n	800561c <_dtoa_r+0x36c>
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <_dtoa_r+0x32c>)
 8005534:	f00a 030f 	and.w	r3, sl, #15
 8005538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800553c:	ed93 7b00 	vldr	d7, [r3]
 8005540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005544:	06f0      	lsls	r0, r6, #27
 8005546:	ed8d 7b08 	vstr	d7, [sp, #32]
 800554a:	d565      	bpl.n	8005618 <_dtoa_r+0x368>
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <_dtoa_r+0x330>)
 800554e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005556:	f7fb f9a1 	bl	800089c <__aeabi_ddiv>
 800555a:	e9cd 0100 	strd	r0, r1, [sp]
 800555e:	f006 060f 	and.w	r6, r6, #15
 8005562:	2503      	movs	r5, #3
 8005564:	4f1e      	ldr	r7, [pc, #120]	; (80055e0 <_dtoa_r+0x330>)
 8005566:	e04c      	b.n	8005602 <_dtoa_r+0x352>
 8005568:	2301      	movs	r3, #1
 800556a:	930a      	str	r3, [sp, #40]	; 0x28
 800556c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556e:	4453      	add	r3, sl
 8005570:	f103 0901 	add.w	r9, r3, #1
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	464b      	mov	r3, r9
 8005578:	2b01      	cmp	r3, #1
 800557a:	bfb8      	it	lt
 800557c:	2301      	movlt	r3, #1
 800557e:	e7ba      	b.n	80054f6 <_dtoa_r+0x246>
 8005580:	2300      	movs	r3, #0
 8005582:	e7b2      	b.n	80054ea <_dtoa_r+0x23a>
 8005584:	2300      	movs	r3, #0
 8005586:	e7f0      	b.n	800556a <_dtoa_r+0x2ba>
 8005588:	2501      	movs	r5, #1
 800558a:	2300      	movs	r3, #0
 800558c:	9306      	str	r3, [sp, #24]
 800558e:	950a      	str	r5, [sp, #40]	; 0x28
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	4699      	mov	r9, r3
 8005598:	2200      	movs	r2, #0
 800559a:	2312      	movs	r3, #18
 800559c:	920b      	str	r2, [sp, #44]	; 0x2c
 800559e:	e7aa      	b.n	80054f6 <_dtoa_r+0x246>
 80055a0:	2301      	movs	r3, #1
 80055a2:	930a      	str	r3, [sp, #40]	; 0x28
 80055a4:	e7f4      	b.n	8005590 <_dtoa_r+0x2e0>
 80055a6:	2301      	movs	r3, #1
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	4699      	mov	r9, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	e7f5      	b.n	800559c <_dtoa_r+0x2ec>
 80055b0:	3101      	adds	r1, #1
 80055b2:	6071      	str	r1, [r6, #4]
 80055b4:	0052      	lsls	r2, r2, #1
 80055b6:	e7a2      	b.n	80054fe <_dtoa_r+0x24e>
 80055b8:	636f4361 	.word	0x636f4361
 80055bc:	3fd287a7 	.word	0x3fd287a7
 80055c0:	8b60c8b3 	.word	0x8b60c8b3
 80055c4:	3fc68a28 	.word	0x3fc68a28
 80055c8:	509f79fb 	.word	0x509f79fb
 80055cc:	3fd34413 	.word	0x3fd34413
 80055d0:	7ff00000 	.word	0x7ff00000
 80055d4:	0800833d 	.word	0x0800833d
 80055d8:	3ff80000 	.word	0x3ff80000
 80055dc:	08008398 	.word	0x08008398
 80055e0:	08008370 	.word	0x08008370
 80055e4:	08008369 	.word	0x08008369
 80055e8:	07f1      	lsls	r1, r6, #31
 80055ea:	d508      	bpl.n	80055fe <_dtoa_r+0x34e>
 80055ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f4:	f7fb f828 	bl	8000648 <__aeabi_dmul>
 80055f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055fc:	3501      	adds	r5, #1
 80055fe:	1076      	asrs	r6, r6, #1
 8005600:	3708      	adds	r7, #8
 8005602:	2e00      	cmp	r6, #0
 8005604:	d1f0      	bne.n	80055e8 <_dtoa_r+0x338>
 8005606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800560a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800560e:	f7fb f945 	bl	800089c <__aeabi_ddiv>
 8005612:	e9cd 0100 	strd	r0, r1, [sp]
 8005616:	e01a      	b.n	800564e <_dtoa_r+0x39e>
 8005618:	2502      	movs	r5, #2
 800561a:	e7a3      	b.n	8005564 <_dtoa_r+0x2b4>
 800561c:	f000 80a0 	beq.w	8005760 <_dtoa_r+0x4b0>
 8005620:	f1ca 0600 	rsb	r6, sl, #0
 8005624:	4b9f      	ldr	r3, [pc, #636]	; (80058a4 <_dtoa_r+0x5f4>)
 8005626:	4fa0      	ldr	r7, [pc, #640]	; (80058a8 <_dtoa_r+0x5f8>)
 8005628:	f006 020f 	and.w	r2, r6, #15
 800562c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005638:	f7fb f806 	bl	8000648 <__aeabi_dmul>
 800563c:	e9cd 0100 	strd	r0, r1, [sp]
 8005640:	1136      	asrs	r6, r6, #4
 8005642:	2300      	movs	r3, #0
 8005644:	2502      	movs	r5, #2
 8005646:	2e00      	cmp	r6, #0
 8005648:	d17f      	bne.n	800574a <_dtoa_r+0x49a>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e1      	bne.n	8005612 <_dtoa_r+0x362>
 800564e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8087 	beq.w	8005764 <_dtoa_r+0x4b4>
 8005656:	e9dd 6700 	ldrd	r6, r7, [sp]
 800565a:	2200      	movs	r2, #0
 800565c:	4b93      	ldr	r3, [pc, #588]	; (80058ac <_dtoa_r+0x5fc>)
 800565e:	4630      	mov	r0, r6
 8005660:	4639      	mov	r1, r7
 8005662:	f7fb fa63 	bl	8000b2c <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	d07c      	beq.n	8005764 <_dtoa_r+0x4b4>
 800566a:	f1b9 0f00 	cmp.w	r9, #0
 800566e:	d079      	beq.n	8005764 <_dtoa_r+0x4b4>
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	dd35      	ble.n	80056e2 <_dtoa_r+0x432>
 8005676:	f10a 33ff 	add.w	r3, sl, #4294967295
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	4639      	mov	r1, r7
 800567e:	2200      	movs	r2, #0
 8005680:	4b8b      	ldr	r3, [pc, #556]	; (80058b0 <_dtoa_r+0x600>)
 8005682:	4630      	mov	r0, r6
 8005684:	f7fa ffe0 	bl	8000648 <__aeabi_dmul>
 8005688:	e9cd 0100 	strd	r0, r1, [sp]
 800568c:	9f02      	ldr	r7, [sp, #8]
 800568e:	3501      	adds	r5, #1
 8005690:	4628      	mov	r0, r5
 8005692:	f7fa ff6f 	bl	8000574 <__aeabi_i2d>
 8005696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800569a:	f7fa ffd5 	bl	8000648 <__aeabi_dmul>
 800569e:	2200      	movs	r2, #0
 80056a0:	4b84      	ldr	r3, [pc, #528]	; (80058b4 <_dtoa_r+0x604>)
 80056a2:	f7fa fe1b 	bl	80002dc <__adddf3>
 80056a6:	4605      	mov	r5, r0
 80056a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056ac:	2f00      	cmp	r7, #0
 80056ae:	d15d      	bne.n	800576c <_dtoa_r+0x4bc>
 80056b0:	2200      	movs	r2, #0
 80056b2:	4b81      	ldr	r3, [pc, #516]	; (80058b8 <_dtoa_r+0x608>)
 80056b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b8:	f7fa fe0e 	bl	80002d8 <__aeabi_dsub>
 80056bc:	462a      	mov	r2, r5
 80056be:	4633      	mov	r3, r6
 80056c0:	e9cd 0100 	strd	r0, r1, [sp]
 80056c4:	f7fb fa50 	bl	8000b68 <__aeabi_dcmpgt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 8288 	bne.w	8005bde <_dtoa_r+0x92e>
 80056ce:	462a      	mov	r2, r5
 80056d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d8:	f7fb fa28 	bl	8000b2c <__aeabi_dcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 827c 	bne.w	8005bda <_dtoa_r+0x92a>
 80056e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056e6:	e9cd 2300 	strd	r2, r3, [sp]
 80056ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f2c0 8150 	blt.w	8005992 <_dtoa_r+0x6e2>
 80056f2:	f1ba 0f0e 	cmp.w	sl, #14
 80056f6:	f300 814c 	bgt.w	8005992 <_dtoa_r+0x6e2>
 80056fa:	4b6a      	ldr	r3, [pc, #424]	; (80058a4 <_dtoa_r+0x5f4>)
 80056fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005700:	ed93 7b00 	vldr	d7, [r3]
 8005704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005706:	2b00      	cmp	r3, #0
 8005708:	ed8d 7b02 	vstr	d7, [sp, #8]
 800570c:	f280 80d8 	bge.w	80058c0 <_dtoa_r+0x610>
 8005710:	f1b9 0f00 	cmp.w	r9, #0
 8005714:	f300 80d4 	bgt.w	80058c0 <_dtoa_r+0x610>
 8005718:	f040 825e 	bne.w	8005bd8 <_dtoa_r+0x928>
 800571c:	2200      	movs	r2, #0
 800571e:	4b66      	ldr	r3, [pc, #408]	; (80058b8 <_dtoa_r+0x608>)
 8005720:	ec51 0b17 	vmov	r0, r1, d7
 8005724:	f7fa ff90 	bl	8000648 <__aeabi_dmul>
 8005728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800572c:	f7fb fa12 	bl	8000b54 <__aeabi_dcmpge>
 8005730:	464f      	mov	r7, r9
 8005732:	464e      	mov	r6, r9
 8005734:	2800      	cmp	r0, #0
 8005736:	f040 8234 	bne.w	8005ba2 <_dtoa_r+0x8f2>
 800573a:	2331      	movs	r3, #49	; 0x31
 800573c:	f10b 0501 	add.w	r5, fp, #1
 8005740:	f88b 3000 	strb.w	r3, [fp]
 8005744:	f10a 0a01 	add.w	sl, sl, #1
 8005748:	e22f      	b.n	8005baa <_dtoa_r+0x8fa>
 800574a:	07f2      	lsls	r2, r6, #31
 800574c:	d505      	bpl.n	800575a <_dtoa_r+0x4aa>
 800574e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005752:	f7fa ff79 	bl	8000648 <__aeabi_dmul>
 8005756:	3501      	adds	r5, #1
 8005758:	2301      	movs	r3, #1
 800575a:	1076      	asrs	r6, r6, #1
 800575c:	3708      	adds	r7, #8
 800575e:	e772      	b.n	8005646 <_dtoa_r+0x396>
 8005760:	2502      	movs	r5, #2
 8005762:	e774      	b.n	800564e <_dtoa_r+0x39e>
 8005764:	f8cd a020 	str.w	sl, [sp, #32]
 8005768:	464f      	mov	r7, r9
 800576a:	e791      	b.n	8005690 <_dtoa_r+0x3e0>
 800576c:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <_dtoa_r+0x5f4>)
 800576e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005772:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d047      	beq.n	800580c <_dtoa_r+0x55c>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	2000      	movs	r0, #0
 8005782:	494e      	ldr	r1, [pc, #312]	; (80058bc <_dtoa_r+0x60c>)
 8005784:	f7fb f88a 	bl	800089c <__aeabi_ddiv>
 8005788:	462a      	mov	r2, r5
 800578a:	4633      	mov	r3, r6
 800578c:	f7fa fda4 	bl	80002d8 <__aeabi_dsub>
 8005790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005794:	465d      	mov	r5, fp
 8005796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800579a:	f7fb fa05 	bl	8000ba8 <__aeabi_d2iz>
 800579e:	4606      	mov	r6, r0
 80057a0:	f7fa fee8 	bl	8000574 <__aeabi_i2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ac:	f7fa fd94 	bl	80002d8 <__aeabi_dsub>
 80057b0:	3630      	adds	r6, #48	; 0x30
 80057b2:	f805 6b01 	strb.w	r6, [r5], #1
 80057b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057ba:	e9cd 0100 	strd	r0, r1, [sp]
 80057be:	f7fb f9b5 	bl	8000b2c <__aeabi_dcmplt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d163      	bne.n	800588e <_dtoa_r+0x5de>
 80057c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ca:	2000      	movs	r0, #0
 80057cc:	4937      	ldr	r1, [pc, #220]	; (80058ac <_dtoa_r+0x5fc>)
 80057ce:	f7fa fd83 	bl	80002d8 <__aeabi_dsub>
 80057d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057d6:	f7fb f9a9 	bl	8000b2c <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 80b7 	bne.w	800594e <_dtoa_r+0x69e>
 80057e0:	eba5 030b 	sub.w	r3, r5, fp
 80057e4:	429f      	cmp	r7, r3
 80057e6:	f77f af7c 	ble.w	80056e2 <_dtoa_r+0x432>
 80057ea:	2200      	movs	r2, #0
 80057ec:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <_dtoa_r+0x600>)
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f2:	f7fa ff29 	bl	8000648 <__aeabi_dmul>
 80057f6:	2200      	movs	r2, #0
 80057f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057fc:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <_dtoa_r+0x600>)
 80057fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005802:	f7fa ff21 	bl	8000648 <__aeabi_dmul>
 8005806:	e9cd 0100 	strd	r0, r1, [sp]
 800580a:	e7c4      	b.n	8005796 <_dtoa_r+0x4e6>
 800580c:	462a      	mov	r2, r5
 800580e:	4633      	mov	r3, r6
 8005810:	f7fa ff1a 	bl	8000648 <__aeabi_dmul>
 8005814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005818:	eb0b 0507 	add.w	r5, fp, r7
 800581c:	465e      	mov	r6, fp
 800581e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005822:	f7fb f9c1 	bl	8000ba8 <__aeabi_d2iz>
 8005826:	4607      	mov	r7, r0
 8005828:	f7fa fea4 	bl	8000574 <__aeabi_i2d>
 800582c:	3730      	adds	r7, #48	; 0x30
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005836:	f7fa fd4f 	bl	80002d8 <__aeabi_dsub>
 800583a:	f806 7b01 	strb.w	r7, [r6], #1
 800583e:	42ae      	cmp	r6, r5
 8005840:	e9cd 0100 	strd	r0, r1, [sp]
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	d126      	bne.n	8005898 <_dtoa_r+0x5e8>
 800584a:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <_dtoa_r+0x60c>)
 800584c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005850:	f7fa fd44 	bl	80002dc <__adddf3>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800585c:	f7fb f984 	bl	8000b68 <__aeabi_dcmpgt>
 8005860:	2800      	cmp	r0, #0
 8005862:	d174      	bne.n	800594e <_dtoa_r+0x69e>
 8005864:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005868:	2000      	movs	r0, #0
 800586a:	4914      	ldr	r1, [pc, #80]	; (80058bc <_dtoa_r+0x60c>)
 800586c:	f7fa fd34 	bl	80002d8 <__aeabi_dsub>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005878:	f7fb f958 	bl	8000b2c <__aeabi_dcmplt>
 800587c:	2800      	cmp	r0, #0
 800587e:	f43f af30 	beq.w	80056e2 <_dtoa_r+0x432>
 8005882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005886:	2b30      	cmp	r3, #48	; 0x30
 8005888:	f105 32ff 	add.w	r2, r5, #4294967295
 800588c:	d002      	beq.n	8005894 <_dtoa_r+0x5e4>
 800588e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005892:	e04a      	b.n	800592a <_dtoa_r+0x67a>
 8005894:	4615      	mov	r5, r2
 8005896:	e7f4      	b.n	8005882 <_dtoa_r+0x5d2>
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <_dtoa_r+0x600>)
 800589a:	f7fa fed5 	bl	8000648 <__aeabi_dmul>
 800589e:	e9cd 0100 	strd	r0, r1, [sp]
 80058a2:	e7bc      	b.n	800581e <_dtoa_r+0x56e>
 80058a4:	08008398 	.word	0x08008398
 80058a8:	08008370 	.word	0x08008370
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	40240000 	.word	0x40240000
 80058b4:	401c0000 	.word	0x401c0000
 80058b8:	40140000 	.word	0x40140000
 80058bc:	3fe00000 	.word	0x3fe00000
 80058c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058c4:	465d      	mov	r5, fp
 80058c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ca:	4630      	mov	r0, r6
 80058cc:	4639      	mov	r1, r7
 80058ce:	f7fa ffe5 	bl	800089c <__aeabi_ddiv>
 80058d2:	f7fb f969 	bl	8000ba8 <__aeabi_d2iz>
 80058d6:	4680      	mov	r8, r0
 80058d8:	f7fa fe4c 	bl	8000574 <__aeabi_i2d>
 80058dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058e0:	f7fa feb2 	bl	8000648 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4630      	mov	r0, r6
 80058ea:	4639      	mov	r1, r7
 80058ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80058f0:	f7fa fcf2 	bl	80002d8 <__aeabi_dsub>
 80058f4:	f805 6b01 	strb.w	r6, [r5], #1
 80058f8:	eba5 060b 	sub.w	r6, r5, fp
 80058fc:	45b1      	cmp	r9, r6
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	d139      	bne.n	8005978 <_dtoa_r+0x6c8>
 8005904:	f7fa fcea 	bl	80002dc <__adddf3>
 8005908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	f7fb f92a 	bl	8000b68 <__aeabi_dcmpgt>
 8005914:	b9c8      	cbnz	r0, 800594a <_dtoa_r+0x69a>
 8005916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591a:	4630      	mov	r0, r6
 800591c:	4639      	mov	r1, r7
 800591e:	f7fb f8fb 	bl	8000b18 <__aeabi_dcmpeq>
 8005922:	b110      	cbz	r0, 800592a <_dtoa_r+0x67a>
 8005924:	f018 0f01 	tst.w	r8, #1
 8005928:	d10f      	bne.n	800594a <_dtoa_r+0x69a>
 800592a:	9904      	ldr	r1, [sp, #16]
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fac1 	bl	8005eb4 <_Bfree>
 8005932:	2300      	movs	r3, #0
 8005934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005936:	702b      	strb	r3, [r5, #0]
 8005938:	f10a 0301 	add.w	r3, sl, #1
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8241 	beq.w	8005dc8 <_dtoa_r+0xb18>
 8005946:	601d      	str	r5, [r3, #0]
 8005948:	e23e      	b.n	8005dc8 <_dtoa_r+0xb18>
 800594a:	f8cd a020 	str.w	sl, [sp, #32]
 800594e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005952:	2a39      	cmp	r2, #57	; 0x39
 8005954:	f105 33ff 	add.w	r3, r5, #4294967295
 8005958:	d108      	bne.n	800596c <_dtoa_r+0x6bc>
 800595a:	459b      	cmp	fp, r3
 800595c:	d10a      	bne.n	8005974 <_dtoa_r+0x6c4>
 800595e:	9b08      	ldr	r3, [sp, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	9308      	str	r3, [sp, #32]
 8005964:	2330      	movs	r3, #48	; 0x30
 8005966:	f88b 3000 	strb.w	r3, [fp]
 800596a:	465b      	mov	r3, fp
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	3201      	adds	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e78c      	b.n	800588e <_dtoa_r+0x5de>
 8005974:	461d      	mov	r5, r3
 8005976:	e7ea      	b.n	800594e <_dtoa_r+0x69e>
 8005978:	2200      	movs	r2, #0
 800597a:	4b9b      	ldr	r3, [pc, #620]	; (8005be8 <_dtoa_r+0x938>)
 800597c:	f7fa fe64 	bl	8000648 <__aeabi_dmul>
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4606      	mov	r6, r0
 8005986:	460f      	mov	r7, r1
 8005988:	f7fb f8c6 	bl	8000b18 <__aeabi_dcmpeq>
 800598c:	2800      	cmp	r0, #0
 800598e:	d09a      	beq.n	80058c6 <_dtoa_r+0x616>
 8005990:	e7cb      	b.n	800592a <_dtoa_r+0x67a>
 8005992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005994:	2a00      	cmp	r2, #0
 8005996:	f000 808b 	beq.w	8005ab0 <_dtoa_r+0x800>
 800599a:	9a06      	ldr	r2, [sp, #24]
 800599c:	2a01      	cmp	r2, #1
 800599e:	dc6e      	bgt.n	8005a7e <_dtoa_r+0x7ce>
 80059a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d067      	beq.n	8005a76 <_dtoa_r+0x7c6>
 80059a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059aa:	9f07      	ldr	r7, [sp, #28]
 80059ac:	9d05      	ldr	r5, [sp, #20]
 80059ae:	9a05      	ldr	r2, [sp, #20]
 80059b0:	2101      	movs	r1, #1
 80059b2:	441a      	add	r2, r3
 80059b4:	4620      	mov	r0, r4
 80059b6:	9205      	str	r2, [sp, #20]
 80059b8:	4498      	add	r8, r3
 80059ba:	f000 fb1b 	bl	8005ff4 <__i2b>
 80059be:	4606      	mov	r6, r0
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	dd0c      	ble.n	80059de <_dtoa_r+0x72e>
 80059c4:	f1b8 0f00 	cmp.w	r8, #0
 80059c8:	dd09      	ble.n	80059de <_dtoa_r+0x72e>
 80059ca:	4545      	cmp	r5, r8
 80059cc:	9a05      	ldr	r2, [sp, #20]
 80059ce:	462b      	mov	r3, r5
 80059d0:	bfa8      	it	ge
 80059d2:	4643      	movge	r3, r8
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	9205      	str	r2, [sp, #20]
 80059d8:	1aed      	subs	r5, r5, r3
 80059da:	eba8 0803 	sub.w	r8, r8, r3
 80059de:	9b07      	ldr	r3, [sp, #28]
 80059e0:	b1eb      	cbz	r3, 8005a1e <_dtoa_r+0x76e>
 80059e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d067      	beq.n	8005ab8 <_dtoa_r+0x808>
 80059e8:	b18f      	cbz	r7, 8005a0e <_dtoa_r+0x75e>
 80059ea:	4631      	mov	r1, r6
 80059ec:	463a      	mov	r2, r7
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fba0 	bl	8006134 <__pow5mult>
 80059f4:	9a04      	ldr	r2, [sp, #16]
 80059f6:	4601      	mov	r1, r0
 80059f8:	4606      	mov	r6, r0
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fb03 	bl	8006006 <__multiply>
 8005a00:	9904      	ldr	r1, [sp, #16]
 8005a02:	9008      	str	r0, [sp, #32]
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fa55 	bl	8005eb4 <_Bfree>
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	1bda      	subs	r2, r3, r7
 8005a12:	d004      	beq.n	8005a1e <_dtoa_r+0x76e>
 8005a14:	9904      	ldr	r1, [sp, #16]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fb8c 	bl	8006134 <__pow5mult>
 8005a1c:	9004      	str	r0, [sp, #16]
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 fae7 	bl	8005ff4 <__i2b>
 8005a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a28:	4607      	mov	r7, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 81d0 	beq.w	8005dd0 <_dtoa_r+0xb20>
 8005a30:	461a      	mov	r2, r3
 8005a32:	4601      	mov	r1, r0
 8005a34:	4620      	mov	r0, r4
 8005a36:	f000 fb7d 	bl	8006134 <__pow5mult>
 8005a3a:	9b06      	ldr	r3, [sp, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	4607      	mov	r7, r0
 8005a40:	dc40      	bgt.n	8005ac4 <_dtoa_r+0x814>
 8005a42:	9b00      	ldr	r3, [sp, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d139      	bne.n	8005abc <_dtoa_r+0x80c>
 8005a48:	9b01      	ldr	r3, [sp, #4]
 8005a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d136      	bne.n	8005ac0 <_dtoa_r+0x810>
 8005a52:	9b01      	ldr	r3, [sp, #4]
 8005a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a58:	0d1b      	lsrs	r3, r3, #20
 8005a5a:	051b      	lsls	r3, r3, #20
 8005a5c:	b12b      	cbz	r3, 8005a6a <_dtoa_r+0x7ba>
 8005a5e:	9b05      	ldr	r3, [sp, #20]
 8005a60:	3301      	adds	r3, #1
 8005a62:	9305      	str	r3, [sp, #20]
 8005a64:	f108 0801 	add.w	r8, r8, #1
 8005a68:	2301      	movs	r3, #1
 8005a6a:	9307      	str	r3, [sp, #28]
 8005a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d12a      	bne.n	8005ac8 <_dtoa_r+0x818>
 8005a72:	2001      	movs	r0, #1
 8005a74:	e030      	b.n	8005ad8 <_dtoa_r+0x828>
 8005a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a7c:	e795      	b.n	80059aa <_dtoa_r+0x6fa>
 8005a7e:	9b07      	ldr	r3, [sp, #28]
 8005a80:	f109 37ff 	add.w	r7, r9, #4294967295
 8005a84:	42bb      	cmp	r3, r7
 8005a86:	bfbf      	itttt	lt
 8005a88:	9b07      	ldrlt	r3, [sp, #28]
 8005a8a:	9707      	strlt	r7, [sp, #28]
 8005a8c:	1afa      	sublt	r2, r7, r3
 8005a8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a90:	bfbb      	ittet	lt
 8005a92:	189b      	addlt	r3, r3, r2
 8005a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a96:	1bdf      	subge	r7, r3, r7
 8005a98:	2700      	movlt	r7, #0
 8005a9a:	f1b9 0f00 	cmp.w	r9, #0
 8005a9e:	bfb5      	itete	lt
 8005aa0:	9b05      	ldrlt	r3, [sp, #20]
 8005aa2:	9d05      	ldrge	r5, [sp, #20]
 8005aa4:	eba3 0509 	sublt.w	r5, r3, r9
 8005aa8:	464b      	movge	r3, r9
 8005aaa:	bfb8      	it	lt
 8005aac:	2300      	movlt	r3, #0
 8005aae:	e77e      	b.n	80059ae <_dtoa_r+0x6fe>
 8005ab0:	9f07      	ldr	r7, [sp, #28]
 8005ab2:	9d05      	ldr	r5, [sp, #20]
 8005ab4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ab6:	e783      	b.n	80059c0 <_dtoa_r+0x710>
 8005ab8:	9a07      	ldr	r2, [sp, #28]
 8005aba:	e7ab      	b.n	8005a14 <_dtoa_r+0x764>
 8005abc:	2300      	movs	r3, #0
 8005abe:	e7d4      	b.n	8005a6a <_dtoa_r+0x7ba>
 8005ac0:	9b00      	ldr	r3, [sp, #0]
 8005ac2:	e7d2      	b.n	8005a6a <_dtoa_r+0x7ba>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9307      	str	r3, [sp, #28]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005ace:	6918      	ldr	r0, [r3, #16]
 8005ad0:	f000 fa42 	bl	8005f58 <__hi0bits>
 8005ad4:	f1c0 0020 	rsb	r0, r0, #32
 8005ad8:	4440      	add	r0, r8
 8005ada:	f010 001f 	ands.w	r0, r0, #31
 8005ade:	d047      	beq.n	8005b70 <_dtoa_r+0x8c0>
 8005ae0:	f1c0 0320 	rsb	r3, r0, #32
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	dd3b      	ble.n	8005b60 <_dtoa_r+0x8b0>
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	f1c0 001c 	rsb	r0, r0, #28
 8005aee:	4403      	add	r3, r0
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	4405      	add	r5, r0
 8005af4:	4480      	add	r8, r0
 8005af6:	9b05      	ldr	r3, [sp, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dd05      	ble.n	8005b08 <_dtoa_r+0x858>
 8005afc:	461a      	mov	r2, r3
 8005afe:	9904      	ldr	r1, [sp, #16]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fb65 	bl	80061d0 <__lshift>
 8005b06:	9004      	str	r0, [sp, #16]
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	dd05      	ble.n	8005b1a <_dtoa_r+0x86a>
 8005b0e:	4639      	mov	r1, r7
 8005b10:	4642      	mov	r2, r8
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 fb5c 	bl	80061d0 <__lshift>
 8005b18:	4607      	mov	r7, r0
 8005b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b1c:	b353      	cbz	r3, 8005b74 <_dtoa_r+0x8c4>
 8005b1e:	4639      	mov	r1, r7
 8005b20:	9804      	ldr	r0, [sp, #16]
 8005b22:	f000 fba9 	bl	8006278 <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	da24      	bge.n	8005b74 <_dtoa_r+0x8c4>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	220a      	movs	r2, #10
 8005b2e:	9904      	ldr	r1, [sp, #16]
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 f9d6 	bl	8005ee2 <__multadd>
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	9004      	str	r0, [sp, #16]
 8005b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 814d 	beq.w	8005dde <_dtoa_r+0xb2e>
 8005b44:	2300      	movs	r3, #0
 8005b46:	4631      	mov	r1, r6
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 f9c9 	bl	8005ee2 <__multadd>
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	4606      	mov	r6, r0
 8005b56:	dc4f      	bgt.n	8005bf8 <_dtoa_r+0x948>
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	dd4c      	ble.n	8005bf8 <_dtoa_r+0x948>
 8005b5e:	e011      	b.n	8005b84 <_dtoa_r+0x8d4>
 8005b60:	d0c9      	beq.n	8005af6 <_dtoa_r+0x846>
 8005b62:	9a05      	ldr	r2, [sp, #20]
 8005b64:	331c      	adds	r3, #28
 8005b66:	441a      	add	r2, r3
 8005b68:	9205      	str	r2, [sp, #20]
 8005b6a:	441d      	add	r5, r3
 8005b6c:	4498      	add	r8, r3
 8005b6e:	e7c2      	b.n	8005af6 <_dtoa_r+0x846>
 8005b70:	4603      	mov	r3, r0
 8005b72:	e7f6      	b.n	8005b62 <_dtoa_r+0x8b2>
 8005b74:	f1b9 0f00 	cmp.w	r9, #0
 8005b78:	dc38      	bgt.n	8005bec <_dtoa_r+0x93c>
 8005b7a:	9b06      	ldr	r3, [sp, #24]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	dd35      	ble.n	8005bec <_dtoa_r+0x93c>
 8005b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b84:	9b02      	ldr	r3, [sp, #8]
 8005b86:	b963      	cbnz	r3, 8005ba2 <_dtoa_r+0x8f2>
 8005b88:	4639      	mov	r1, r7
 8005b8a:	2205      	movs	r2, #5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f9a8 	bl	8005ee2 <__multadd>
 8005b92:	4601      	mov	r1, r0
 8005b94:	4607      	mov	r7, r0
 8005b96:	9804      	ldr	r0, [sp, #16]
 8005b98:	f000 fb6e 	bl	8006278 <__mcmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	f73f adcc 	bgt.w	800573a <_dtoa_r+0x48a>
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	465d      	mov	r5, fp
 8005ba6:	ea6f 0a03 	mvn.w	sl, r3
 8005baa:	f04f 0900 	mov.w	r9, #0
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f97f 	bl	8005eb4 <_Bfree>
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f43f aeb7 	beq.w	800592a <_dtoa_r+0x67a>
 8005bbc:	f1b9 0f00 	cmp.w	r9, #0
 8005bc0:	d005      	beq.n	8005bce <_dtoa_r+0x91e>
 8005bc2:	45b1      	cmp	r9, r6
 8005bc4:	d003      	beq.n	8005bce <_dtoa_r+0x91e>
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 f973 	bl	8005eb4 <_Bfree>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 f96f 	bl	8005eb4 <_Bfree>
 8005bd6:	e6a8      	b.n	800592a <_dtoa_r+0x67a>
 8005bd8:	2700      	movs	r7, #0
 8005bda:	463e      	mov	r6, r7
 8005bdc:	e7e1      	b.n	8005ba2 <_dtoa_r+0x8f2>
 8005bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005be2:	463e      	mov	r6, r7
 8005be4:	e5a9      	b.n	800573a <_dtoa_r+0x48a>
 8005be6:	bf00      	nop
 8005be8:	40240000 	.word	0x40240000
 8005bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80fa 	beq.w	8005dec <_dtoa_r+0xb3c>
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	dd05      	ble.n	8005c08 <_dtoa_r+0x958>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 fae5 	bl	80061d0 <__lshift>
 8005c06:	4606      	mov	r6, r0
 8005c08:	9b07      	ldr	r3, [sp, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d04c      	beq.n	8005ca8 <_dtoa_r+0x9f8>
 8005c0e:	6871      	ldr	r1, [r6, #4]
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f91b 	bl	8005e4c <_Balloc>
 8005c16:	6932      	ldr	r2, [r6, #16]
 8005c18:	3202      	adds	r2, #2
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	f106 010c 	add.w	r1, r6, #12
 8005c22:	300c      	adds	r0, #12
 8005c24:	f7fe fe14 	bl	8004850 <memcpy>
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 facf 	bl	80061d0 <__lshift>
 8005c32:	9b00      	ldr	r3, [sp, #0]
 8005c34:	f8cd b014 	str.w	fp, [sp, #20]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	46b1      	mov	r9, r6
 8005c3e:	9307      	str	r3, [sp, #28]
 8005c40:	4606      	mov	r6, r0
 8005c42:	4639      	mov	r1, r7
 8005c44:	9804      	ldr	r0, [sp, #16]
 8005c46:	f7ff faa7 	bl	8005198 <quorem>
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c52:	9804      	ldr	r0, [sp, #16]
 8005c54:	f000 fb10 	bl	8006278 <__mcmp>
 8005c58:	4632      	mov	r2, r6
 8005c5a:	9000      	str	r0, [sp, #0]
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 fb24 	bl	80062ac <__mdiff>
 8005c64:	68c3      	ldr	r3, [r0, #12]
 8005c66:	4602      	mov	r2, r0
 8005c68:	bb03      	cbnz	r3, 8005cac <_dtoa_r+0x9fc>
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	9008      	str	r0, [sp, #32]
 8005c6e:	9804      	ldr	r0, [sp, #16]
 8005c70:	f000 fb02 	bl	8006278 <__mcmp>
 8005c74:	9a08      	ldr	r2, [sp, #32]
 8005c76:	4603      	mov	r3, r0
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	f000 f919 	bl	8005eb4 <_Bfree>
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	b9a3      	cbnz	r3, 8005cb0 <_dtoa_r+0xa00>
 8005c86:	9a06      	ldr	r2, [sp, #24]
 8005c88:	b992      	cbnz	r2, 8005cb0 <_dtoa_r+0xa00>
 8005c8a:	9a07      	ldr	r2, [sp, #28]
 8005c8c:	b982      	cbnz	r2, 8005cb0 <_dtoa_r+0xa00>
 8005c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c92:	d029      	beq.n	8005ce8 <_dtoa_r+0xa38>
 8005c94:	9b00      	ldr	r3, [sp, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dd01      	ble.n	8005c9e <_dtoa_r+0x9ee>
 8005c9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c9e:	9b05      	ldr	r3, [sp, #20]
 8005ca0:	1c5d      	adds	r5, r3, #1
 8005ca2:	f883 8000 	strb.w	r8, [r3]
 8005ca6:	e782      	b.n	8005bae <_dtoa_r+0x8fe>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	e7c2      	b.n	8005c32 <_dtoa_r+0x982>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e7e3      	b.n	8005c78 <_dtoa_r+0x9c8>
 8005cb0:	9a00      	ldr	r2, [sp, #0]
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	db04      	blt.n	8005cc0 <_dtoa_r+0xa10>
 8005cb6:	d125      	bne.n	8005d04 <_dtoa_r+0xa54>
 8005cb8:	9a06      	ldr	r2, [sp, #24]
 8005cba:	bb1a      	cbnz	r2, 8005d04 <_dtoa_r+0xa54>
 8005cbc:	9a07      	ldr	r2, [sp, #28]
 8005cbe:	bb0a      	cbnz	r2, 8005d04 <_dtoa_r+0xa54>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	ddec      	ble.n	8005c9e <_dtoa_r+0x9ee>
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	9904      	ldr	r1, [sp, #16]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fa81 	bl	80061d0 <__lshift>
 8005cce:	4639      	mov	r1, r7
 8005cd0:	9004      	str	r0, [sp, #16]
 8005cd2:	f000 fad1 	bl	8006278 <__mcmp>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	dc03      	bgt.n	8005ce2 <_dtoa_r+0xa32>
 8005cda:	d1e0      	bne.n	8005c9e <_dtoa_r+0x9ee>
 8005cdc:	f018 0f01 	tst.w	r8, #1
 8005ce0:	d0dd      	beq.n	8005c9e <_dtoa_r+0x9ee>
 8005ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ce6:	d1d8      	bne.n	8005c9a <_dtoa_r+0x9ea>
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	9a05      	ldr	r2, [sp, #20]
 8005cec:	1c5d      	adds	r5, r3, #1
 8005cee:	2339      	movs	r3, #57	; 0x39
 8005cf0:	7013      	strb	r3, [r2, #0]
 8005cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cf6:	2b39      	cmp	r3, #57	; 0x39
 8005cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005cfc:	d04f      	beq.n	8005d9e <_dtoa_r+0xaee>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	7013      	strb	r3, [r2, #0]
 8005d02:	e754      	b.n	8005bae <_dtoa_r+0x8fe>
 8005d04:	9a05      	ldr	r2, [sp, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f102 0501 	add.w	r5, r2, #1
 8005d0c:	dd06      	ble.n	8005d1c <_dtoa_r+0xa6c>
 8005d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d12:	d0e9      	beq.n	8005ce8 <_dtoa_r+0xa38>
 8005d14:	f108 0801 	add.w	r8, r8, #1
 8005d18:	9b05      	ldr	r3, [sp, #20]
 8005d1a:	e7c2      	b.n	8005ca2 <_dtoa_r+0x9f2>
 8005d1c:	9a02      	ldr	r2, [sp, #8]
 8005d1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005d22:	eba5 030b 	sub.w	r3, r5, fp
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d021      	beq.n	8005d6e <_dtoa_r+0xabe>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	9904      	ldr	r1, [sp, #16]
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 f8d6 	bl	8005ee2 <__multadd>
 8005d36:	45b1      	cmp	r9, r6
 8005d38:	9004      	str	r0, [sp, #16]
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 020a 	mov.w	r2, #10
 8005d42:	4649      	mov	r1, r9
 8005d44:	4620      	mov	r0, r4
 8005d46:	d105      	bne.n	8005d54 <_dtoa_r+0xaa4>
 8005d48:	f000 f8cb 	bl	8005ee2 <__multadd>
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	4606      	mov	r6, r0
 8005d50:	9505      	str	r5, [sp, #20]
 8005d52:	e776      	b.n	8005c42 <_dtoa_r+0x992>
 8005d54:	f000 f8c5 	bl	8005ee2 <__multadd>
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4681      	mov	r9, r0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	220a      	movs	r2, #10
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 f8be 	bl	8005ee2 <__multadd>
 8005d66:	4606      	mov	r6, r0
 8005d68:	e7f2      	b.n	8005d50 <_dtoa_r+0xaa0>
 8005d6a:	f04f 0900 	mov.w	r9, #0
 8005d6e:	2201      	movs	r2, #1
 8005d70:	9904      	ldr	r1, [sp, #16]
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fa2c 	bl	80061d0 <__lshift>
 8005d78:	4639      	mov	r1, r7
 8005d7a:	9004      	str	r0, [sp, #16]
 8005d7c:	f000 fa7c 	bl	8006278 <__mcmp>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	dcb6      	bgt.n	8005cf2 <_dtoa_r+0xa42>
 8005d84:	d102      	bne.n	8005d8c <_dtoa_r+0xadc>
 8005d86:	f018 0f01 	tst.w	r8, #1
 8005d8a:	d1b2      	bne.n	8005cf2 <_dtoa_r+0xa42>
 8005d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d90:	2b30      	cmp	r3, #48	; 0x30
 8005d92:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d96:	f47f af0a 	bne.w	8005bae <_dtoa_r+0x8fe>
 8005d9a:	4615      	mov	r5, r2
 8005d9c:	e7f6      	b.n	8005d8c <_dtoa_r+0xadc>
 8005d9e:	4593      	cmp	fp, r2
 8005da0:	d105      	bne.n	8005dae <_dtoa_r+0xafe>
 8005da2:	2331      	movs	r3, #49	; 0x31
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	f88b 3000 	strb.w	r3, [fp]
 8005dac:	e6ff      	b.n	8005bae <_dtoa_r+0x8fe>
 8005dae:	4615      	mov	r5, r2
 8005db0:	e79f      	b.n	8005cf2 <_dtoa_r+0xa42>
 8005db2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005e18 <_dtoa_r+0xb68>
 8005db6:	e007      	b.n	8005dc8 <_dtoa_r+0xb18>
 8005db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005e1c <_dtoa_r+0xb6c>
 8005dbe:	b11b      	cbz	r3, 8005dc8 <_dtoa_r+0xb18>
 8005dc0:	f10b 0308 	add.w	r3, fp, #8
 8005dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4658      	mov	r0, fp
 8005dca:	b017      	add	sp, #92	; 0x5c
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	9b06      	ldr	r3, [sp, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	f77f ae35 	ble.w	8005a42 <_dtoa_r+0x792>
 8005dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	e649      	b.n	8005a72 <_dtoa_r+0x7c2>
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc03      	bgt.n	8005dec <_dtoa_r+0xb3c>
 8005de4:	9b06      	ldr	r3, [sp, #24]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	f73f aecc 	bgt.w	8005b84 <_dtoa_r+0x8d4>
 8005dec:	465d      	mov	r5, fp
 8005dee:	4639      	mov	r1, r7
 8005df0:	9804      	ldr	r0, [sp, #16]
 8005df2:	f7ff f9d1 	bl	8005198 <quorem>
 8005df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8005dfe:	9a02      	ldr	r2, [sp, #8]
 8005e00:	eba5 030b 	sub.w	r3, r5, fp
 8005e04:	429a      	cmp	r2, r3
 8005e06:	ddb0      	ble.n	8005d6a <_dtoa_r+0xaba>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	220a      	movs	r2, #10
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f867 	bl	8005ee2 <__multadd>
 8005e14:	9004      	str	r0, [sp, #16]
 8005e16:	e7ea      	b.n	8005dee <_dtoa_r+0xb3e>
 8005e18:	0800833c 	.word	0x0800833c
 8005e1c:	08008360 	.word	0x08008360

08005e20 <_localeconv_r>:
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <_localeconv_r+0x14>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a18      	ldr	r0, [r3, #32]
 8005e26:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <_localeconv_r+0x18>)
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	bf08      	it	eq
 8005e2c:	4618      	moveq	r0, r3
 8005e2e:	30f0      	adds	r0, #240	; 0xf0
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000014 	.word	0x20000014
 8005e38:	20000078 	.word	0x20000078

08005e3c <malloc>:
 8005e3c:	4b02      	ldr	r3, [pc, #8]	; (8005e48 <malloc+0xc>)
 8005e3e:	4601      	mov	r1, r0
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f000 bb3b 	b.w	80064bc <_malloc_r>
 8005e46:	bf00      	nop
 8005e48:	20000014 	.word	0x20000014

08005e4c <_Balloc>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e50:	4604      	mov	r4, r0
 8005e52:	460e      	mov	r6, r1
 8005e54:	b93d      	cbnz	r5, 8005e66 <_Balloc+0x1a>
 8005e56:	2010      	movs	r0, #16
 8005e58:	f7ff fff0 	bl	8005e3c <malloc>
 8005e5c:	6260      	str	r0, [r4, #36]	; 0x24
 8005e5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e62:	6005      	str	r5, [r0, #0]
 8005e64:	60c5      	str	r5, [r0, #12]
 8005e66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e68:	68eb      	ldr	r3, [r5, #12]
 8005e6a:	b183      	cbz	r3, 8005e8e <_Balloc+0x42>
 8005e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e74:	b9b8      	cbnz	r0, 8005ea6 <_Balloc+0x5a>
 8005e76:	2101      	movs	r1, #1
 8005e78:	fa01 f506 	lsl.w	r5, r1, r6
 8005e7c:	1d6a      	adds	r2, r5, #5
 8005e7e:	0092      	lsls	r2, r2, #2
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fabf 	bl	8006404 <_calloc_r>
 8005e86:	b160      	cbz	r0, 8005ea2 <_Balloc+0x56>
 8005e88:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e8c:	e00e      	b.n	8005eac <_Balloc+0x60>
 8005e8e:	2221      	movs	r2, #33	; 0x21
 8005e90:	2104      	movs	r1, #4
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 fab6 	bl	8006404 <_calloc_r>
 8005e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9a:	60e8      	str	r0, [r5, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e4      	bne.n	8005e6c <_Balloc+0x20>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	6802      	ldr	r2, [r0, #0]
 8005ea8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005eac:	2300      	movs	r3, #0
 8005eae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005eb2:	e7f7      	b.n	8005ea4 <_Balloc+0x58>

08005eb4 <_Bfree>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005eb8:	4606      	mov	r6, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	b93c      	cbnz	r4, 8005ece <_Bfree+0x1a>
 8005ebe:	2010      	movs	r0, #16
 8005ec0:	f7ff ffbc 	bl	8005e3c <malloc>
 8005ec4:	6270      	str	r0, [r6, #36]	; 0x24
 8005ec6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005eca:	6004      	str	r4, [r0, #0]
 8005ecc:	60c4      	str	r4, [r0, #12]
 8005ece:	b13d      	cbz	r5, 8005ee0 <_Bfree+0x2c>
 8005ed0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ed2:	686a      	ldr	r2, [r5, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eda:	6029      	str	r1, [r5, #0]
 8005edc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}

08005ee2 <__multadd>:
 8005ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	690d      	ldr	r5, [r1, #16]
 8005ee8:	461f      	mov	r7, r3
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	f101 0c14 	add.w	ip, r1, #20
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8dc 0000 	ldr.w	r0, [ip]
 8005ef8:	b281      	uxth	r1, r0
 8005efa:	fb02 7101 	mla	r1, r2, r1, r7
 8005efe:	0c0f      	lsrs	r7, r1, #16
 8005f00:	0c00      	lsrs	r0, r0, #16
 8005f02:	fb02 7000 	mla	r0, r2, r0, r7
 8005f06:	b289      	uxth	r1, r1
 8005f08:	3301      	adds	r3, #1
 8005f0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f0e:	429d      	cmp	r5, r3
 8005f10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f14:	f84c 1b04 	str.w	r1, [ip], #4
 8005f18:	dcec      	bgt.n	8005ef4 <__multadd+0x12>
 8005f1a:	b1d7      	cbz	r7, 8005f52 <__multadd+0x70>
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	42ab      	cmp	r3, r5
 8005f20:	dc12      	bgt.n	8005f48 <__multadd+0x66>
 8005f22:	6861      	ldr	r1, [r4, #4]
 8005f24:	4630      	mov	r0, r6
 8005f26:	3101      	adds	r1, #1
 8005f28:	f7ff ff90 	bl	8005e4c <_Balloc>
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	3202      	adds	r2, #2
 8005f30:	f104 010c 	add.w	r1, r4, #12
 8005f34:	4680      	mov	r8, r0
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	300c      	adds	r0, #12
 8005f3a:	f7fe fc89 	bl	8004850 <memcpy>
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7ff ffb7 	bl	8005eb4 <_Bfree>
 8005f46:	4644      	mov	r4, r8
 8005f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	615f      	str	r7, [r3, #20]
 8005f50:	6125      	str	r5, [r4, #16]
 8005f52:	4620      	mov	r0, r4
 8005f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f58 <__hi0bits>:
 8005f58:	0c02      	lsrs	r2, r0, #16
 8005f5a:	0412      	lsls	r2, r2, #16
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	b9b2      	cbnz	r2, 8005f8e <__hi0bits+0x36>
 8005f60:	0403      	lsls	r3, r0, #16
 8005f62:	2010      	movs	r0, #16
 8005f64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f68:	bf04      	itt	eq
 8005f6a:	021b      	lsleq	r3, r3, #8
 8005f6c:	3008      	addeq	r0, #8
 8005f6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f72:	bf04      	itt	eq
 8005f74:	011b      	lsleq	r3, r3, #4
 8005f76:	3004      	addeq	r0, #4
 8005f78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f7c:	bf04      	itt	eq
 8005f7e:	009b      	lsleq	r3, r3, #2
 8005f80:	3002      	addeq	r0, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db06      	blt.n	8005f94 <__hi0bits+0x3c>
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	d503      	bpl.n	8005f92 <__hi0bits+0x3a>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	4770      	bx	lr
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7e8      	b.n	8005f64 <__hi0bits+0xc>
 8005f92:	2020      	movs	r0, #32
 8005f94:	4770      	bx	lr

08005f96 <__lo0bits>:
 8005f96:	6803      	ldr	r3, [r0, #0]
 8005f98:	f013 0207 	ands.w	r2, r3, #7
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	d00b      	beq.n	8005fb8 <__lo0bits+0x22>
 8005fa0:	07da      	lsls	r2, r3, #31
 8005fa2:	d423      	bmi.n	8005fec <__lo0bits+0x56>
 8005fa4:	0798      	lsls	r0, r3, #30
 8005fa6:	bf49      	itett	mi
 8005fa8:	085b      	lsrmi	r3, r3, #1
 8005faa:	089b      	lsrpl	r3, r3, #2
 8005fac:	2001      	movmi	r0, #1
 8005fae:	600b      	strmi	r3, [r1, #0]
 8005fb0:	bf5c      	itt	pl
 8005fb2:	600b      	strpl	r3, [r1, #0]
 8005fb4:	2002      	movpl	r0, #2
 8005fb6:	4770      	bx	lr
 8005fb8:	b298      	uxth	r0, r3
 8005fba:	b9a8      	cbnz	r0, 8005fe8 <__lo0bits+0x52>
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fc4:	bf04      	itt	eq
 8005fc6:	0a1b      	lsreq	r3, r3, #8
 8005fc8:	3008      	addeq	r0, #8
 8005fca:	071a      	lsls	r2, r3, #28
 8005fcc:	bf04      	itt	eq
 8005fce:	091b      	lsreq	r3, r3, #4
 8005fd0:	3004      	addeq	r0, #4
 8005fd2:	079a      	lsls	r2, r3, #30
 8005fd4:	bf04      	itt	eq
 8005fd6:	089b      	lsreq	r3, r3, #2
 8005fd8:	3002      	addeq	r0, #2
 8005fda:	07da      	lsls	r2, r3, #31
 8005fdc:	d402      	bmi.n	8005fe4 <__lo0bits+0x4e>
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	d006      	beq.n	8005ff0 <__lo0bits+0x5a>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	600b      	str	r3, [r1, #0]
 8005fe6:	4770      	bx	lr
 8005fe8:	4610      	mov	r0, r2
 8005fea:	e7e9      	b.n	8005fc0 <__lo0bits+0x2a>
 8005fec:	2000      	movs	r0, #0
 8005fee:	4770      	bx	lr
 8005ff0:	2020      	movs	r0, #32
 8005ff2:	4770      	bx	lr

08005ff4 <__i2b>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	f7ff ff27 	bl	8005e4c <_Balloc>
 8005ffe:	2201      	movs	r2, #1
 8006000:	6144      	str	r4, [r0, #20]
 8006002:	6102      	str	r2, [r0, #16]
 8006004:	bd10      	pop	{r4, pc}

08006006 <__multiply>:
 8006006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	4614      	mov	r4, r2
 800600c:	690a      	ldr	r2, [r1, #16]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	bfb8      	it	lt
 8006014:	460b      	movlt	r3, r1
 8006016:	4688      	mov	r8, r1
 8006018:	bfbc      	itt	lt
 800601a:	46a0      	movlt	r8, r4
 800601c:	461c      	movlt	r4, r3
 800601e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006022:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800602a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800602e:	eb07 0609 	add.w	r6, r7, r9
 8006032:	42b3      	cmp	r3, r6
 8006034:	bfb8      	it	lt
 8006036:	3101      	addlt	r1, #1
 8006038:	f7ff ff08 	bl	8005e4c <_Balloc>
 800603c:	f100 0514 	add.w	r5, r0, #20
 8006040:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006044:	462b      	mov	r3, r5
 8006046:	2200      	movs	r2, #0
 8006048:	4573      	cmp	r3, lr
 800604a:	d316      	bcc.n	800607a <__multiply+0x74>
 800604c:	f104 0214 	add.w	r2, r4, #20
 8006050:	f108 0114 	add.w	r1, r8, #20
 8006054:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006058:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	9201      	str	r2, [sp, #4]
 8006062:	4293      	cmp	r3, r2
 8006064:	d80c      	bhi.n	8006080 <__multiply+0x7a>
 8006066:	2e00      	cmp	r6, #0
 8006068:	dd03      	ble.n	8006072 <__multiply+0x6c>
 800606a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800606e:	2b00      	cmp	r3, #0
 8006070:	d05d      	beq.n	800612e <__multiply+0x128>
 8006072:	6106      	str	r6, [r0, #16]
 8006074:	b003      	add	sp, #12
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	f843 2b04 	str.w	r2, [r3], #4
 800607e:	e7e3      	b.n	8006048 <__multiply+0x42>
 8006080:	f8b2 b000 	ldrh.w	fp, [r2]
 8006084:	f1bb 0f00 	cmp.w	fp, #0
 8006088:	d023      	beq.n	80060d2 <__multiply+0xcc>
 800608a:	4689      	mov	r9, r1
 800608c:	46ac      	mov	ip, r5
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	f859 4b04 	ldr.w	r4, [r9], #4
 8006096:	f8dc a000 	ldr.w	sl, [ip]
 800609a:	b2a3      	uxth	r3, r4
 800609c:	fa1f fa8a 	uxth.w	sl, sl
 80060a0:	fb0b a303 	mla	r3, fp, r3, sl
 80060a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80060a8:	f8dc 4000 	ldr.w	r4, [ip]
 80060ac:	4443      	add	r3, r8
 80060ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80060b2:	fb0b 840a 	mla	r4, fp, sl, r8
 80060b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80060ba:	46e2      	mov	sl, ip
 80060bc:	b29b      	uxth	r3, r3
 80060be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060c2:	454f      	cmp	r7, r9
 80060c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80060c8:	f84a 3b04 	str.w	r3, [sl], #4
 80060cc:	d82b      	bhi.n	8006126 <__multiply+0x120>
 80060ce:	f8cc 8004 	str.w	r8, [ip, #4]
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80060d8:	3204      	adds	r2, #4
 80060da:	f1ba 0f00 	cmp.w	sl, #0
 80060de:	d020      	beq.n	8006122 <__multiply+0x11c>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	4689      	mov	r9, r1
 80060e4:	46a8      	mov	r8, r5
 80060e6:	f04f 0b00 	mov.w	fp, #0
 80060ea:	f8b9 c000 	ldrh.w	ip, [r9]
 80060ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80060f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80060f6:	445c      	add	r4, fp
 80060f8:	46c4      	mov	ip, r8
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006100:	f84c 3b04 	str.w	r3, [ip], #4
 8006104:	f859 3b04 	ldr.w	r3, [r9], #4
 8006108:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	fb0a b303 	mla	r3, sl, r3, fp
 8006112:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006116:	454f      	cmp	r7, r9
 8006118:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800611c:	d805      	bhi.n	800612a <__multiply+0x124>
 800611e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006122:	3504      	adds	r5, #4
 8006124:	e79b      	b.n	800605e <__multiply+0x58>
 8006126:	46d4      	mov	ip, sl
 8006128:	e7b3      	b.n	8006092 <__multiply+0x8c>
 800612a:	46e0      	mov	r8, ip
 800612c:	e7dd      	b.n	80060ea <__multiply+0xe4>
 800612e:	3e01      	subs	r6, #1
 8006130:	e799      	b.n	8006066 <__multiply+0x60>
	...

08006134 <__pow5mult>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	4615      	mov	r5, r2
 800613a:	f012 0203 	ands.w	r2, r2, #3
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	d007      	beq.n	8006154 <__pow5mult+0x20>
 8006144:	3a01      	subs	r2, #1
 8006146:	4c21      	ldr	r4, [pc, #132]	; (80061cc <__pow5mult+0x98>)
 8006148:	2300      	movs	r3, #0
 800614a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800614e:	f7ff fec8 	bl	8005ee2 <__multadd>
 8006152:	4607      	mov	r7, r0
 8006154:	10ad      	asrs	r5, r5, #2
 8006156:	d035      	beq.n	80061c4 <__pow5mult+0x90>
 8006158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800615a:	b93c      	cbnz	r4, 800616c <__pow5mult+0x38>
 800615c:	2010      	movs	r0, #16
 800615e:	f7ff fe6d 	bl	8005e3c <malloc>
 8006162:	6270      	str	r0, [r6, #36]	; 0x24
 8006164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006168:	6004      	str	r4, [r0, #0]
 800616a:	60c4      	str	r4, [r0, #12]
 800616c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006174:	b94c      	cbnz	r4, 800618a <__pow5mult+0x56>
 8006176:	f240 2171 	movw	r1, #625	; 0x271
 800617a:	4630      	mov	r0, r6
 800617c:	f7ff ff3a 	bl	8005ff4 <__i2b>
 8006180:	2300      	movs	r3, #0
 8006182:	f8c8 0008 	str.w	r0, [r8, #8]
 8006186:	4604      	mov	r4, r0
 8006188:	6003      	str	r3, [r0, #0]
 800618a:	f04f 0800 	mov.w	r8, #0
 800618e:	07eb      	lsls	r3, r5, #31
 8006190:	d50a      	bpl.n	80061a8 <__pow5mult+0x74>
 8006192:	4639      	mov	r1, r7
 8006194:	4622      	mov	r2, r4
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ff35 	bl	8006006 <__multiply>
 800619c:	4639      	mov	r1, r7
 800619e:	4681      	mov	r9, r0
 80061a0:	4630      	mov	r0, r6
 80061a2:	f7ff fe87 	bl	8005eb4 <_Bfree>
 80061a6:	464f      	mov	r7, r9
 80061a8:	106d      	asrs	r5, r5, #1
 80061aa:	d00b      	beq.n	80061c4 <__pow5mult+0x90>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	b938      	cbnz	r0, 80061c0 <__pow5mult+0x8c>
 80061b0:	4622      	mov	r2, r4
 80061b2:	4621      	mov	r1, r4
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff ff26 	bl	8006006 <__multiply>
 80061ba:	6020      	str	r0, [r4, #0]
 80061bc:	f8c0 8000 	str.w	r8, [r0]
 80061c0:	4604      	mov	r4, r0
 80061c2:	e7e4      	b.n	800618e <__pow5mult+0x5a>
 80061c4:	4638      	mov	r0, r7
 80061c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ca:	bf00      	nop
 80061cc:	08008460 	.word	0x08008460

080061d0 <__lshift>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	460c      	mov	r4, r1
 80061d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6849      	ldr	r1, [r1, #4]
 80061de:	eb0a 0903 	add.w	r9, sl, r3
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	4607      	mov	r7, r0
 80061e6:	4616      	mov	r6, r2
 80061e8:	f109 0501 	add.w	r5, r9, #1
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	db32      	blt.n	8006256 <__lshift+0x86>
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff fe2b 	bl	8005e4c <_Balloc>
 80061f6:	2300      	movs	r3, #0
 80061f8:	4680      	mov	r8, r0
 80061fa:	f100 0114 	add.w	r1, r0, #20
 80061fe:	461a      	mov	r2, r3
 8006200:	4553      	cmp	r3, sl
 8006202:	db2b      	blt.n	800625c <__lshift+0x8c>
 8006204:	6920      	ldr	r0, [r4, #16]
 8006206:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800620a:	f104 0314 	add.w	r3, r4, #20
 800620e:	f016 021f 	ands.w	r2, r6, #31
 8006212:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006216:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800621a:	d025      	beq.n	8006268 <__lshift+0x98>
 800621c:	f1c2 0e20 	rsb	lr, r2, #32
 8006220:	2000      	movs	r0, #0
 8006222:	681e      	ldr	r6, [r3, #0]
 8006224:	468a      	mov	sl, r1
 8006226:	4096      	lsls	r6, r2
 8006228:	4330      	orrs	r0, r6
 800622a:	f84a 0b04 	str.w	r0, [sl], #4
 800622e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006232:	459c      	cmp	ip, r3
 8006234:	fa20 f00e 	lsr.w	r0, r0, lr
 8006238:	d814      	bhi.n	8006264 <__lshift+0x94>
 800623a:	6048      	str	r0, [r1, #4]
 800623c:	b108      	cbz	r0, 8006242 <__lshift+0x72>
 800623e:	f109 0502 	add.w	r5, r9, #2
 8006242:	3d01      	subs	r5, #1
 8006244:	4638      	mov	r0, r7
 8006246:	f8c8 5010 	str.w	r5, [r8, #16]
 800624a:	4621      	mov	r1, r4
 800624c:	f7ff fe32 	bl	8005eb4 <_Bfree>
 8006250:	4640      	mov	r0, r8
 8006252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006256:	3101      	adds	r1, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	e7c7      	b.n	80061ec <__lshift+0x1c>
 800625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006260:	3301      	adds	r3, #1
 8006262:	e7cd      	b.n	8006200 <__lshift+0x30>
 8006264:	4651      	mov	r1, sl
 8006266:	e7dc      	b.n	8006222 <__lshift+0x52>
 8006268:	3904      	subs	r1, #4
 800626a:	f853 2b04 	ldr.w	r2, [r3], #4
 800626e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006272:	459c      	cmp	ip, r3
 8006274:	d8f9      	bhi.n	800626a <__lshift+0x9a>
 8006276:	e7e4      	b.n	8006242 <__lshift+0x72>

08006278 <__mcmp>:
 8006278:	6903      	ldr	r3, [r0, #16]
 800627a:	690a      	ldr	r2, [r1, #16]
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	b530      	push	{r4, r5, lr}
 8006280:	d10c      	bne.n	800629c <__mcmp+0x24>
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	3014      	adds	r0, #20
 8006286:	3114      	adds	r1, #20
 8006288:	1884      	adds	r4, r0, r2
 800628a:	4411      	add	r1, r2
 800628c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006290:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006294:	4295      	cmp	r5, r2
 8006296:	d003      	beq.n	80062a0 <__mcmp+0x28>
 8006298:	d305      	bcc.n	80062a6 <__mcmp+0x2e>
 800629a:	2301      	movs	r3, #1
 800629c:	4618      	mov	r0, r3
 800629e:	bd30      	pop	{r4, r5, pc}
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d3f3      	bcc.n	800628c <__mcmp+0x14>
 80062a4:	e7fa      	b.n	800629c <__mcmp+0x24>
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e7f7      	b.n	800629c <__mcmp+0x24>

080062ac <__mdiff>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	460d      	mov	r5, r1
 80062b2:	4607      	mov	r7, r0
 80062b4:	4611      	mov	r1, r2
 80062b6:	4628      	mov	r0, r5
 80062b8:	4614      	mov	r4, r2
 80062ba:	f7ff ffdd 	bl	8006278 <__mcmp>
 80062be:	1e06      	subs	r6, r0, #0
 80062c0:	d108      	bne.n	80062d4 <__mdiff+0x28>
 80062c2:	4631      	mov	r1, r6
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff fdc1 	bl	8005e4c <_Balloc>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80062d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d4:	bfa4      	itt	ge
 80062d6:	4623      	movge	r3, r4
 80062d8:	462c      	movge	r4, r5
 80062da:	4638      	mov	r0, r7
 80062dc:	6861      	ldr	r1, [r4, #4]
 80062de:	bfa6      	itte	ge
 80062e0:	461d      	movge	r5, r3
 80062e2:	2600      	movge	r6, #0
 80062e4:	2601      	movlt	r6, #1
 80062e6:	f7ff fdb1 	bl	8005e4c <_Balloc>
 80062ea:	692b      	ldr	r3, [r5, #16]
 80062ec:	60c6      	str	r6, [r0, #12]
 80062ee:	6926      	ldr	r6, [r4, #16]
 80062f0:	f105 0914 	add.w	r9, r5, #20
 80062f4:	f104 0214 	add.w	r2, r4, #20
 80062f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006300:	f100 0514 	add.w	r5, r0, #20
 8006304:	f04f 0e00 	mov.w	lr, #0
 8006308:	f852 ab04 	ldr.w	sl, [r2], #4
 800630c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006310:	fa1e f18a 	uxtah	r1, lr, sl
 8006314:	b2a3      	uxth	r3, r4
 8006316:	1ac9      	subs	r1, r1, r3
 8006318:	0c23      	lsrs	r3, r4, #16
 800631a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800631e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006322:	b289      	uxth	r1, r1
 8006324:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006328:	45c8      	cmp	r8, r9
 800632a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800632e:	4694      	mov	ip, r2
 8006330:	f845 3b04 	str.w	r3, [r5], #4
 8006334:	d8e8      	bhi.n	8006308 <__mdiff+0x5c>
 8006336:	45bc      	cmp	ip, r7
 8006338:	d304      	bcc.n	8006344 <__mdiff+0x98>
 800633a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800633e:	b183      	cbz	r3, 8006362 <__mdiff+0xb6>
 8006340:	6106      	str	r6, [r0, #16]
 8006342:	e7c5      	b.n	80062d0 <__mdiff+0x24>
 8006344:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006348:	fa1e f381 	uxtah	r3, lr, r1
 800634c:	141a      	asrs	r2, r3, #16
 800634e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006358:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800635c:	f845 3b04 	str.w	r3, [r5], #4
 8006360:	e7e9      	b.n	8006336 <__mdiff+0x8a>
 8006362:	3e01      	subs	r6, #1
 8006364:	e7e9      	b.n	800633a <__mdiff+0x8e>

08006366 <__d2b>:
 8006366:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800636a:	460e      	mov	r6, r1
 800636c:	2101      	movs	r1, #1
 800636e:	ec59 8b10 	vmov	r8, r9, d0
 8006372:	4615      	mov	r5, r2
 8006374:	f7ff fd6a 	bl	8005e4c <_Balloc>
 8006378:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800637c:	4607      	mov	r7, r0
 800637e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006382:	bb34      	cbnz	r4, 80063d2 <__d2b+0x6c>
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f1b8 0300 	subs.w	r3, r8, #0
 800638a:	d027      	beq.n	80063dc <__d2b+0x76>
 800638c:	a802      	add	r0, sp, #8
 800638e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006392:	f7ff fe00 	bl	8005f96 <__lo0bits>
 8006396:	9900      	ldr	r1, [sp, #0]
 8006398:	b1f0      	cbz	r0, 80063d8 <__d2b+0x72>
 800639a:	9a01      	ldr	r2, [sp, #4]
 800639c:	f1c0 0320 	rsb	r3, r0, #32
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	430b      	orrs	r3, r1
 80063a6:	40c2      	lsrs	r2, r0
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2102      	movne	r1, #2
 80063b6:	2101      	moveq	r1, #1
 80063b8:	6139      	str	r1, [r7, #16]
 80063ba:	b1c4      	cbz	r4, 80063ee <__d2b+0x88>
 80063bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80063c0:	4404      	add	r4, r0
 80063c2:	6034      	str	r4, [r6, #0]
 80063c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063c8:	6028      	str	r0, [r5, #0]
 80063ca:	4638      	mov	r0, r7
 80063cc:	b003      	add	sp, #12
 80063ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d6:	e7d5      	b.n	8006384 <__d2b+0x1e>
 80063d8:	6179      	str	r1, [r7, #20]
 80063da:	e7e7      	b.n	80063ac <__d2b+0x46>
 80063dc:	a801      	add	r0, sp, #4
 80063de:	f7ff fdda 	bl	8005f96 <__lo0bits>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	2101      	movs	r1, #1
 80063e8:	6139      	str	r1, [r7, #16]
 80063ea:	3020      	adds	r0, #32
 80063ec:	e7e5      	b.n	80063ba <__d2b+0x54>
 80063ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80063f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063f6:	6030      	str	r0, [r6, #0]
 80063f8:	6918      	ldr	r0, [r3, #16]
 80063fa:	f7ff fdad 	bl	8005f58 <__hi0bits>
 80063fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006402:	e7e1      	b.n	80063c8 <__d2b+0x62>

08006404 <_calloc_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	fb02 f401 	mul.w	r4, r2, r1
 800640a:	4621      	mov	r1, r4
 800640c:	f000 f856 	bl	80064bc <_malloc_r>
 8006410:	4605      	mov	r5, r0
 8006412:	b118      	cbz	r0, 800641c <_calloc_r+0x18>
 8006414:	4622      	mov	r2, r4
 8006416:	2100      	movs	r1, #0
 8006418:	f7fe fa25 	bl	8004866 <memset>
 800641c:	4628      	mov	r0, r5
 800641e:	bd38      	pop	{r3, r4, r5, pc}

08006420 <_free_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4605      	mov	r5, r0
 8006424:	2900      	cmp	r1, #0
 8006426:	d045      	beq.n	80064b4 <_free_r+0x94>
 8006428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800642c:	1f0c      	subs	r4, r1, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfb8      	it	lt
 8006432:	18e4      	addlt	r4, r4, r3
 8006434:	f000 fa29 	bl	800688a <__malloc_lock>
 8006438:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <_free_r+0x98>)
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	4610      	mov	r0, r2
 800643e:	b933      	cbnz	r3, 800644e <_free_r+0x2e>
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	6014      	str	r4, [r2, #0]
 8006444:	4628      	mov	r0, r5
 8006446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800644a:	f000 ba1f 	b.w	800688c <__malloc_unlock>
 800644e:	42a3      	cmp	r3, r4
 8006450:	d90c      	bls.n	800646c <_free_r+0x4c>
 8006452:	6821      	ldr	r1, [r4, #0]
 8006454:	1862      	adds	r2, r4, r1
 8006456:	4293      	cmp	r3, r2
 8006458:	bf04      	itt	eq
 800645a:	681a      	ldreq	r2, [r3, #0]
 800645c:	685b      	ldreq	r3, [r3, #4]
 800645e:	6063      	str	r3, [r4, #4]
 8006460:	bf04      	itt	eq
 8006462:	1852      	addeq	r2, r2, r1
 8006464:	6022      	streq	r2, [r4, #0]
 8006466:	6004      	str	r4, [r0, #0]
 8006468:	e7ec      	b.n	8006444 <_free_r+0x24>
 800646a:	4613      	mov	r3, r2
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	b10a      	cbz	r2, 8006474 <_free_r+0x54>
 8006470:	42a2      	cmp	r2, r4
 8006472:	d9fa      	bls.n	800646a <_free_r+0x4a>
 8006474:	6819      	ldr	r1, [r3, #0]
 8006476:	1858      	adds	r0, r3, r1
 8006478:	42a0      	cmp	r0, r4
 800647a:	d10b      	bne.n	8006494 <_free_r+0x74>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	4401      	add	r1, r0
 8006480:	1858      	adds	r0, r3, r1
 8006482:	4282      	cmp	r2, r0
 8006484:	6019      	str	r1, [r3, #0]
 8006486:	d1dd      	bne.n	8006444 <_free_r+0x24>
 8006488:	6810      	ldr	r0, [r2, #0]
 800648a:	6852      	ldr	r2, [r2, #4]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	4401      	add	r1, r0
 8006490:	6019      	str	r1, [r3, #0]
 8006492:	e7d7      	b.n	8006444 <_free_r+0x24>
 8006494:	d902      	bls.n	800649c <_free_r+0x7c>
 8006496:	230c      	movs	r3, #12
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	e7d3      	b.n	8006444 <_free_r+0x24>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	1821      	adds	r1, r4, r0
 80064a0:	428a      	cmp	r2, r1
 80064a2:	bf04      	itt	eq
 80064a4:	6811      	ldreq	r1, [r2, #0]
 80064a6:	6852      	ldreq	r2, [r2, #4]
 80064a8:	6062      	str	r2, [r4, #4]
 80064aa:	bf04      	itt	eq
 80064ac:	1809      	addeq	r1, r1, r0
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	605c      	str	r4, [r3, #4]
 80064b2:	e7c7      	b.n	8006444 <_free_r+0x24>
 80064b4:	bd38      	pop	{r3, r4, r5, pc}
 80064b6:	bf00      	nop
 80064b8:	20000208 	.word	0x20000208

080064bc <_malloc_r>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	1ccd      	adds	r5, r1, #3
 80064c0:	f025 0503 	bic.w	r5, r5, #3
 80064c4:	3508      	adds	r5, #8
 80064c6:	2d0c      	cmp	r5, #12
 80064c8:	bf38      	it	cc
 80064ca:	250c      	movcc	r5, #12
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	4606      	mov	r6, r0
 80064d0:	db01      	blt.n	80064d6 <_malloc_r+0x1a>
 80064d2:	42a9      	cmp	r1, r5
 80064d4:	d903      	bls.n	80064de <_malloc_r+0x22>
 80064d6:	230c      	movs	r3, #12
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	2000      	movs	r0, #0
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
 80064de:	f000 f9d4 	bl	800688a <__malloc_lock>
 80064e2:	4a21      	ldr	r2, [pc, #132]	; (8006568 <_malloc_r+0xac>)
 80064e4:	6814      	ldr	r4, [r2, #0]
 80064e6:	4621      	mov	r1, r4
 80064e8:	b991      	cbnz	r1, 8006510 <_malloc_r+0x54>
 80064ea:	4c20      	ldr	r4, [pc, #128]	; (800656c <_malloc_r+0xb0>)
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	b91b      	cbnz	r3, 80064f8 <_malloc_r+0x3c>
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f98f 	bl	8006814 <_sbrk_r>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	4629      	mov	r1, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 f98a 	bl	8006814 <_sbrk_r>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d124      	bne.n	800654e <_malloc_r+0x92>
 8006504:	230c      	movs	r3, #12
 8006506:	6033      	str	r3, [r6, #0]
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f9bf 	bl	800688c <__malloc_unlock>
 800650e:	e7e4      	b.n	80064da <_malloc_r+0x1e>
 8006510:	680b      	ldr	r3, [r1, #0]
 8006512:	1b5b      	subs	r3, r3, r5
 8006514:	d418      	bmi.n	8006548 <_malloc_r+0x8c>
 8006516:	2b0b      	cmp	r3, #11
 8006518:	d90f      	bls.n	800653a <_malloc_r+0x7e>
 800651a:	600b      	str	r3, [r1, #0]
 800651c:	50cd      	str	r5, [r1, r3]
 800651e:	18cc      	adds	r4, r1, r3
 8006520:	4630      	mov	r0, r6
 8006522:	f000 f9b3 	bl	800688c <__malloc_unlock>
 8006526:	f104 000b 	add.w	r0, r4, #11
 800652a:	1d23      	adds	r3, r4, #4
 800652c:	f020 0007 	bic.w	r0, r0, #7
 8006530:	1ac3      	subs	r3, r0, r3
 8006532:	d0d3      	beq.n	80064dc <_malloc_r+0x20>
 8006534:	425a      	negs	r2, r3
 8006536:	50e2      	str	r2, [r4, r3]
 8006538:	e7d0      	b.n	80064dc <_malloc_r+0x20>
 800653a:	428c      	cmp	r4, r1
 800653c:	684b      	ldr	r3, [r1, #4]
 800653e:	bf16      	itet	ne
 8006540:	6063      	strne	r3, [r4, #4]
 8006542:	6013      	streq	r3, [r2, #0]
 8006544:	460c      	movne	r4, r1
 8006546:	e7eb      	b.n	8006520 <_malloc_r+0x64>
 8006548:	460c      	mov	r4, r1
 800654a:	6849      	ldr	r1, [r1, #4]
 800654c:	e7cc      	b.n	80064e8 <_malloc_r+0x2c>
 800654e:	1cc4      	adds	r4, r0, #3
 8006550:	f024 0403 	bic.w	r4, r4, #3
 8006554:	42a0      	cmp	r0, r4
 8006556:	d005      	beq.n	8006564 <_malloc_r+0xa8>
 8006558:	1a21      	subs	r1, r4, r0
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f95a 	bl	8006814 <_sbrk_r>
 8006560:	3001      	adds	r0, #1
 8006562:	d0cf      	beq.n	8006504 <_malloc_r+0x48>
 8006564:	6025      	str	r5, [r4, #0]
 8006566:	e7db      	b.n	8006520 <_malloc_r+0x64>
 8006568:	20000208 	.word	0x20000208
 800656c:	2000020c 	.word	0x2000020c

08006570 <__ssputs_r>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	688e      	ldr	r6, [r1, #8]
 8006576:	429e      	cmp	r6, r3
 8006578:	4682      	mov	sl, r0
 800657a:	460c      	mov	r4, r1
 800657c:	4690      	mov	r8, r2
 800657e:	4699      	mov	r9, r3
 8006580:	d837      	bhi.n	80065f2 <__ssputs_r+0x82>
 8006582:	898a      	ldrh	r2, [r1, #12]
 8006584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006588:	d031      	beq.n	80065ee <__ssputs_r+0x7e>
 800658a:	6825      	ldr	r5, [r4, #0]
 800658c:	6909      	ldr	r1, [r1, #16]
 800658e:	1a6f      	subs	r7, r5, r1
 8006590:	6965      	ldr	r5, [r4, #20]
 8006592:	2302      	movs	r3, #2
 8006594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006598:	fb95 f5f3 	sdiv	r5, r5, r3
 800659c:	f109 0301 	add.w	r3, r9, #1
 80065a0:	443b      	add	r3, r7
 80065a2:	429d      	cmp	r5, r3
 80065a4:	bf38      	it	cc
 80065a6:	461d      	movcc	r5, r3
 80065a8:	0553      	lsls	r3, r2, #21
 80065aa:	d530      	bpl.n	800660e <__ssputs_r+0x9e>
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7ff ff85 	bl	80064bc <_malloc_r>
 80065b2:	4606      	mov	r6, r0
 80065b4:	b950      	cbnz	r0, 80065cc <__ssputs_r+0x5c>
 80065b6:	230c      	movs	r3, #12
 80065b8:	f8ca 3000 	str.w	r3, [sl]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	463a      	mov	r2, r7
 80065ce:	6921      	ldr	r1, [r4, #16]
 80065d0:	f7fe f93e 	bl	8004850 <memcpy>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	6126      	str	r6, [r4, #16]
 80065e2:	6165      	str	r5, [r4, #20]
 80065e4:	443e      	add	r6, r7
 80065e6:	1bed      	subs	r5, r5, r7
 80065e8:	6026      	str	r6, [r4, #0]
 80065ea:	60a5      	str	r5, [r4, #8]
 80065ec:	464e      	mov	r6, r9
 80065ee:	454e      	cmp	r6, r9
 80065f0:	d900      	bls.n	80065f4 <__ssputs_r+0x84>
 80065f2:	464e      	mov	r6, r9
 80065f4:	4632      	mov	r2, r6
 80065f6:	4641      	mov	r1, r8
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	f000 f92d 	bl	8006858 <memmove>
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	1b9b      	subs	r3, r3, r6
 8006602:	60a3      	str	r3, [r4, #8]
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	441e      	add	r6, r3
 8006608:	6026      	str	r6, [r4, #0]
 800660a:	2000      	movs	r0, #0
 800660c:	e7dc      	b.n	80065c8 <__ssputs_r+0x58>
 800660e:	462a      	mov	r2, r5
 8006610:	f000 f93d 	bl	800688e <_realloc_r>
 8006614:	4606      	mov	r6, r0
 8006616:	2800      	cmp	r0, #0
 8006618:	d1e2      	bne.n	80065e0 <__ssputs_r+0x70>
 800661a:	6921      	ldr	r1, [r4, #16]
 800661c:	4650      	mov	r0, sl
 800661e:	f7ff feff 	bl	8006420 <_free_r>
 8006622:	e7c8      	b.n	80065b6 <__ssputs_r+0x46>

08006624 <_svfiprintf_r>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	461d      	mov	r5, r3
 800662a:	898b      	ldrh	r3, [r1, #12]
 800662c:	061f      	lsls	r7, r3, #24
 800662e:	b09d      	sub	sp, #116	; 0x74
 8006630:	4680      	mov	r8, r0
 8006632:	460c      	mov	r4, r1
 8006634:	4616      	mov	r6, r2
 8006636:	d50f      	bpl.n	8006658 <_svfiprintf_r+0x34>
 8006638:	690b      	ldr	r3, [r1, #16]
 800663a:	b96b      	cbnz	r3, 8006658 <_svfiprintf_r+0x34>
 800663c:	2140      	movs	r1, #64	; 0x40
 800663e:	f7ff ff3d 	bl	80064bc <_malloc_r>
 8006642:	6020      	str	r0, [r4, #0]
 8006644:	6120      	str	r0, [r4, #16]
 8006646:	b928      	cbnz	r0, 8006654 <_svfiprintf_r+0x30>
 8006648:	230c      	movs	r3, #12
 800664a:	f8c8 3000 	str.w	r3, [r8]
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	e0c8      	b.n	80067e6 <_svfiprintf_r+0x1c2>
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	6163      	str	r3, [r4, #20]
 8006658:	2300      	movs	r3, #0
 800665a:	9309      	str	r3, [sp, #36]	; 0x24
 800665c:	2320      	movs	r3, #32
 800665e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006662:	2330      	movs	r3, #48	; 0x30
 8006664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006668:	9503      	str	r5, [sp, #12]
 800666a:	f04f 0b01 	mov.w	fp, #1
 800666e:	4637      	mov	r7, r6
 8006670:	463d      	mov	r5, r7
 8006672:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006676:	b10b      	cbz	r3, 800667c <_svfiprintf_r+0x58>
 8006678:	2b25      	cmp	r3, #37	; 0x25
 800667a:	d13e      	bne.n	80066fa <_svfiprintf_r+0xd6>
 800667c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006680:	d00b      	beq.n	800669a <_svfiprintf_r+0x76>
 8006682:	4653      	mov	r3, sl
 8006684:	4632      	mov	r2, r6
 8006686:	4621      	mov	r1, r4
 8006688:	4640      	mov	r0, r8
 800668a:	f7ff ff71 	bl	8006570 <__ssputs_r>
 800668e:	3001      	adds	r0, #1
 8006690:	f000 80a4 	beq.w	80067dc <_svfiprintf_r+0x1b8>
 8006694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006696:	4453      	add	r3, sl
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	783b      	ldrb	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 809d 	beq.w	80067dc <_svfiprintf_r+0x1b8>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b4:	931a      	str	r3, [sp, #104]	; 0x68
 80066b6:	462f      	mov	r7, r5
 80066b8:	2205      	movs	r2, #5
 80066ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066be:	4850      	ldr	r0, [pc, #320]	; (8006800 <_svfiprintf_r+0x1dc>)
 80066c0:	f7f9 fdb6 	bl	8000230 <memchr>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	b9d0      	cbnz	r0, 80066fe <_svfiprintf_r+0xda>
 80066c8:	06d9      	lsls	r1, r3, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2220      	movmi	r2, #32
 80066ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066d2:	071a      	lsls	r2, r3, #28
 80066d4:	bf44      	itt	mi
 80066d6:	222b      	movmi	r2, #43	; 0x2b
 80066d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066dc:	782a      	ldrb	r2, [r5, #0]
 80066de:	2a2a      	cmp	r2, #42	; 0x2a
 80066e0:	d015      	beq.n	800670e <_svfiprintf_r+0xea>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	462f      	mov	r7, r5
 80066e6:	2000      	movs	r0, #0
 80066e8:	250a      	movs	r5, #10
 80066ea:	4639      	mov	r1, r7
 80066ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f0:	3b30      	subs	r3, #48	; 0x30
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d94d      	bls.n	8006792 <_svfiprintf_r+0x16e>
 80066f6:	b1b8      	cbz	r0, 8006728 <_svfiprintf_r+0x104>
 80066f8:	e00f      	b.n	800671a <_svfiprintf_r+0xf6>
 80066fa:	462f      	mov	r7, r5
 80066fc:	e7b8      	b.n	8006670 <_svfiprintf_r+0x4c>
 80066fe:	4a40      	ldr	r2, [pc, #256]	; (8006800 <_svfiprintf_r+0x1dc>)
 8006700:	1a80      	subs	r0, r0, r2
 8006702:	fa0b f000 	lsl.w	r0, fp, r0
 8006706:	4318      	orrs	r0, r3
 8006708:	9004      	str	r0, [sp, #16]
 800670a:	463d      	mov	r5, r7
 800670c:	e7d3      	b.n	80066b6 <_svfiprintf_r+0x92>
 800670e:	9a03      	ldr	r2, [sp, #12]
 8006710:	1d11      	adds	r1, r2, #4
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	9103      	str	r1, [sp, #12]
 8006716:	2a00      	cmp	r2, #0
 8006718:	db01      	blt.n	800671e <_svfiprintf_r+0xfa>
 800671a:	9207      	str	r2, [sp, #28]
 800671c:	e004      	b.n	8006728 <_svfiprintf_r+0x104>
 800671e:	4252      	negs	r2, r2
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	9207      	str	r2, [sp, #28]
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	783b      	ldrb	r3, [r7, #0]
 800672a:	2b2e      	cmp	r3, #46	; 0x2e
 800672c:	d10c      	bne.n	8006748 <_svfiprintf_r+0x124>
 800672e:	787b      	ldrb	r3, [r7, #1]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d133      	bne.n	800679c <_svfiprintf_r+0x178>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9203      	str	r2, [sp, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfb8      	it	lt
 8006740:	f04f 33ff 	movlt.w	r3, #4294967295
 8006744:	3702      	adds	r7, #2
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4d2e      	ldr	r5, [pc, #184]	; (8006804 <_svfiprintf_r+0x1e0>)
 800674a:	7839      	ldrb	r1, [r7, #0]
 800674c:	2203      	movs	r2, #3
 800674e:	4628      	mov	r0, r5
 8006750:	f7f9 fd6e 	bl	8000230 <memchr>
 8006754:	b138      	cbz	r0, 8006766 <_svfiprintf_r+0x142>
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	1b40      	subs	r0, r0, r5
 800675a:	fa03 f000 	lsl.w	r0, r3, r0
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	4303      	orrs	r3, r0
 8006762:	3701      	adds	r7, #1
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	7839      	ldrb	r1, [r7, #0]
 8006768:	4827      	ldr	r0, [pc, #156]	; (8006808 <_svfiprintf_r+0x1e4>)
 800676a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800676e:	2206      	movs	r2, #6
 8006770:	1c7e      	adds	r6, r7, #1
 8006772:	f7f9 fd5d 	bl	8000230 <memchr>
 8006776:	2800      	cmp	r0, #0
 8006778:	d038      	beq.n	80067ec <_svfiprintf_r+0x1c8>
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <_svfiprintf_r+0x1e8>)
 800677c:	bb13      	cbnz	r3, 80067c4 <_svfiprintf_r+0x1a0>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	3308      	adds	r3, #8
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678c:	444b      	add	r3, r9
 800678e:	9309      	str	r3, [sp, #36]	; 0x24
 8006790:	e76d      	b.n	800666e <_svfiprintf_r+0x4a>
 8006792:	fb05 3202 	mla	r2, r5, r2, r3
 8006796:	2001      	movs	r0, #1
 8006798:	460f      	mov	r7, r1
 800679a:	e7a6      	b.n	80066ea <_svfiprintf_r+0xc6>
 800679c:	2300      	movs	r3, #0
 800679e:	3701      	adds	r7, #1
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	4619      	mov	r1, r3
 80067a4:	250a      	movs	r5, #10
 80067a6:	4638      	mov	r0, r7
 80067a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ac:	3a30      	subs	r2, #48	; 0x30
 80067ae:	2a09      	cmp	r2, #9
 80067b0:	d903      	bls.n	80067ba <_svfiprintf_r+0x196>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0c8      	beq.n	8006748 <_svfiprintf_r+0x124>
 80067b6:	9105      	str	r1, [sp, #20]
 80067b8:	e7c6      	b.n	8006748 <_svfiprintf_r+0x124>
 80067ba:	fb05 2101 	mla	r1, r5, r1, r2
 80067be:	2301      	movs	r3, #1
 80067c0:	4607      	mov	r7, r0
 80067c2:	e7f0      	b.n	80067a6 <_svfiprintf_r+0x182>
 80067c4:	ab03      	add	r3, sp, #12
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4622      	mov	r2, r4
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <_svfiprintf_r+0x1ec>)
 80067cc:	a904      	add	r1, sp, #16
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7fe f8e6 	bl	80049a0 <_printf_float>
 80067d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067d8:	4681      	mov	r9, r0
 80067da:	d1d6      	bne.n	800678a <_svfiprintf_r+0x166>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	065b      	lsls	r3, r3, #25
 80067e0:	f53f af35 	bmi.w	800664e <_svfiprintf_r+0x2a>
 80067e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067e6:	b01d      	add	sp, #116	; 0x74
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4622      	mov	r2, r4
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <_svfiprintf_r+0x1ec>)
 80067f4:	a904      	add	r1, sp, #16
 80067f6:	4640      	mov	r0, r8
 80067f8:	f7fe fb88 	bl	8004f0c <_printf_i>
 80067fc:	e7ea      	b.n	80067d4 <_svfiprintf_r+0x1b0>
 80067fe:	bf00      	nop
 8006800:	0800846c 	.word	0x0800846c
 8006804:	08008472 	.word	0x08008472
 8006808:	08008476 	.word	0x08008476
 800680c:	080049a1 	.word	0x080049a1
 8006810:	08006571 	.word	0x08006571

08006814 <_sbrk_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4c06      	ldr	r4, [pc, #24]	; (8006830 <_sbrk_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4605      	mov	r5, r0
 800681c:	4608      	mov	r0, r1
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	f7fb fc1e 	bl	8002060 <_sbrk>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_sbrk_r+0x1a>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	b103      	cbz	r3, 800682e <_sbrk_r+0x1a>
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000490 	.word	0x20000490

08006834 <__ascii_mbtowc>:
 8006834:	b082      	sub	sp, #8
 8006836:	b901      	cbnz	r1, 800683a <__ascii_mbtowc+0x6>
 8006838:	a901      	add	r1, sp, #4
 800683a:	b142      	cbz	r2, 800684e <__ascii_mbtowc+0x1a>
 800683c:	b14b      	cbz	r3, 8006852 <__ascii_mbtowc+0x1e>
 800683e:	7813      	ldrb	r3, [r2, #0]
 8006840:	600b      	str	r3, [r1, #0]
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	1c10      	adds	r0, r2, #0
 8006846:	bf18      	it	ne
 8006848:	2001      	movne	r0, #1
 800684a:	b002      	add	sp, #8
 800684c:	4770      	bx	lr
 800684e:	4610      	mov	r0, r2
 8006850:	e7fb      	b.n	800684a <__ascii_mbtowc+0x16>
 8006852:	f06f 0001 	mvn.w	r0, #1
 8006856:	e7f8      	b.n	800684a <__ascii_mbtowc+0x16>

08006858 <memmove>:
 8006858:	4288      	cmp	r0, r1
 800685a:	b510      	push	{r4, lr}
 800685c:	eb01 0302 	add.w	r3, r1, r2
 8006860:	d807      	bhi.n	8006872 <memmove+0x1a>
 8006862:	1e42      	subs	r2, r0, #1
 8006864:	4299      	cmp	r1, r3
 8006866:	d00a      	beq.n	800687e <memmove+0x26>
 8006868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006870:	e7f8      	b.n	8006864 <memmove+0xc>
 8006872:	4283      	cmp	r3, r0
 8006874:	d9f5      	bls.n	8006862 <memmove+0xa>
 8006876:	1881      	adds	r1, r0, r2
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	42d3      	cmn	r3, r2
 800687c:	d100      	bne.n	8006880 <memmove+0x28>
 800687e:	bd10      	pop	{r4, pc}
 8006880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006888:	e7f7      	b.n	800687a <memmove+0x22>

0800688a <__malloc_lock>:
 800688a:	4770      	bx	lr

0800688c <__malloc_unlock>:
 800688c:	4770      	bx	lr

0800688e <_realloc_r>:
 800688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006890:	4607      	mov	r7, r0
 8006892:	4614      	mov	r4, r2
 8006894:	460e      	mov	r6, r1
 8006896:	b921      	cbnz	r1, 80068a2 <_realloc_r+0x14>
 8006898:	4611      	mov	r1, r2
 800689a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800689e:	f7ff be0d 	b.w	80064bc <_malloc_r>
 80068a2:	b922      	cbnz	r2, 80068ae <_realloc_r+0x20>
 80068a4:	f7ff fdbc 	bl	8006420 <_free_r>
 80068a8:	4625      	mov	r5, r4
 80068aa:	4628      	mov	r0, r5
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ae:	f000 f821 	bl	80068f4 <_malloc_usable_size_r>
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	d20f      	bcs.n	80068d6 <_realloc_r+0x48>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fdff 	bl	80064bc <_malloc_r>
 80068be:	4605      	mov	r5, r0
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0f2      	beq.n	80068aa <_realloc_r+0x1c>
 80068c4:	4631      	mov	r1, r6
 80068c6:	4622      	mov	r2, r4
 80068c8:	f7fd ffc2 	bl	8004850 <memcpy>
 80068cc:	4631      	mov	r1, r6
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff fda6 	bl	8006420 <_free_r>
 80068d4:	e7e9      	b.n	80068aa <_realloc_r+0x1c>
 80068d6:	4635      	mov	r5, r6
 80068d8:	e7e7      	b.n	80068aa <_realloc_r+0x1c>

080068da <__ascii_wctomb>:
 80068da:	b149      	cbz	r1, 80068f0 <__ascii_wctomb+0x16>
 80068dc:	2aff      	cmp	r2, #255	; 0xff
 80068de:	bf85      	ittet	hi
 80068e0:	238a      	movhi	r3, #138	; 0x8a
 80068e2:	6003      	strhi	r3, [r0, #0]
 80068e4:	700a      	strbls	r2, [r1, #0]
 80068e6:	f04f 30ff 	movhi.w	r0, #4294967295
 80068ea:	bf98      	it	ls
 80068ec:	2001      	movls	r0, #1
 80068ee:	4770      	bx	lr
 80068f0:	4608      	mov	r0, r1
 80068f2:	4770      	bx	lr

080068f4 <_malloc_usable_size_r>:
 80068f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f8:	1f18      	subs	r0, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfbc      	itt	lt
 80068fe:	580b      	ldrlt	r3, [r1, r0]
 8006900:	18c0      	addlt	r0, r0, r3
 8006902:	4770      	bx	lr
 8006904:	0000      	movs	r0, r0
	...

08006908 <cos>:
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	ec51 0b10 	vmov	r0, r1, d0
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <cos+0x80>)
 8006910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006914:	4293      	cmp	r3, r2
 8006916:	dc06      	bgt.n	8006926 <cos+0x1e>
 8006918:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006980 <cos+0x78>
 800691c:	f000 fd18 	bl	8007350 <__kernel_cos>
 8006920:	ec51 0b10 	vmov	r0, r1, d0
 8006924:	e007      	b.n	8006936 <cos+0x2e>
 8006926:	4a19      	ldr	r2, [pc, #100]	; (800698c <cos+0x84>)
 8006928:	4293      	cmp	r3, r2
 800692a:	dd09      	ble.n	8006940 <cos+0x38>
 800692c:	ee10 2a10 	vmov	r2, s0
 8006930:	460b      	mov	r3, r1
 8006932:	f7f9 fcd1 	bl	80002d8 <__aeabi_dsub>
 8006936:	ec41 0b10 	vmov	d0, r0, r1
 800693a:	b005      	add	sp, #20
 800693c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006940:	4668      	mov	r0, sp
 8006942:	f000 fb11 	bl	8006f68 <__ieee754_rem_pio2>
 8006946:	f000 0003 	and.w	r0, r0, #3
 800694a:	2801      	cmp	r0, #1
 800694c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006950:	ed9d 0b00 	vldr	d0, [sp]
 8006954:	d007      	beq.n	8006966 <cos+0x5e>
 8006956:	2802      	cmp	r0, #2
 8006958:	d00e      	beq.n	8006978 <cos+0x70>
 800695a:	2800      	cmp	r0, #0
 800695c:	d0de      	beq.n	800691c <cos+0x14>
 800695e:	2001      	movs	r0, #1
 8006960:	f001 f8fe 	bl	8007b60 <__kernel_sin>
 8006964:	e7dc      	b.n	8006920 <cos+0x18>
 8006966:	f001 f8fb 	bl	8007b60 <__kernel_sin>
 800696a:	ec53 2b10 	vmov	r2, r3, d0
 800696e:	ee10 0a10 	vmov	r0, s0
 8006972:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006976:	e7de      	b.n	8006936 <cos+0x2e>
 8006978:	f000 fcea 	bl	8007350 <__kernel_cos>
 800697c:	e7f5      	b.n	800696a <cos+0x62>
 800697e:	bf00      	nop
	...
 8006988:	3fe921fb 	.word	0x3fe921fb
 800698c:	7fefffff 	.word	0x7fefffff

08006990 <round>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	ec57 6b10 	vmov	r6, r7, d0
 8006996:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800699a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800699e:	2c13      	cmp	r4, #19
 80069a0:	463b      	mov	r3, r7
 80069a2:	463d      	mov	r5, r7
 80069a4:	dc17      	bgt.n	80069d6 <round+0x46>
 80069a6:	2c00      	cmp	r4, #0
 80069a8:	da09      	bge.n	80069be <round+0x2e>
 80069aa:	3401      	adds	r4, #1
 80069ac:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80069b0:	d103      	bne.n	80069ba <round+0x2a>
 80069b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80069b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80069ba:	2100      	movs	r1, #0
 80069bc:	e02c      	b.n	8006a18 <round+0x88>
 80069be:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <round+0x90>)
 80069c0:	4122      	asrs	r2, r4
 80069c2:	4217      	tst	r7, r2
 80069c4:	d100      	bne.n	80069c8 <round+0x38>
 80069c6:	b19e      	cbz	r6, 80069f0 <round+0x60>
 80069c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069cc:	4123      	asrs	r3, r4
 80069ce:	442b      	add	r3, r5
 80069d0:	ea23 0302 	bic.w	r3, r3, r2
 80069d4:	e7f1      	b.n	80069ba <round+0x2a>
 80069d6:	2c33      	cmp	r4, #51	; 0x33
 80069d8:	dd0d      	ble.n	80069f6 <round+0x66>
 80069da:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80069de:	d107      	bne.n	80069f0 <round+0x60>
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	ee10 2a10 	vmov	r2, s0
 80069e8:	f7f9 fc78 	bl	80002dc <__adddf3>
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	ec47 6b10 	vmov	d0, r6, r7
 80069f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80069fa:	f04f 30ff 	mov.w	r0, #4294967295
 80069fe:	40d0      	lsrs	r0, r2
 8006a00:	4206      	tst	r6, r0
 8006a02:	d0f5      	beq.n	80069f0 <round+0x60>
 8006a04:	2201      	movs	r2, #1
 8006a06:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006a0a:	fa02 f404 	lsl.w	r4, r2, r4
 8006a0e:	1931      	adds	r1, r6, r4
 8006a10:	bf28      	it	cs
 8006a12:	189b      	addcs	r3, r3, r2
 8006a14:	ea21 0100 	bic.w	r1, r1, r0
 8006a18:	461f      	mov	r7, r3
 8006a1a:	460e      	mov	r6, r1
 8006a1c:	e7e8      	b.n	80069f0 <round+0x60>
 8006a1e:	bf00      	nop
 8006a20:	000fffff 	.word	0x000fffff
 8006a24:	00000000 	.word	0x00000000

08006a28 <sin>:
 8006a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a2a:	ec51 0b10 	vmov	r0, r1, d0
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <sin+0x88>)
 8006a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a34:	4293      	cmp	r3, r2
 8006a36:	dc07      	bgt.n	8006a48 <sin+0x20>
 8006a38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006aa8 <sin+0x80>
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f001 f88f 	bl	8007b60 <__kernel_sin>
 8006a42:	ec51 0b10 	vmov	r0, r1, d0
 8006a46:	e007      	b.n	8006a58 <sin+0x30>
 8006a48:	4a1a      	ldr	r2, [pc, #104]	; (8006ab4 <sin+0x8c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	dd09      	ble.n	8006a62 <sin+0x3a>
 8006a4e:	ee10 2a10 	vmov	r2, s0
 8006a52:	460b      	mov	r3, r1
 8006a54:	f7f9 fc40 	bl	80002d8 <__aeabi_dsub>
 8006a58:	ec41 0b10 	vmov	d0, r0, r1
 8006a5c:	b005      	add	sp, #20
 8006a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a62:	4668      	mov	r0, sp
 8006a64:	f000 fa80 	bl	8006f68 <__ieee754_rem_pio2>
 8006a68:	f000 0003 	and.w	r0, r0, #3
 8006a6c:	2801      	cmp	r0, #1
 8006a6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a72:	ed9d 0b00 	vldr	d0, [sp]
 8006a76:	d004      	beq.n	8006a82 <sin+0x5a>
 8006a78:	2802      	cmp	r0, #2
 8006a7a:	d005      	beq.n	8006a88 <sin+0x60>
 8006a7c:	b970      	cbnz	r0, 8006a9c <sin+0x74>
 8006a7e:	2001      	movs	r0, #1
 8006a80:	e7dd      	b.n	8006a3e <sin+0x16>
 8006a82:	f000 fc65 	bl	8007350 <__kernel_cos>
 8006a86:	e7dc      	b.n	8006a42 <sin+0x1a>
 8006a88:	2001      	movs	r0, #1
 8006a8a:	f001 f869 	bl	8007b60 <__kernel_sin>
 8006a8e:	ec53 2b10 	vmov	r2, r3, d0
 8006a92:	ee10 0a10 	vmov	r0, s0
 8006a96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a9a:	e7dd      	b.n	8006a58 <sin+0x30>
 8006a9c:	f000 fc58 	bl	8007350 <__kernel_cos>
 8006aa0:	e7f5      	b.n	8006a8e <sin+0x66>
 8006aa2:	bf00      	nop
 8006aa4:	f3af 8000 	nop.w
	...
 8006ab0:	3fe921fb 	.word	0x3fe921fb
 8006ab4:	7fefffff 	.word	0x7fefffff

08006ab8 <atan2>:
 8006ab8:	f000 b866 	b.w	8006b88 <__ieee754_atan2>

08006abc <fmod>:
 8006abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	ed2d 8b02 	vpush	{d8}
 8006ac4:	b08b      	sub	sp, #44	; 0x2c
 8006ac6:	ec55 4b10 	vmov	r4, r5, d0
 8006aca:	ec57 6b11 	vmov	r6, r7, d1
 8006ace:	f000 f939 	bl	8006d44 <__ieee754_fmod>
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <fmod+0xc0>)
 8006ad4:	eeb0 8a40 	vmov.f32	s16, s0
 8006ad8:	eef0 8a60 	vmov.f32	s17, s1
 8006adc:	f993 8000 	ldrsb.w	r8, [r3]
 8006ae0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006ae4:	d030      	beq.n	8006b48 <fmod+0x8c>
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	463b      	mov	r3, r7
 8006aea:	4630      	mov	r0, r6
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7fa f845 	bl	8000b7c <__aeabi_dcmpun>
 8006af2:	bb48      	cbnz	r0, 8006b48 <fmod+0x8c>
 8006af4:	4622      	mov	r2, r4
 8006af6:	462b      	mov	r3, r5
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7fa f83e 	bl	8000b7c <__aeabi_dcmpun>
 8006b00:	4681      	mov	r9, r0
 8006b02:	bb08      	cbnz	r0, 8006b48 <fmod+0x8c>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7fa f804 	bl	8000b18 <__aeabi_dcmpeq>
 8006b10:	b1d0      	cbz	r0, 8006b48 <fmod+0x8c>
 8006b12:	2301      	movs	r3, #1
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <fmod+0xc4>)
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b22:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b26:	f1b8 0f00 	cmp.w	r8, #0
 8006b2a:	d116      	bne.n	8006b5a <fmod+0x9e>
 8006b2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b30:	4668      	mov	r0, sp
 8006b32:	f001 fb01 	bl	8008138 <matherr>
 8006b36:	b1d8      	cbz	r0, 8006b70 <fmod+0xb4>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	b11b      	cbz	r3, 8006b44 <fmod+0x88>
 8006b3c:	f7fd fe5e 	bl	80047fc <__errno>
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006b48:	eeb0 0a48 	vmov.f32	s0, s16
 8006b4c:	eef0 0a68 	vmov.f32	s1, s17
 8006b50:	b00b      	add	sp, #44	; 0x2c
 8006b52:	ecbd 8b02 	vpop	{d8}
 8006b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7f9 fe9b 	bl	800089c <__aeabi_ddiv>
 8006b66:	f1b8 0f02 	cmp.w	r8, #2
 8006b6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b6e:	d1df      	bne.n	8006b30 <fmod+0x74>
 8006b70:	f7fd fe44 	bl	80047fc <__errno>
 8006b74:	2321      	movs	r3, #33	; 0x21
 8006b76:	6003      	str	r3, [r0, #0]
 8006b78:	e7de      	b.n	8006b38 <fmod+0x7c>
 8006b7a:	bf00      	nop
 8006b7c:	200001e4 	.word	0x200001e4
 8006b80:	08008588 	.word	0x08008588
 8006b84:	00000000 	.word	0x00000000

08006b88 <__ieee754_atan2>:
 8006b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	ec57 6b11 	vmov	r6, r7, d1
 8006b90:	4273      	negs	r3, r6
 8006b92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006b96:	4333      	orrs	r3, r6
 8006b98:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006d40 <__ieee754_atan2+0x1b8>
 8006b9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006ba0:	4573      	cmp	r3, lr
 8006ba2:	ec51 0b10 	vmov	r0, r1, d0
 8006ba6:	ee11 8a10 	vmov	r8, s2
 8006baa:	d80a      	bhi.n	8006bc2 <__ieee754_atan2+0x3a>
 8006bac:	4244      	negs	r4, r0
 8006bae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bb2:	4304      	orrs	r4, r0
 8006bb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006bb8:	4574      	cmp	r4, lr
 8006bba:	468c      	mov	ip, r1
 8006bbc:	ee10 9a10 	vmov	r9, s0
 8006bc0:	d907      	bls.n	8006bd2 <__ieee754_atan2+0x4a>
 8006bc2:	4632      	mov	r2, r6
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	f7f9 fb89 	bl	80002dc <__adddf3>
 8006bca:	ec41 0b10 	vmov	d0, r0, r1
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006bda:	4334      	orrs	r4, r6
 8006bdc:	d103      	bne.n	8006be6 <__ieee754_atan2+0x5e>
 8006bde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be2:	f001 b879 	b.w	8007cd8 <atan>
 8006be6:	17bc      	asrs	r4, r7, #30
 8006be8:	f004 0402 	and.w	r4, r4, #2
 8006bec:	ea53 0909 	orrs.w	r9, r3, r9
 8006bf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006bf4:	d107      	bne.n	8006c06 <__ieee754_atan2+0x7e>
 8006bf6:	2c02      	cmp	r4, #2
 8006bf8:	d073      	beq.n	8006ce2 <__ieee754_atan2+0x15a>
 8006bfa:	2c03      	cmp	r4, #3
 8006bfc:	d1e5      	bne.n	8006bca <__ieee754_atan2+0x42>
 8006bfe:	a13e      	add	r1, pc, #248	; (adr r1, 8006cf8 <__ieee754_atan2+0x170>)
 8006c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c04:	e7e1      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c06:	ea52 0808 	orrs.w	r8, r2, r8
 8006c0a:	d106      	bne.n	8006c1a <__ieee754_atan2+0x92>
 8006c0c:	f1bc 0f00 	cmp.w	ip, #0
 8006c10:	da6b      	bge.n	8006cea <__ieee754_atan2+0x162>
 8006c12:	a13b      	add	r1, pc, #236	; (adr r1, 8006d00 <__ieee754_atan2+0x178>)
 8006c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c18:	e7d7      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c1a:	4572      	cmp	r2, lr
 8006c1c:	d120      	bne.n	8006c60 <__ieee754_atan2+0xd8>
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d111      	bne.n	8006c46 <__ieee754_atan2+0xbe>
 8006c22:	2c02      	cmp	r4, #2
 8006c24:	d007      	beq.n	8006c36 <__ieee754_atan2+0xae>
 8006c26:	2c03      	cmp	r4, #3
 8006c28:	d009      	beq.n	8006c3e <__ieee754_atan2+0xb6>
 8006c2a:	2c01      	cmp	r4, #1
 8006c2c:	d155      	bne.n	8006cda <__ieee754_atan2+0x152>
 8006c2e:	a136      	add	r1, pc, #216	; (adr r1, 8006d08 <__ieee754_atan2+0x180>)
 8006c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c34:	e7c9      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c36:	a136      	add	r1, pc, #216	; (adr r1, 8006d10 <__ieee754_atan2+0x188>)
 8006c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3c:	e7c5      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c3e:	a136      	add	r1, pc, #216	; (adr r1, 8006d18 <__ieee754_atan2+0x190>)
 8006c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c44:	e7c1      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c46:	2c02      	cmp	r4, #2
 8006c48:	d04b      	beq.n	8006ce2 <__ieee754_atan2+0x15a>
 8006c4a:	2c03      	cmp	r4, #3
 8006c4c:	d0d7      	beq.n	8006bfe <__ieee754_atan2+0x76>
 8006c4e:	2c01      	cmp	r4, #1
 8006c50:	f04f 0000 	mov.w	r0, #0
 8006c54:	d102      	bne.n	8006c5c <__ieee754_atan2+0xd4>
 8006c56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c5a:	e7b6      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	e7b4      	b.n	8006bca <__ieee754_atan2+0x42>
 8006c60:	4573      	cmp	r3, lr
 8006c62:	d0d3      	beq.n	8006c0c <__ieee754_atan2+0x84>
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	151b      	asrs	r3, r3, #20
 8006c68:	2b3c      	cmp	r3, #60	; 0x3c
 8006c6a:	dc1e      	bgt.n	8006caa <__ieee754_atan2+0x122>
 8006c6c:	2f00      	cmp	r7, #0
 8006c6e:	da01      	bge.n	8006c74 <__ieee754_atan2+0xec>
 8006c70:	333c      	adds	r3, #60	; 0x3c
 8006c72:	db1e      	blt.n	8006cb2 <__ieee754_atan2+0x12a>
 8006c74:	4632      	mov	r2, r6
 8006c76:	463b      	mov	r3, r7
 8006c78:	f7f9 fe10 	bl	800089c <__aeabi_ddiv>
 8006c7c:	ec41 0b10 	vmov	d0, r0, r1
 8006c80:	f001 f9ca 	bl	8008018 <fabs>
 8006c84:	f001 f828 	bl	8007cd8 <atan>
 8006c88:	ec51 0b10 	vmov	r0, r1, d0
 8006c8c:	2c01      	cmp	r4, #1
 8006c8e:	d013      	beq.n	8006cb8 <__ieee754_atan2+0x130>
 8006c90:	2c02      	cmp	r4, #2
 8006c92:	d015      	beq.n	8006cc0 <__ieee754_atan2+0x138>
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	d098      	beq.n	8006bca <__ieee754_atan2+0x42>
 8006c98:	a321      	add	r3, pc, #132	; (adr r3, 8006d20 <__ieee754_atan2+0x198>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fb1b 	bl	80002d8 <__aeabi_dsub>
 8006ca2:	a321      	add	r3, pc, #132	; (adr r3, 8006d28 <__ieee754_atan2+0x1a0>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	e014      	b.n	8006cd4 <__ieee754_atan2+0x14c>
 8006caa:	a121      	add	r1, pc, #132	; (adr r1, 8006d30 <__ieee754_atan2+0x1a8>)
 8006cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb0:	e7ec      	b.n	8006c8c <__ieee754_atan2+0x104>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	e7e9      	b.n	8006c8c <__ieee754_atan2+0x104>
 8006cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	e784      	b.n	8006bca <__ieee754_atan2+0x42>
 8006cc0:	a317      	add	r3, pc, #92	; (adr r3, 8006d20 <__ieee754_atan2+0x198>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fb07 	bl	80002d8 <__aeabi_dsub>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	a116      	add	r1, pc, #88	; (adr r1, 8006d28 <__ieee754_atan2+0x1a0>)
 8006cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd4:	f7f9 fb00 	bl	80002d8 <__aeabi_dsub>
 8006cd8:	e777      	b.n	8006bca <__ieee754_atan2+0x42>
 8006cda:	a117      	add	r1, pc, #92	; (adr r1, 8006d38 <__ieee754_atan2+0x1b0>)
 8006cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce0:	e773      	b.n	8006bca <__ieee754_atan2+0x42>
 8006ce2:	a111      	add	r1, pc, #68	; (adr r1, 8006d28 <__ieee754_atan2+0x1a0>)
 8006ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce8:	e76f      	b.n	8006bca <__ieee754_atan2+0x42>
 8006cea:	a111      	add	r1, pc, #68	; (adr r1, 8006d30 <__ieee754_atan2+0x1a8>)
 8006cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf0:	e76b      	b.n	8006bca <__ieee754_atan2+0x42>
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	54442d18 	.word	0x54442d18
 8006cfc:	c00921fb 	.word	0xc00921fb
 8006d00:	54442d18 	.word	0x54442d18
 8006d04:	bff921fb 	.word	0xbff921fb
 8006d08:	54442d18 	.word	0x54442d18
 8006d0c:	bfe921fb 	.word	0xbfe921fb
 8006d10:	7f3321d2 	.word	0x7f3321d2
 8006d14:	4002d97c 	.word	0x4002d97c
 8006d18:	7f3321d2 	.word	0x7f3321d2
 8006d1c:	c002d97c 	.word	0xc002d97c
 8006d20:	33145c07 	.word	0x33145c07
 8006d24:	3ca1a626 	.word	0x3ca1a626
 8006d28:	54442d18 	.word	0x54442d18
 8006d2c:	400921fb 	.word	0x400921fb
 8006d30:	54442d18 	.word	0x54442d18
 8006d34:	3ff921fb 	.word	0x3ff921fb
 8006d38:	54442d18 	.word	0x54442d18
 8006d3c:	3fe921fb 	.word	0x3fe921fb
 8006d40:	7ff00000 	.word	0x7ff00000

08006d44 <__ieee754_fmod>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	ec53 2b11 	vmov	r2, r3, d1
 8006d4c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006d50:	ea5e 0402 	orrs.w	r4, lr, r2
 8006d54:	ec51 0b10 	vmov	r0, r1, d0
 8006d58:	461e      	mov	r6, r3
 8006d5a:	ee11 5a10 	vmov	r5, s2
 8006d5e:	4694      	mov	ip, r2
 8006d60:	d00c      	beq.n	8006d7c <__ieee754_fmod+0x38>
 8006d62:	4c7a      	ldr	r4, [pc, #488]	; (8006f4c <__ieee754_fmod+0x208>)
 8006d64:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006d68:	45a0      	cmp	r8, r4
 8006d6a:	4689      	mov	r9, r1
 8006d6c:	dc06      	bgt.n	8006d7c <__ieee754_fmod+0x38>
 8006d6e:	4254      	negs	r4, r2
 8006d70:	4314      	orrs	r4, r2
 8006d72:	4f77      	ldr	r7, [pc, #476]	; (8006f50 <__ieee754_fmod+0x20c>)
 8006d74:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006d78:	42bc      	cmp	r4, r7
 8006d7a:	d909      	bls.n	8006d90 <__ieee754_fmod+0x4c>
 8006d7c:	f7f9 fc64 	bl	8000648 <__aeabi_dmul>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	f7f9 fd8a 	bl	800089c <__aeabi_ddiv>
 8006d88:	ec41 0b10 	vmov	d0, r0, r1
 8006d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d90:	45f0      	cmp	r8, lr
 8006d92:	ee10 2a10 	vmov	r2, s0
 8006d96:	4607      	mov	r7, r0
 8006d98:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006d9c:	dc0a      	bgt.n	8006db4 <__ieee754_fmod+0x70>
 8006d9e:	dbf3      	blt.n	8006d88 <__ieee754_fmod+0x44>
 8006da0:	42a8      	cmp	r0, r5
 8006da2:	d3f1      	bcc.n	8006d88 <__ieee754_fmod+0x44>
 8006da4:	d106      	bne.n	8006db4 <__ieee754_fmod+0x70>
 8006da6:	496b      	ldr	r1, [pc, #428]	; (8006f54 <__ieee754_fmod+0x210>)
 8006da8:	0fe4      	lsrs	r4, r4, #31
 8006daa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006dae:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006db2:	e7e9      	b.n	8006d88 <__ieee754_fmod+0x44>
 8006db4:	4b68      	ldr	r3, [pc, #416]	; (8006f58 <__ieee754_fmod+0x214>)
 8006db6:	4598      	cmp	r8, r3
 8006db8:	dc49      	bgt.n	8006e4e <__ieee754_fmod+0x10a>
 8006dba:	f1b8 0f00 	cmp.w	r8, #0
 8006dbe:	d13d      	bne.n	8006e3c <__ieee754_fmod+0xf8>
 8006dc0:	4866      	ldr	r0, [pc, #408]	; (8006f5c <__ieee754_fmod+0x218>)
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	dc36      	bgt.n	8006e36 <__ieee754_fmod+0xf2>
 8006dc8:	459e      	cmp	lr, r3
 8006dca:	dc51      	bgt.n	8006e70 <__ieee754_fmod+0x12c>
 8006dcc:	f1be 0f00 	cmp.w	lr, #0
 8006dd0:	d145      	bne.n	8006e5e <__ieee754_fmod+0x11a>
 8006dd2:	4b62      	ldr	r3, [pc, #392]	; (8006f5c <__ieee754_fmod+0x218>)
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	dc3e      	bgt.n	8006e58 <__ieee754_fmod+0x114>
 8006dda:	4961      	ldr	r1, [pc, #388]	; (8006f60 <__ieee754_fmod+0x21c>)
 8006ddc:	4288      	cmp	r0, r1
 8006dde:	db4c      	blt.n	8006e7a <__ieee754_fmod+0x136>
 8006de0:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006de8:	4a5d      	ldr	r2, [pc, #372]	; (8006f60 <__ieee754_fmod+0x21c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	db59      	blt.n	8006ea2 <__ieee754_fmod+0x15e>
 8006dee:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006df2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006df6:	1ac0      	subs	r0, r0, r3
 8006df8:	1b8a      	subs	r2, r1, r6
 8006dfa:	eba7 050c 	sub.w	r5, r7, ip
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d166      	bne.n	8006ed0 <__ieee754_fmod+0x18c>
 8006e02:	4567      	cmp	r7, ip
 8006e04:	bf38      	it	cc
 8006e06:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	bfbc      	itt	lt
 8006e0e:	463d      	movlt	r5, r7
 8006e10:	460a      	movlt	r2, r1
 8006e12:	ea52 0105 	orrs.w	r1, r2, r5
 8006e16:	d0c6      	beq.n	8006da6 <__ieee754_fmod+0x62>
 8006e18:	494f      	ldr	r1, [pc, #316]	; (8006f58 <__ieee754_fmod+0x214>)
 8006e1a:	428a      	cmp	r2, r1
 8006e1c:	dd6d      	ble.n	8006efa <__ieee754_fmod+0x1b6>
 8006e1e:	4950      	ldr	r1, [pc, #320]	; (8006f60 <__ieee754_fmod+0x21c>)
 8006e20:	428b      	cmp	r3, r1
 8006e22:	db70      	blt.n	8006f06 <__ieee754_fmod+0x1c2>
 8006e24:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006e28:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006e2c:	4314      	orrs	r4, r2
 8006e2e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006e32:	4628      	mov	r0, r5
 8006e34:	e7a8      	b.n	8006d88 <__ieee754_fmod+0x44>
 8006e36:	3801      	subs	r0, #1
 8006e38:	0049      	lsls	r1, r1, #1
 8006e3a:	e7c3      	b.n	8006dc4 <__ieee754_fmod+0x80>
 8006e3c:	4848      	ldr	r0, [pc, #288]	; (8006f60 <__ieee754_fmod+0x21c>)
 8006e3e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006e42:	0049      	lsls	r1, r1, #1
 8006e44:	2900      	cmp	r1, #0
 8006e46:	f100 30ff 	add.w	r0, r0, #4294967295
 8006e4a:	dcfa      	bgt.n	8006e42 <__ieee754_fmod+0xfe>
 8006e4c:	e7bc      	b.n	8006dc8 <__ieee754_fmod+0x84>
 8006e4e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8006e52:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006e56:	e7b7      	b.n	8006dc8 <__ieee754_fmod+0x84>
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	0049      	lsls	r1, r1, #1
 8006e5c:	e7bb      	b.n	8006dd6 <__ieee754_fmod+0x92>
 8006e5e:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <__ieee754_fmod+0x21c>)
 8006e60:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8006e64:	0049      	lsls	r1, r1, #1
 8006e66:	2900      	cmp	r1, #0
 8006e68:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e6c:	dcfa      	bgt.n	8006e64 <__ieee754_fmod+0x120>
 8006e6e:	e7b4      	b.n	8006dda <__ieee754_fmod+0x96>
 8006e70:	ea4f 532e 	mov.w	r3, lr, asr #20
 8006e74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e78:	e7af      	b.n	8006dda <__ieee754_fmod+0x96>
 8006e7a:	1a0f      	subs	r7, r1, r0
 8006e7c:	2f1f      	cmp	r7, #31
 8006e7e:	dc0a      	bgt.n	8006e96 <__ieee754_fmod+0x152>
 8006e80:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8006e84:	fa08 f807 	lsl.w	r8, r8, r7
 8006e88:	fa22 f101 	lsr.w	r1, r2, r1
 8006e8c:	ea41 0108 	orr.w	r1, r1, r8
 8006e90:	fa02 f707 	lsl.w	r7, r2, r7
 8006e94:	e7a8      	b.n	8006de8 <__ieee754_fmod+0xa4>
 8006e96:	4933      	ldr	r1, [pc, #204]	; (8006f64 <__ieee754_fmod+0x220>)
 8006e98:	1a09      	subs	r1, r1, r0
 8006e9a:	fa02 f101 	lsl.w	r1, r2, r1
 8006e9e:	2700      	movs	r7, #0
 8006ea0:	e7a2      	b.n	8006de8 <__ieee754_fmod+0xa4>
 8006ea2:	eba2 0c03 	sub.w	ip, r2, r3
 8006ea6:	f1bc 0f1f 	cmp.w	ip, #31
 8006eaa:	dc0a      	bgt.n	8006ec2 <__ieee754_fmod+0x17e>
 8006eac:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8006eb0:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006eb4:	fa25 f606 	lsr.w	r6, r5, r6
 8006eb8:	ea46 060e 	orr.w	r6, r6, lr
 8006ebc:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006ec0:	e799      	b.n	8006df6 <__ieee754_fmod+0xb2>
 8006ec2:	4e28      	ldr	r6, [pc, #160]	; (8006f64 <__ieee754_fmod+0x220>)
 8006ec4:	1af6      	subs	r6, r6, r3
 8006ec6:	fa05 f606 	lsl.w	r6, r5, r6
 8006eca:	f04f 0c00 	mov.w	ip, #0
 8006ece:	e792      	b.n	8006df6 <__ieee754_fmod+0xb2>
 8006ed0:	4567      	cmp	r7, ip
 8006ed2:	bf38      	it	cc
 8006ed4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	da05      	bge.n	8006ee8 <__ieee754_fmod+0x1a4>
 8006edc:	0ffa      	lsrs	r2, r7, #31
 8006ede:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006ee2:	007f      	lsls	r7, r7, #1
 8006ee4:	3801      	subs	r0, #1
 8006ee6:	e787      	b.n	8006df8 <__ieee754_fmod+0xb4>
 8006ee8:	ea52 0105 	orrs.w	r1, r2, r5
 8006eec:	f43f af5b 	beq.w	8006da6 <__ieee754_fmod+0x62>
 8006ef0:	0fe9      	lsrs	r1, r5, #31
 8006ef2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006ef6:	006f      	lsls	r7, r5, #1
 8006ef8:	e7f4      	b.n	8006ee4 <__ieee754_fmod+0x1a0>
 8006efa:	0fe8      	lsrs	r0, r5, #31
 8006efc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006f00:	006d      	lsls	r5, r5, #1
 8006f02:	3b01      	subs	r3, #1
 8006f04:	e789      	b.n	8006e1a <__ieee754_fmod+0xd6>
 8006f06:	1ac9      	subs	r1, r1, r3
 8006f08:	2914      	cmp	r1, #20
 8006f0a:	dc0a      	bgt.n	8006f22 <__ieee754_fmod+0x1de>
 8006f0c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	40cd      	lsrs	r5, r1
 8006f16:	432b      	orrs	r3, r5
 8006f18:	410a      	asrs	r2, r1
 8006f1a:	ea42 0104 	orr.w	r1, r2, r4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	e732      	b.n	8006d88 <__ieee754_fmod+0x44>
 8006f22:	291f      	cmp	r1, #31
 8006f24:	dc07      	bgt.n	8006f36 <__ieee754_fmod+0x1f2>
 8006f26:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006f2a:	40cd      	lsrs	r5, r1
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	432b      	orrs	r3, r5
 8006f32:	4622      	mov	r2, r4
 8006f34:	e7f1      	b.n	8006f1a <__ieee754_fmod+0x1d6>
 8006f36:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8006f3a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006f3e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006f42:	33e2      	adds	r3, #226	; 0xe2
 8006f44:	fa42 f303 	asr.w	r3, r2, r3
 8006f48:	e7f3      	b.n	8006f32 <__ieee754_fmod+0x1ee>
 8006f4a:	bf00      	nop
 8006f4c:	7fefffff 	.word	0x7fefffff
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	08008590 	.word	0x08008590
 8006f58:	000fffff 	.word	0x000fffff
 8006f5c:	fffffbed 	.word	0xfffffbed
 8006f60:	fffffc02 	.word	0xfffffc02
 8006f64:	fffffbe2 	.word	0xfffffbe2

08006f68 <__ieee754_rem_pio2>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	ec57 6b10 	vmov	r6, r7, d0
 8006f70:	4bc3      	ldr	r3, [pc, #780]	; (8007280 <__ieee754_rem_pio2+0x318>)
 8006f72:	b08d      	sub	sp, #52	; 0x34
 8006f74:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006f78:	4598      	cmp	r8, r3
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	9704      	str	r7, [sp, #16]
 8006f7e:	dc07      	bgt.n	8006f90 <__ieee754_rem_pio2+0x28>
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	ed84 0b00 	vstr	d0, [r4]
 8006f88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	e027      	b.n	8006fe0 <__ieee754_rem_pio2+0x78>
 8006f90:	4bbc      	ldr	r3, [pc, #752]	; (8007284 <__ieee754_rem_pio2+0x31c>)
 8006f92:	4598      	cmp	r8, r3
 8006f94:	dc75      	bgt.n	8007082 <__ieee754_rem_pio2+0x11a>
 8006f96:	9b04      	ldr	r3, [sp, #16]
 8006f98:	4dbb      	ldr	r5, [pc, #748]	; (8007288 <__ieee754_rem_pio2+0x320>)
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	ee10 0a10 	vmov	r0, s0
 8006fa0:	a3a9      	add	r3, pc, #676	; (adr r3, 8007248 <__ieee754_rem_pio2+0x2e0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	dd36      	ble.n	8007018 <__ieee754_rem_pio2+0xb0>
 8006faa:	f7f9 f995 	bl	80002d8 <__aeabi_dsub>
 8006fae:	45a8      	cmp	r8, r5
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	460f      	mov	r7, r1
 8006fb4:	d018      	beq.n	8006fe8 <__ieee754_rem_pio2+0x80>
 8006fb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007250 <__ieee754_rem_pio2+0x2e8>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 f98c 	bl	80002d8 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	e9c4 2300 	strd	r2, r3, [r4]
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f984 	bl	80002d8 <__aeabi_dsub>
 8006fd0:	a39f      	add	r3, pc, #636	; (adr r3, 8007250 <__ieee754_rem_pio2+0x2e8>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f97f 	bl	80002d8 <__aeabi_dsub>
 8006fda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006fde:	2501      	movs	r5, #1
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	b00d      	add	sp, #52	; 0x34
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	a39b      	add	r3, pc, #620	; (adr r3, 8007258 <__ieee754_rem_pio2+0x2f0>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 f973 	bl	80002d8 <__aeabi_dsub>
 8006ff2:	a39b      	add	r3, pc, #620	; (adr r3, 8007260 <__ieee754_rem_pio2+0x2f8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	460f      	mov	r7, r1
 8006ffc:	f7f9 f96c 	bl	80002d8 <__aeabi_dsub>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	e9c4 2300 	strd	r2, r3, [r4]
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 f964 	bl	80002d8 <__aeabi_dsub>
 8007010:	a393      	add	r3, pc, #588	; (adr r3, 8007260 <__ieee754_rem_pio2+0x2f8>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e7de      	b.n	8006fd6 <__ieee754_rem_pio2+0x6e>
 8007018:	f7f9 f960 	bl	80002dc <__adddf3>
 800701c:	45a8      	cmp	r8, r5
 800701e:	4606      	mov	r6, r0
 8007020:	460f      	mov	r7, r1
 8007022:	d016      	beq.n	8007052 <__ieee754_rem_pio2+0xea>
 8007024:	a38a      	add	r3, pc, #552	; (adr r3, 8007250 <__ieee754_rem_pio2+0x2e8>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 f957 	bl	80002dc <__adddf3>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	e9c4 2300 	strd	r2, r3, [r4]
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 f94d 	bl	80002d8 <__aeabi_dsub>
 800703e:	a384      	add	r3, pc, #528	; (adr r3, 8007250 <__ieee754_rem_pio2+0x2e8>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f7f9 f94a 	bl	80002dc <__adddf3>
 8007048:	f04f 35ff 	mov.w	r5, #4294967295
 800704c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007050:	e7c6      	b.n	8006fe0 <__ieee754_rem_pio2+0x78>
 8007052:	a381      	add	r3, pc, #516	; (adr r3, 8007258 <__ieee754_rem_pio2+0x2f0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 f940 	bl	80002dc <__adddf3>
 800705c:	a380      	add	r3, pc, #512	; (adr r3, 8007260 <__ieee754_rem_pio2+0x2f8>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	f7f9 f939 	bl	80002dc <__adddf3>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	e9c4 2300 	strd	r2, r3, [r4]
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	f7f9 f92f 	bl	80002d8 <__aeabi_dsub>
 800707a:	a379      	add	r3, pc, #484	; (adr r3, 8007260 <__ieee754_rem_pio2+0x2f8>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	e7e0      	b.n	8007044 <__ieee754_rem_pio2+0xdc>
 8007082:	4b82      	ldr	r3, [pc, #520]	; (800728c <__ieee754_rem_pio2+0x324>)
 8007084:	4598      	cmp	r8, r3
 8007086:	f300 80d0 	bgt.w	800722a <__ieee754_rem_pio2+0x2c2>
 800708a:	f000 ffc5 	bl	8008018 <fabs>
 800708e:	ec57 6b10 	vmov	r6, r7, d0
 8007092:	ee10 0a10 	vmov	r0, s0
 8007096:	a374      	add	r3, pc, #464	; (adr r3, 8007268 <__ieee754_rem_pio2+0x300>)
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fad3 	bl	8000648 <__aeabi_dmul>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b7a      	ldr	r3, [pc, #488]	; (8007290 <__ieee754_rem_pio2+0x328>)
 80070a6:	f7f9 f919 	bl	80002dc <__adddf3>
 80070aa:	f7f9 fd7d 	bl	8000ba8 <__aeabi_d2iz>
 80070ae:	4605      	mov	r5, r0
 80070b0:	f7f9 fa60 	bl	8000574 <__aeabi_i2d>
 80070b4:	a364      	add	r3, pc, #400	; (adr r3, 8007248 <__ieee754_rem_pio2+0x2e0>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070be:	f7f9 fac3 	bl	8000648 <__aeabi_dmul>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 f905 	bl	80002d8 <__aeabi_dsub>
 80070ce:	a360      	add	r3, pc, #384	; (adr r3, 8007250 <__ieee754_rem_pio2+0x2e8>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070dc:	f7f9 fab4 	bl	8000648 <__aeabi_dmul>
 80070e0:	2d1f      	cmp	r5, #31
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	dc0c      	bgt.n	8007102 <__ieee754_rem_pio2+0x19a>
 80070e8:	1e6a      	subs	r2, r5, #1
 80070ea:	4b6a      	ldr	r3, [pc, #424]	; (8007294 <__ieee754_rem_pio2+0x32c>)
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	4543      	cmp	r3, r8
 80070f2:	d006      	beq.n	8007102 <__ieee754_rem_pio2+0x19a>
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	f7f9 f8ec 	bl	80002d8 <__aeabi_dsub>
 8007100:	e00e      	b.n	8007120 <__ieee754_rem_pio2+0x1b8>
 8007102:	4632      	mov	r2, r6
 8007104:	463b      	mov	r3, r7
 8007106:	4650      	mov	r0, sl
 8007108:	4659      	mov	r1, fp
 800710a:	f7f9 f8e5 	bl	80002d8 <__aeabi_dsub>
 800710e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b10      	cmp	r3, #16
 800711e:	dc02      	bgt.n	8007126 <__ieee754_rem_pio2+0x1be>
 8007120:	e9c4 0100 	strd	r0, r1, [r4]
 8007124:	e039      	b.n	800719a <__ieee754_rem_pio2+0x232>
 8007126:	a34c      	add	r3, pc, #304	; (adr r3, 8007258 <__ieee754_rem_pio2+0x2f0>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007130:	f7f9 fa8a 	bl	8000648 <__aeabi_dmul>
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4650      	mov	r0, sl
 800713e:	4659      	mov	r1, fp
 8007140:	f7f9 f8ca 	bl	80002d8 <__aeabi_dsub>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4680      	mov	r8, r0
 800714a:	4689      	mov	r9, r1
 800714c:	4650      	mov	r0, sl
 800714e:	4659      	mov	r1, fp
 8007150:	f7f9 f8c2 	bl	80002d8 <__aeabi_dsub>
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	f7f9 f8be 	bl	80002d8 <__aeabi_dsub>
 800715c:	a340      	add	r3, pc, #256	; (adr r3, 8007260 <__ieee754_rem_pio2+0x2f8>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716a:	f7f9 fa6d 	bl	8000648 <__aeabi_dmul>
 800716e:	4632      	mov	r2, r6
 8007170:	463b      	mov	r3, r7
 8007172:	f7f9 f8b1 	bl	80002d8 <__aeabi_dsub>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4606      	mov	r6, r0
 800717c:	460f      	mov	r7, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f7f9 f8a9 	bl	80002d8 <__aeabi_dsub>
 8007186:	9a05      	ldr	r2, [sp, #20]
 8007188:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b31      	cmp	r3, #49	; 0x31
 8007190:	dc20      	bgt.n	80071d4 <__ieee754_rem_pio2+0x26c>
 8007192:	e9c4 0100 	strd	r0, r1, [r4]
 8007196:	46c2      	mov	sl, r8
 8007198:	46cb      	mov	fp, r9
 800719a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800719e:	4650      	mov	r0, sl
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	4659      	mov	r1, fp
 80071a6:	f7f9 f897 	bl	80002d8 <__aeabi_dsub>
 80071aa:	463b      	mov	r3, r7
 80071ac:	4632      	mov	r2, r6
 80071ae:	f7f9 f893 	bl	80002d8 <__aeabi_dsub>
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80071ba:	f6bf af11 	bge.w	8006fe0 <__ieee754_rem_pio2+0x78>
 80071be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	f8c4 8000 	str.w	r8, [r4]
 80071c8:	60a0      	str	r0, [r4, #8]
 80071ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ce:	60e3      	str	r3, [r4, #12]
 80071d0:	426d      	negs	r5, r5
 80071d2:	e705      	b.n	8006fe0 <__ieee754_rem_pio2+0x78>
 80071d4:	a326      	add	r3, pc, #152	; (adr r3, 8007270 <__ieee754_rem_pio2+0x308>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071de:	f7f9 fa33 	bl	8000648 <__aeabi_dmul>
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4640      	mov	r0, r8
 80071ec:	4649      	mov	r1, r9
 80071ee:	f7f9 f873 	bl	80002d8 <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4682      	mov	sl, r0
 80071f8:	468b      	mov	fp, r1
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 f86b 	bl	80002d8 <__aeabi_dsub>
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	f7f9 f867 	bl	80002d8 <__aeabi_dsub>
 800720a:	a31b      	add	r3, pc, #108	; (adr r3, 8007278 <__ieee754_rem_pio2+0x310>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007218:	f7f9 fa16 	bl	8000648 <__aeabi_dmul>
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	f7f9 f85a 	bl	80002d8 <__aeabi_dsub>
 8007224:	4606      	mov	r6, r0
 8007226:	460f      	mov	r7, r1
 8007228:	e764      	b.n	80070f4 <__ieee754_rem_pio2+0x18c>
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <__ieee754_rem_pio2+0x330>)
 800722c:	4598      	cmp	r8, r3
 800722e:	dd35      	ble.n	800729c <__ieee754_rem_pio2+0x334>
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	463b      	mov	r3, r7
 8007236:	4630      	mov	r0, r6
 8007238:	4639      	mov	r1, r7
 800723a:	f7f9 f84d 	bl	80002d8 <__aeabi_dsub>
 800723e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007242:	e9c4 0100 	strd	r0, r1, [r4]
 8007246:	e6a1      	b.n	8006f8c <__ieee754_rem_pio2+0x24>
 8007248:	54400000 	.word	0x54400000
 800724c:	3ff921fb 	.word	0x3ff921fb
 8007250:	1a626331 	.word	0x1a626331
 8007254:	3dd0b461 	.word	0x3dd0b461
 8007258:	1a600000 	.word	0x1a600000
 800725c:	3dd0b461 	.word	0x3dd0b461
 8007260:	2e037073 	.word	0x2e037073
 8007264:	3ba3198a 	.word	0x3ba3198a
 8007268:	6dc9c883 	.word	0x6dc9c883
 800726c:	3fe45f30 	.word	0x3fe45f30
 8007270:	2e000000 	.word	0x2e000000
 8007274:	3ba3198a 	.word	0x3ba3198a
 8007278:	252049c1 	.word	0x252049c1
 800727c:	397b839a 	.word	0x397b839a
 8007280:	3fe921fb 	.word	0x3fe921fb
 8007284:	4002d97b 	.word	0x4002d97b
 8007288:	3ff921fb 	.word	0x3ff921fb
 800728c:	413921fb 	.word	0x413921fb
 8007290:	3fe00000 	.word	0x3fe00000
 8007294:	080085a0 	.word	0x080085a0
 8007298:	7fefffff 	.word	0x7fefffff
 800729c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80072a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80072a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80072a8:	4630      	mov	r0, r6
 80072aa:	460f      	mov	r7, r1
 80072ac:	f7f9 fc7c 	bl	8000ba8 <__aeabi_d2iz>
 80072b0:	f7f9 f960 	bl	8000574 <__aeabi_i2d>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4630      	mov	r0, r6
 80072ba:	4639      	mov	r1, r7
 80072bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072c0:	f7f9 f80a 	bl	80002d8 <__aeabi_dsub>
 80072c4:	2200      	movs	r2, #0
 80072c6:	4b1f      	ldr	r3, [pc, #124]	; (8007344 <__ieee754_rem_pio2+0x3dc>)
 80072c8:	f7f9 f9be 	bl	8000648 <__aeabi_dmul>
 80072cc:	460f      	mov	r7, r1
 80072ce:	4606      	mov	r6, r0
 80072d0:	f7f9 fc6a 	bl	8000ba8 <__aeabi_d2iz>
 80072d4:	f7f9 f94e 	bl	8000574 <__aeabi_i2d>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072e4:	f7f8 fff8 	bl	80002d8 <__aeabi_dsub>
 80072e8:	2200      	movs	r2, #0
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <__ieee754_rem_pio2+0x3dc>)
 80072ec:	f7f9 f9ac 	bl	8000648 <__aeabi_dmul>
 80072f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80072f8:	f04f 0803 	mov.w	r8, #3
 80072fc:	2600      	movs	r6, #0
 80072fe:	2700      	movs	r7, #0
 8007300:	4632      	mov	r2, r6
 8007302:	463b      	mov	r3, r7
 8007304:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007308:	f108 3aff 	add.w	sl, r8, #4294967295
 800730c:	f7f9 fc04 	bl	8000b18 <__aeabi_dcmpeq>
 8007310:	b9b0      	cbnz	r0, 8007340 <__ieee754_rem_pio2+0x3d8>
 8007312:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <__ieee754_rem_pio2+0x3e0>)
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2302      	movs	r3, #2
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	462a      	mov	r2, r5
 800731c:	4643      	mov	r3, r8
 800731e:	4621      	mov	r1, r4
 8007320:	a806      	add	r0, sp, #24
 8007322:	f000 f8dd 	bl	80074e0 <__kernel_rem_pio2>
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	4605      	mov	r5, r0
 800732c:	f6bf ae58 	bge.w	8006fe0 <__ieee754_rem_pio2+0x78>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007336:	6063      	str	r3, [r4, #4]
 8007338:	68e3      	ldr	r3, [r4, #12]
 800733a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800733e:	e746      	b.n	80071ce <__ieee754_rem_pio2+0x266>
 8007340:	46d0      	mov	r8, sl
 8007342:	e7dd      	b.n	8007300 <__ieee754_rem_pio2+0x398>
 8007344:	41700000 	.word	0x41700000
 8007348:	08008620 	.word	0x08008620
 800734c:	00000000 	.word	0x00000000

08007350 <__kernel_cos>:
 8007350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	ec59 8b10 	vmov	r8, r9, d0
 8007358:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800735c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007360:	ed2d 8b02 	vpush	{d8}
 8007364:	eeb0 8a41 	vmov.f32	s16, s2
 8007368:	eef0 8a61 	vmov.f32	s17, s3
 800736c:	da07      	bge.n	800737e <__kernel_cos+0x2e>
 800736e:	ee10 0a10 	vmov	r0, s0
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fc18 	bl	8000ba8 <__aeabi_d2iz>
 8007378:	2800      	cmp	r0, #0
 800737a:	f000 8089 	beq.w	8007490 <__kernel_cos+0x140>
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	4640      	mov	r0, r8
 8007384:	4649      	mov	r1, r9
 8007386:	f7f9 f95f 	bl	8000648 <__aeabi_dmul>
 800738a:	2200      	movs	r2, #0
 800738c:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <__kernel_cos+0x178>)
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	f7f9 f959 	bl	8000648 <__aeabi_dmul>
 8007396:	a340      	add	r3, pc, #256	; (adr r3, 8007498 <__kernel_cos+0x148>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4682      	mov	sl, r0
 800739e:	468b      	mov	fp, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f9 f950 	bl	8000648 <__aeabi_dmul>
 80073a8:	a33d      	add	r3, pc, #244	; (adr r3, 80074a0 <__kernel_cos+0x150>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 ff95 	bl	80002dc <__adddf3>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	f7f9 f947 	bl	8000648 <__aeabi_dmul>
 80073ba:	a33b      	add	r3, pc, #236	; (adr r3, 80074a8 <__kernel_cos+0x158>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f8 ff8a 	bl	80002d8 <__aeabi_dsub>
 80073c4:	4622      	mov	r2, r4
 80073c6:	462b      	mov	r3, r5
 80073c8:	f7f9 f93e 	bl	8000648 <__aeabi_dmul>
 80073cc:	a338      	add	r3, pc, #224	; (adr r3, 80074b0 <__kernel_cos+0x160>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f8 ff83 	bl	80002dc <__adddf3>
 80073d6:	4622      	mov	r2, r4
 80073d8:	462b      	mov	r3, r5
 80073da:	f7f9 f935 	bl	8000648 <__aeabi_dmul>
 80073de:	a336      	add	r3, pc, #216	; (adr r3, 80074b8 <__kernel_cos+0x168>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f8 ff78 	bl	80002d8 <__aeabi_dsub>
 80073e8:	4622      	mov	r2, r4
 80073ea:	462b      	mov	r3, r5
 80073ec:	f7f9 f92c 	bl	8000648 <__aeabi_dmul>
 80073f0:	a333      	add	r3, pc, #204	; (adr r3, 80074c0 <__kernel_cos+0x170>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f8 ff71 	bl	80002dc <__adddf3>
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	f7f9 f923 	bl	8000648 <__aeabi_dmul>
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	f7f9 f91f 	bl	8000648 <__aeabi_dmul>
 800740a:	ec53 2b18 	vmov	r2, r3, d8
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	f7f9 f917 	bl	8000648 <__aeabi_dmul>
 800741a:	460b      	mov	r3, r1
 800741c:	4602      	mov	r2, r0
 800741e:	4629      	mov	r1, r5
 8007420:	4620      	mov	r0, r4
 8007422:	f7f8 ff59 	bl	80002d8 <__aeabi_dsub>
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <__kernel_cos+0x17c>)
 8007428:	429e      	cmp	r6, r3
 800742a:	4680      	mov	r8, r0
 800742c:	4689      	mov	r9, r1
 800742e:	dc11      	bgt.n	8007454 <__kernel_cos+0x104>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4650      	mov	r0, sl
 8007436:	4659      	mov	r1, fp
 8007438:	f7f8 ff4e 	bl	80002d8 <__aeabi_dsub>
 800743c:	460b      	mov	r3, r1
 800743e:	4924      	ldr	r1, [pc, #144]	; (80074d0 <__kernel_cos+0x180>)
 8007440:	4602      	mov	r2, r0
 8007442:	2000      	movs	r0, #0
 8007444:	f7f8 ff48 	bl	80002d8 <__aeabi_dsub>
 8007448:	ecbd 8b02 	vpop	{d8}
 800744c:	ec41 0b10 	vmov	d0, r0, r1
 8007450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <__kernel_cos+0x184>)
 8007456:	491e      	ldr	r1, [pc, #120]	; (80074d0 <__kernel_cos+0x180>)
 8007458:	429e      	cmp	r6, r3
 800745a:	bfcc      	ite	gt
 800745c:	4d1e      	ldrgt	r5, [pc, #120]	; (80074d8 <__kernel_cos+0x188>)
 800745e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007462:	2400      	movs	r4, #0
 8007464:	4622      	mov	r2, r4
 8007466:	462b      	mov	r3, r5
 8007468:	2000      	movs	r0, #0
 800746a:	f7f8 ff35 	bl	80002d8 <__aeabi_dsub>
 800746e:	4622      	mov	r2, r4
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	462b      	mov	r3, r5
 8007476:	4650      	mov	r0, sl
 8007478:	4659      	mov	r1, fp
 800747a:	f7f8 ff2d 	bl	80002d8 <__aeabi_dsub>
 800747e:	4642      	mov	r2, r8
 8007480:	464b      	mov	r3, r9
 8007482:	f7f8 ff29 	bl	80002d8 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	e7d9      	b.n	8007444 <__kernel_cos+0xf4>
 8007490:	2000      	movs	r0, #0
 8007492:	490f      	ldr	r1, [pc, #60]	; (80074d0 <__kernel_cos+0x180>)
 8007494:	e7d8      	b.n	8007448 <__kernel_cos+0xf8>
 8007496:	bf00      	nop
 8007498:	be8838d4 	.word	0xbe8838d4
 800749c:	bda8fae9 	.word	0xbda8fae9
 80074a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80074a4:	3e21ee9e 	.word	0x3e21ee9e
 80074a8:	809c52ad 	.word	0x809c52ad
 80074ac:	3e927e4f 	.word	0x3e927e4f
 80074b0:	19cb1590 	.word	0x19cb1590
 80074b4:	3efa01a0 	.word	0x3efa01a0
 80074b8:	16c15177 	.word	0x16c15177
 80074bc:	3f56c16c 	.word	0x3f56c16c
 80074c0:	5555554c 	.word	0x5555554c
 80074c4:	3fa55555 	.word	0x3fa55555
 80074c8:	3fe00000 	.word	0x3fe00000
 80074cc:	3fd33332 	.word	0x3fd33332
 80074d0:	3ff00000 	.word	0x3ff00000
 80074d4:	3fe90000 	.word	0x3fe90000
 80074d8:	3fd20000 	.word	0x3fd20000
 80074dc:	00000000 	.word	0x00000000

080074e0 <__kernel_rem_pio2>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	ed2d 8b02 	vpush	{d8}
 80074e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80074ec:	1ed4      	subs	r4, r2, #3
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	9101      	str	r1, [sp, #4]
 80074f2:	4bc5      	ldr	r3, [pc, #788]	; (8007808 <__kernel_rem_pio2+0x328>)
 80074f4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80074f6:	9009      	str	r0, [sp, #36]	; 0x24
 80074f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	9b08      	ldr	r3, [sp, #32]
 8007500:	3b01      	subs	r3, #1
 8007502:	9307      	str	r3, [sp, #28]
 8007504:	2318      	movs	r3, #24
 8007506:	fb94 f4f3 	sdiv	r4, r4, r3
 800750a:	f06f 0317 	mvn.w	r3, #23
 800750e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007512:	fb04 3303 	mla	r3, r4, r3, r3
 8007516:	eb03 0a02 	add.w	sl, r3, r2
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	9a07      	ldr	r2, [sp, #28]
 800751e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80077f8 <__kernel_rem_pio2+0x318>
 8007522:	eb03 0802 	add.w	r8, r3, r2
 8007526:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007528:	1aa7      	subs	r7, r4, r2
 800752a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800752e:	ae22      	add	r6, sp, #136	; 0x88
 8007530:	2500      	movs	r5, #0
 8007532:	4545      	cmp	r5, r8
 8007534:	dd13      	ble.n	800755e <__kernel_rem_pio2+0x7e>
 8007536:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80077f8 <__kernel_rem_pio2+0x318>
 800753a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800753e:	2600      	movs	r6, #0
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	429e      	cmp	r6, r3
 8007544:	dc32      	bgt.n	80075ac <__kernel_rem_pio2+0xcc>
 8007546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	199d      	adds	r5, r3, r6
 800754e:	ab22      	add	r3, sp, #136	; 0x88
 8007550:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007554:	9306      	str	r3, [sp, #24]
 8007556:	ec59 8b18 	vmov	r8, r9, d8
 800755a:	2700      	movs	r7, #0
 800755c:	e01f      	b.n	800759e <__kernel_rem_pio2+0xbe>
 800755e:	42ef      	cmn	r7, r5
 8007560:	d407      	bmi.n	8007572 <__kernel_rem_pio2+0x92>
 8007562:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007566:	f7f9 f805 	bl	8000574 <__aeabi_i2d>
 800756a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800756e:	3501      	adds	r5, #1
 8007570:	e7df      	b.n	8007532 <__kernel_rem_pio2+0x52>
 8007572:	ec51 0b18 	vmov	r0, r1, d8
 8007576:	e7f8      	b.n	800756a <__kernel_rem_pio2+0x8a>
 8007578:	9906      	ldr	r1, [sp, #24]
 800757a:	9d02      	ldr	r5, [sp, #8]
 800757c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007580:	9106      	str	r1, [sp, #24]
 8007582:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007586:	9502      	str	r5, [sp, #8]
 8007588:	f7f9 f85e 	bl	8000648 <__aeabi_dmul>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f8 fea2 	bl	80002dc <__adddf3>
 8007598:	3701      	adds	r7, #1
 800759a:	4680      	mov	r8, r0
 800759c:	4689      	mov	r9, r1
 800759e:	9b07      	ldr	r3, [sp, #28]
 80075a0:	429f      	cmp	r7, r3
 80075a2:	dde9      	ble.n	8007578 <__kernel_rem_pio2+0x98>
 80075a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80075a8:	3601      	adds	r6, #1
 80075aa:	e7c9      	b.n	8007540 <__kernel_rem_pio2+0x60>
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	aa0e      	add	r2, sp, #56	; 0x38
 80075b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075b4:	930c      	str	r3, [sp, #48]	; 0x30
 80075b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80075b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80075bc:	9c04      	ldr	r4, [sp, #16]
 80075be:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c0:	ab9a      	add	r3, sp, #616	; 0x268
 80075c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80075c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80075d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80075d6:	ab9a      	add	r3, sp, #616	; 0x268
 80075d8:	445b      	add	r3, fp
 80075da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80075de:	2500      	movs	r5, #0
 80075e0:	1b63      	subs	r3, r4, r5
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc78      	bgt.n	80076d8 <__kernel_rem_pio2+0x1f8>
 80075e6:	4650      	mov	r0, sl
 80075e8:	ec49 8b10 	vmov	d0, r8, r9
 80075ec:	f000 fda8 	bl	8008140 <scalbn>
 80075f0:	ec57 6b10 	vmov	r6, r7, d0
 80075f4:	2200      	movs	r2, #0
 80075f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80075fa:	ee10 0a10 	vmov	r0, s0
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 f822 	bl	8000648 <__aeabi_dmul>
 8007604:	ec41 0b10 	vmov	d0, r0, r1
 8007608:	f000 fd12 	bl	8008030 <floor>
 800760c:	2200      	movs	r2, #0
 800760e:	ec51 0b10 	vmov	r0, r1, d0
 8007612:	4b7e      	ldr	r3, [pc, #504]	; (800780c <__kernel_rem_pio2+0x32c>)
 8007614:	f7f9 f818 	bl	8000648 <__aeabi_dmul>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 fe5a 	bl	80002d8 <__aeabi_dsub>
 8007624:	460f      	mov	r7, r1
 8007626:	4606      	mov	r6, r0
 8007628:	f7f9 fabe 	bl	8000ba8 <__aeabi_d2iz>
 800762c:	9006      	str	r0, [sp, #24]
 800762e:	f7f8 ffa1 	bl	8000574 <__aeabi_i2d>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4630      	mov	r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	f7f8 fe4d 	bl	80002d8 <__aeabi_dsub>
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	4606      	mov	r6, r0
 8007644:	460f      	mov	r7, r1
 8007646:	dd6c      	ble.n	8007722 <__kernel_rem_pio2+0x242>
 8007648:	1e62      	subs	r2, r4, #1
 800764a:	ab0e      	add	r3, sp, #56	; 0x38
 800764c:	f1ca 0118 	rsb	r1, sl, #24
 8007650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007654:	9d06      	ldr	r5, [sp, #24]
 8007656:	fa40 f301 	asr.w	r3, r0, r1
 800765a:	441d      	add	r5, r3
 800765c:	408b      	lsls	r3, r1
 800765e:	1ac0      	subs	r0, r0, r3
 8007660:	ab0e      	add	r3, sp, #56	; 0x38
 8007662:	9506      	str	r5, [sp, #24]
 8007664:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007668:	f1ca 0317 	rsb	r3, sl, #23
 800766c:	fa40 f303 	asr.w	r3, r0, r3
 8007670:	9302      	str	r3, [sp, #8]
 8007672:	9b02      	ldr	r3, [sp, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd62      	ble.n	800773e <__kernel_rem_pio2+0x25e>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	2200      	movs	r2, #0
 800767c:	3301      	adds	r3, #1
 800767e:	9306      	str	r3, [sp, #24]
 8007680:	4615      	mov	r5, r2
 8007682:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007686:	4294      	cmp	r4, r2
 8007688:	f300 8095 	bgt.w	80077b6 <__kernel_rem_pio2+0x2d6>
 800768c:	f1ba 0f00 	cmp.w	sl, #0
 8007690:	dd07      	ble.n	80076a2 <__kernel_rem_pio2+0x1c2>
 8007692:	f1ba 0f01 	cmp.w	sl, #1
 8007696:	f000 80a2 	beq.w	80077de <__kernel_rem_pio2+0x2fe>
 800769a:	f1ba 0f02 	cmp.w	sl, #2
 800769e:	f000 80c1 	beq.w	8007824 <__kernel_rem_pio2+0x344>
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d14a      	bne.n	800773e <__kernel_rem_pio2+0x25e>
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	2000      	movs	r0, #0
 80076ae:	4958      	ldr	r1, [pc, #352]	; (8007810 <__kernel_rem_pio2+0x330>)
 80076b0:	f7f8 fe12 	bl	80002d8 <__aeabi_dsub>
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	d040      	beq.n	800773e <__kernel_rem_pio2+0x25e>
 80076bc:	4650      	mov	r0, sl
 80076be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007800 <__kernel_rem_pio2+0x320>
 80076c2:	f000 fd3d 	bl	8008140 <scalbn>
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	ec53 2b10 	vmov	r2, r3, d0
 80076ce:	f7f8 fe03 	bl	80002d8 <__aeabi_dsub>
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	e032      	b.n	800773e <__kernel_rem_pio2+0x25e>
 80076d8:	2200      	movs	r2, #0
 80076da:	4b4e      	ldr	r3, [pc, #312]	; (8007814 <__kernel_rem_pio2+0x334>)
 80076dc:	4640      	mov	r0, r8
 80076de:	4649      	mov	r1, r9
 80076e0:	f7f8 ffb2 	bl	8000648 <__aeabi_dmul>
 80076e4:	f7f9 fa60 	bl	8000ba8 <__aeabi_d2iz>
 80076e8:	f7f8 ff44 	bl	8000574 <__aeabi_i2d>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4b4a      	ldr	r3, [pc, #296]	; (8007818 <__kernel_rem_pio2+0x338>)
 80076f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f4:	f7f8 ffa8 	bl	8000648 <__aeabi_dmul>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f8 fdea 	bl	80002d8 <__aeabi_dsub>
 8007704:	f7f9 fa50 	bl	8000ba8 <__aeabi_d2iz>
 8007708:	ab0e      	add	r3, sp, #56	; 0x38
 800770a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800770e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007716:	f7f8 fde1 	bl	80002dc <__adddf3>
 800771a:	3501      	adds	r5, #1
 800771c:	4680      	mov	r8, r0
 800771e:	4689      	mov	r9, r1
 8007720:	e75e      	b.n	80075e0 <__kernel_rem_pio2+0x100>
 8007722:	d105      	bne.n	8007730 <__kernel_rem_pio2+0x250>
 8007724:	1e63      	subs	r3, r4, #1
 8007726:	aa0e      	add	r2, sp, #56	; 0x38
 8007728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800772c:	15c3      	asrs	r3, r0, #23
 800772e:	e79f      	b.n	8007670 <__kernel_rem_pio2+0x190>
 8007730:	2200      	movs	r2, #0
 8007732:	4b3a      	ldr	r3, [pc, #232]	; (800781c <__kernel_rem_pio2+0x33c>)
 8007734:	f7f9 fa0e 	bl	8000b54 <__aeabi_dcmpge>
 8007738:	2800      	cmp	r0, #0
 800773a:	d139      	bne.n	80077b0 <__kernel_rem_pio2+0x2d0>
 800773c:	9002      	str	r0, [sp, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f9e7 	bl	8000b18 <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	f000 80c7 	beq.w	80078de <__kernel_rem_pio2+0x3fe>
 8007750:	1e65      	subs	r5, r4, #1
 8007752:	462b      	mov	r3, r5
 8007754:	2200      	movs	r2, #0
 8007756:	9904      	ldr	r1, [sp, #16]
 8007758:	428b      	cmp	r3, r1
 800775a:	da6a      	bge.n	8007832 <__kernel_rem_pio2+0x352>
 800775c:	2a00      	cmp	r2, #0
 800775e:	f000 8088 	beq.w	8007872 <__kernel_rem_pio2+0x392>
 8007762:	ab0e      	add	r3, sp, #56	; 0x38
 8007764:	f1aa 0a18 	sub.w	sl, sl, #24
 8007768:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80b4 	beq.w	80078da <__kernel_rem_pio2+0x3fa>
 8007772:	4650      	mov	r0, sl
 8007774:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007800 <__kernel_rem_pio2+0x320>
 8007778:	f000 fce2 	bl	8008140 <scalbn>
 800777c:	00ec      	lsls	r4, r5, #3
 800777e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007780:	191e      	adds	r6, r3, r4
 8007782:	ec59 8b10 	vmov	r8, r9, d0
 8007786:	f106 0a08 	add.w	sl, r6, #8
 800778a:	462f      	mov	r7, r5
 800778c:	2f00      	cmp	r7, #0
 800778e:	f280 80df 	bge.w	8007950 <__kernel_rem_pio2+0x470>
 8007792:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80077f8 <__kernel_rem_pio2+0x318>
 8007796:	f04f 0a00 	mov.w	sl, #0
 800779a:	eba5 030a 	sub.w	r3, r5, sl
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f2c0 810a 	blt.w	80079b8 <__kernel_rem_pio2+0x4d8>
 80077a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007820 <__kernel_rem_pio2+0x340>
 80077a8:	ec59 8b18 	vmov	r8, r9, d8
 80077ac:	2700      	movs	r7, #0
 80077ae:	e0f5      	b.n	800799c <__kernel_rem_pio2+0x4bc>
 80077b0:	2302      	movs	r3, #2
 80077b2:	9302      	str	r3, [sp, #8]
 80077b4:	e760      	b.n	8007678 <__kernel_rem_pio2+0x198>
 80077b6:	ab0e      	add	r3, sp, #56	; 0x38
 80077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077bc:	b94d      	cbnz	r5, 80077d2 <__kernel_rem_pio2+0x2f2>
 80077be:	b12b      	cbz	r3, 80077cc <__kernel_rem_pio2+0x2ec>
 80077c0:	a80e      	add	r0, sp, #56	; 0x38
 80077c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80077c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80077ca:	2301      	movs	r3, #1
 80077cc:	3201      	adds	r2, #1
 80077ce:	461d      	mov	r5, r3
 80077d0:	e759      	b.n	8007686 <__kernel_rem_pio2+0x1a6>
 80077d2:	a80e      	add	r0, sp, #56	; 0x38
 80077d4:	1acb      	subs	r3, r1, r3
 80077d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80077da:	462b      	mov	r3, r5
 80077dc:	e7f6      	b.n	80077cc <__kernel_rem_pio2+0x2ec>
 80077de:	1e62      	subs	r2, r4, #1
 80077e0:	ab0e      	add	r3, sp, #56	; 0x38
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80077ea:	a90e      	add	r1, sp, #56	; 0x38
 80077ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80077f0:	e757      	b.n	80076a2 <__kernel_rem_pio2+0x1c2>
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
	...
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	08008768 	.word	0x08008768
 800780c:	40200000 	.word	0x40200000
 8007810:	3ff00000 	.word	0x3ff00000
 8007814:	3e700000 	.word	0x3e700000
 8007818:	41700000 	.word	0x41700000
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	08008728 	.word	0x08008728
 8007824:	1e62      	subs	r2, r4, #1
 8007826:	ab0e      	add	r3, sp, #56	; 0x38
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007830:	e7db      	b.n	80077ea <__kernel_rem_pio2+0x30a>
 8007832:	a90e      	add	r1, sp, #56	; 0x38
 8007834:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007838:	3b01      	subs	r3, #1
 800783a:	430a      	orrs	r2, r1
 800783c:	e78b      	b.n	8007756 <__kernel_rem_pio2+0x276>
 800783e:	3301      	adds	r3, #1
 8007840:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007844:	2900      	cmp	r1, #0
 8007846:	d0fa      	beq.n	800783e <__kernel_rem_pio2+0x35e>
 8007848:	9a08      	ldr	r2, [sp, #32]
 800784a:	4422      	add	r2, r4
 800784c:	00d2      	lsls	r2, r2, #3
 800784e:	a922      	add	r1, sp, #136	; 0x88
 8007850:	18e3      	adds	r3, r4, r3
 8007852:	9206      	str	r2, [sp, #24]
 8007854:	440a      	add	r2, r1
 8007856:	9302      	str	r3, [sp, #8]
 8007858:	f10b 0108 	add.w	r1, fp, #8
 800785c:	f102 0308 	add.w	r3, r2, #8
 8007860:	1c66      	adds	r6, r4, #1
 8007862:	910a      	str	r1, [sp, #40]	; 0x28
 8007864:	2500      	movs	r5, #0
 8007866:	930d      	str	r3, [sp, #52]	; 0x34
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	42b3      	cmp	r3, r6
 800786c:	da04      	bge.n	8007878 <__kernel_rem_pio2+0x398>
 800786e:	461c      	mov	r4, r3
 8007870:	e6a6      	b.n	80075c0 <__kernel_rem_pio2+0xe0>
 8007872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007874:	2301      	movs	r3, #1
 8007876:	e7e3      	b.n	8007840 <__kernel_rem_pio2+0x360>
 8007878:	9b06      	ldr	r3, [sp, #24]
 800787a:	18ef      	adds	r7, r5, r3
 800787c:	ab22      	add	r3, sp, #136	; 0x88
 800787e:	441f      	add	r7, r3
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007886:	f7f8 fe75 	bl	8000574 <__aeabi_i2d>
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	461c      	mov	r4, r3
 800788e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007890:	e9c7 0100 	strd	r0, r1, [r7]
 8007894:	eb03 0b05 	add.w	fp, r3, r5
 8007898:	2700      	movs	r7, #0
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	f04f 0900 	mov.w	r9, #0
 80078a2:	9b07      	ldr	r3, [sp, #28]
 80078a4:	429f      	cmp	r7, r3
 80078a6:	dd08      	ble.n	80078ba <__kernel_rem_pio2+0x3da>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80078ac:	18eb      	adds	r3, r5, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80078b4:	3601      	adds	r6, #1
 80078b6:	3508      	adds	r5, #8
 80078b8:	e7d6      	b.n	8007868 <__kernel_rem_pio2+0x388>
 80078ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80078be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80078c2:	f7f8 fec1 	bl	8000648 <__aeabi_dmul>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fd05 	bl	80002dc <__adddf3>
 80078d2:	3701      	adds	r7, #1
 80078d4:	4680      	mov	r8, r0
 80078d6:	4689      	mov	r9, r1
 80078d8:	e7e3      	b.n	80078a2 <__kernel_rem_pio2+0x3c2>
 80078da:	3d01      	subs	r5, #1
 80078dc:	e741      	b.n	8007762 <__kernel_rem_pio2+0x282>
 80078de:	f1ca 0000 	rsb	r0, sl, #0
 80078e2:	ec47 6b10 	vmov	d0, r6, r7
 80078e6:	f000 fc2b 	bl	8008140 <scalbn>
 80078ea:	ec57 6b10 	vmov	r6, r7, d0
 80078ee:	2200      	movs	r2, #0
 80078f0:	4b99      	ldr	r3, [pc, #612]	; (8007b58 <__kernel_rem_pio2+0x678>)
 80078f2:	ee10 0a10 	vmov	r0, s0
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f9 f92c 	bl	8000b54 <__aeabi_dcmpge>
 80078fc:	b1f8      	cbz	r0, 800793e <__kernel_rem_pio2+0x45e>
 80078fe:	2200      	movs	r2, #0
 8007900:	4b96      	ldr	r3, [pc, #600]	; (8007b5c <__kernel_rem_pio2+0x67c>)
 8007902:	4630      	mov	r0, r6
 8007904:	4639      	mov	r1, r7
 8007906:	f7f8 fe9f 	bl	8000648 <__aeabi_dmul>
 800790a:	f7f9 f94d 	bl	8000ba8 <__aeabi_d2iz>
 800790e:	4680      	mov	r8, r0
 8007910:	f7f8 fe30 	bl	8000574 <__aeabi_i2d>
 8007914:	2200      	movs	r2, #0
 8007916:	4b90      	ldr	r3, [pc, #576]	; (8007b58 <__kernel_rem_pio2+0x678>)
 8007918:	f7f8 fe96 	bl	8000648 <__aeabi_dmul>
 800791c:	460b      	mov	r3, r1
 800791e:	4602      	mov	r2, r0
 8007920:	4639      	mov	r1, r7
 8007922:	4630      	mov	r0, r6
 8007924:	f7f8 fcd8 	bl	80002d8 <__aeabi_dsub>
 8007928:	f7f9 f93e 	bl	8000ba8 <__aeabi_d2iz>
 800792c:	1c65      	adds	r5, r4, #1
 800792e:	ab0e      	add	r3, sp, #56	; 0x38
 8007930:	f10a 0a18 	add.w	sl, sl, #24
 8007934:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007938:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800793c:	e719      	b.n	8007772 <__kernel_rem_pio2+0x292>
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f9 f931 	bl	8000ba8 <__aeabi_d2iz>
 8007946:	ab0e      	add	r3, sp, #56	; 0x38
 8007948:	4625      	mov	r5, r4
 800794a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800794e:	e710      	b.n	8007772 <__kernel_rem_pio2+0x292>
 8007950:	ab0e      	add	r3, sp, #56	; 0x38
 8007952:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007956:	f7f8 fe0d 	bl	8000574 <__aeabi_i2d>
 800795a:	4642      	mov	r2, r8
 800795c:	464b      	mov	r3, r9
 800795e:	f7f8 fe73 	bl	8000648 <__aeabi_dmul>
 8007962:	2200      	movs	r2, #0
 8007964:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007968:	4b7c      	ldr	r3, [pc, #496]	; (8007b5c <__kernel_rem_pio2+0x67c>)
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	f7f8 fe6b 	bl	8000648 <__aeabi_dmul>
 8007972:	3f01      	subs	r7, #1
 8007974:	4680      	mov	r8, r0
 8007976:	4689      	mov	r9, r1
 8007978:	e708      	b.n	800778c <__kernel_rem_pio2+0x2ac>
 800797a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007986:	f7f8 fe5f 	bl	8000648 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4640      	mov	r0, r8
 8007990:	4649      	mov	r1, r9
 8007992:	f7f8 fca3 	bl	80002dc <__adddf3>
 8007996:	3701      	adds	r7, #1
 8007998:	4680      	mov	r8, r0
 800799a:	4689      	mov	r9, r1
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	429f      	cmp	r7, r3
 80079a0:	dc01      	bgt.n	80079a6 <__kernel_rem_pio2+0x4c6>
 80079a2:	45ba      	cmp	sl, r7
 80079a4:	dae9      	bge.n	800797a <__kernel_rem_pio2+0x49a>
 80079a6:	ab4a      	add	r3, sp, #296	; 0x128
 80079a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ac:	e9c3 8900 	strd	r8, r9, [r3]
 80079b0:	f10a 0a01 	add.w	sl, sl, #1
 80079b4:	3e08      	subs	r6, #8
 80079b6:	e6f0      	b.n	800779a <__kernel_rem_pio2+0x2ba>
 80079b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d85b      	bhi.n	8007a76 <__kernel_rem_pio2+0x596>
 80079be:	e8df f003 	tbb	[pc, r3]
 80079c2:	264a      	.short	0x264a
 80079c4:	0226      	.short	0x0226
 80079c6:	ab9a      	add	r3, sp, #616	; 0x268
 80079c8:	441c      	add	r4, r3
 80079ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80079ce:	46a2      	mov	sl, r4
 80079d0:	46ab      	mov	fp, r5
 80079d2:	f1bb 0f00 	cmp.w	fp, #0
 80079d6:	dc6c      	bgt.n	8007ab2 <__kernel_rem_pio2+0x5d2>
 80079d8:	46a2      	mov	sl, r4
 80079da:	46ab      	mov	fp, r5
 80079dc:	f1bb 0f01 	cmp.w	fp, #1
 80079e0:	f300 8086 	bgt.w	8007af0 <__kernel_rem_pio2+0x610>
 80079e4:	2000      	movs	r0, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	2d01      	cmp	r5, #1
 80079ea:	f300 80a0 	bgt.w	8007b2e <__kernel_rem_pio2+0x64e>
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80079f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 809e 	bne.w	8007b3a <__kernel_rem_pio2+0x65a>
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	e9c3 7800 	strd	r7, r8, [r3]
 8007a04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007a08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007a0c:	e033      	b.n	8007a76 <__kernel_rem_pio2+0x596>
 8007a0e:	3408      	adds	r4, #8
 8007a10:	ab4a      	add	r3, sp, #296	; 0x128
 8007a12:	441c      	add	r4, r3
 8007a14:	462e      	mov	r6, r5
 8007a16:	2000      	movs	r0, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	da3a      	bge.n	8007a94 <__kernel_rem_pio2+0x5b4>
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d03d      	beq.n	8007aa0 <__kernel_rem_pio2+0x5c0>
 8007a24:	4602      	mov	r2, r0
 8007a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a2a:	9c01      	ldr	r4, [sp, #4]
 8007a2c:	e9c4 2300 	strd	r2, r3, [r4]
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007a38:	f7f8 fc4e 	bl	80002d8 <__aeabi_dsub>
 8007a3c:	ae4c      	add	r6, sp, #304	; 0x130
 8007a3e:	2401      	movs	r4, #1
 8007a40:	42a5      	cmp	r5, r4
 8007a42:	da30      	bge.n	8007aa6 <__kernel_rem_pio2+0x5c6>
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	b113      	cbz	r3, 8007a4e <__kernel_rem_pio2+0x56e>
 8007a48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a54:	e00f      	b.n	8007a76 <__kernel_rem_pio2+0x596>
 8007a56:	ab9a      	add	r3, sp, #616	; 0x268
 8007a58:	441c      	add	r4, r3
 8007a5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007a5e:	2000      	movs	r0, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	da10      	bge.n	8007a88 <__kernel_rem_pio2+0x5a8>
 8007a66:	9b02      	ldr	r3, [sp, #8]
 8007a68:	b113      	cbz	r3, 8007a70 <__kernel_rem_pio2+0x590>
 8007a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a6e:	4619      	mov	r1, r3
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	e9c3 0100 	strd	r0, r1, [r3]
 8007a76:	9b06      	ldr	r3, [sp, #24]
 8007a78:	f003 0007 	and.w	r0, r3, #7
 8007a7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007a80:	ecbd 8b02 	vpop	{d8}
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a8c:	f7f8 fc26 	bl	80002dc <__adddf3>
 8007a90:	3d01      	subs	r5, #1
 8007a92:	e7e6      	b.n	8007a62 <__kernel_rem_pio2+0x582>
 8007a94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a98:	f7f8 fc20 	bl	80002dc <__adddf3>
 8007a9c:	3e01      	subs	r6, #1
 8007a9e:	e7bc      	b.n	8007a1a <__kernel_rem_pio2+0x53a>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	e7c1      	b.n	8007a2a <__kernel_rem_pio2+0x54a>
 8007aa6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007aaa:	f7f8 fc17 	bl	80002dc <__adddf3>
 8007aae:	3401      	adds	r4, #1
 8007ab0:	e7c6      	b.n	8007a40 <__kernel_rem_pio2+0x560>
 8007ab2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007ab6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007aba:	4640      	mov	r0, r8
 8007abc:	ec53 2b17 	vmov	r2, r3, d7
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ac6:	f7f8 fc09 	bl	80002dc <__adddf3>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fbff 	bl	80002d8 <__aeabi_dsub>
 8007ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ade:	f7f8 fbfd 	bl	80002dc <__adddf3>
 8007ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ae6:	e9ca 0100 	strd	r0, r1, [sl]
 8007aea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007aee:	e770      	b.n	80079d2 <__kernel_rem_pio2+0x4f2>
 8007af0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007af4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007af8:	4630      	mov	r0, r6
 8007afa:	ec53 2b17 	vmov	r2, r3, d7
 8007afe:	4639      	mov	r1, r7
 8007b00:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b04:	f7f8 fbea 	bl	80002dc <__adddf3>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	4689      	mov	r9, r1
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 fbe0 	bl	80002d8 <__aeabi_dsub>
 8007b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b1c:	f7f8 fbde 	bl	80002dc <__adddf3>
 8007b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b24:	e9ca 0100 	strd	r0, r1, [sl]
 8007b28:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007b2c:	e756      	b.n	80079dc <__kernel_rem_pio2+0x4fc>
 8007b2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b32:	f7f8 fbd3 	bl	80002dc <__adddf3>
 8007b36:	3d01      	subs	r5, #1
 8007b38:	e756      	b.n	80079e8 <__kernel_rem_pio2+0x508>
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	9a01      	ldr	r2, [sp, #4]
 8007b3e:	601f      	str	r7, [r3, #0]
 8007b40:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007b44:	605c      	str	r4, [r3, #4]
 8007b46:	609d      	str	r5, [r3, #8]
 8007b48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b4c:	60d3      	str	r3, [r2, #12]
 8007b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b52:	6110      	str	r0, [r2, #16]
 8007b54:	6153      	str	r3, [r2, #20]
 8007b56:	e78e      	b.n	8007a76 <__kernel_rem_pio2+0x596>
 8007b58:	41700000 	.word	0x41700000
 8007b5c:	3e700000 	.word	0x3e700000

08007b60 <__kernel_sin>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	ec55 4b10 	vmov	r4, r5, d0
 8007b68:	b085      	sub	sp, #20
 8007b6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007b72:	ed8d 1b00 	vstr	d1, [sp]
 8007b76:	9002      	str	r0, [sp, #8]
 8007b78:	da06      	bge.n	8007b88 <__kernel_sin+0x28>
 8007b7a:	ee10 0a10 	vmov	r0, s0
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f9 f812 	bl	8000ba8 <__aeabi_d2iz>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d051      	beq.n	8007c2c <__kernel_sin+0xcc>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	f7f8 fd5a 	bl	8000648 <__aeabi_dmul>
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fd52 	bl	8000648 <__aeabi_dmul>
 8007ba4:	a341      	add	r3, pc, #260	; (adr r3, 8007cac <__kernel_sin+0x14c>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	4680      	mov	r8, r0
 8007bac:	4689      	mov	r9, r1
 8007bae:	4650      	mov	r0, sl
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	f7f8 fd49 	bl	8000648 <__aeabi_dmul>
 8007bb6:	a33f      	add	r3, pc, #252	; (adr r3, 8007cb4 <__kernel_sin+0x154>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fb8c 	bl	80002d8 <__aeabi_dsub>
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	f7f8 fd40 	bl	8000648 <__aeabi_dmul>
 8007bc8:	a33c      	add	r3, pc, #240	; (adr r3, 8007cbc <__kernel_sin+0x15c>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fb85 	bl	80002dc <__adddf3>
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	f7f8 fd37 	bl	8000648 <__aeabi_dmul>
 8007bda:	a33a      	add	r3, pc, #232	; (adr r3, 8007cc4 <__kernel_sin+0x164>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fb7a 	bl	80002d8 <__aeabi_dsub>
 8007be4:	4652      	mov	r2, sl
 8007be6:	465b      	mov	r3, fp
 8007be8:	f7f8 fd2e 	bl	8000648 <__aeabi_dmul>
 8007bec:	a337      	add	r3, pc, #220	; (adr r3, 8007ccc <__kernel_sin+0x16c>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fb73 	bl	80002dc <__adddf3>
 8007bf6:	9b02      	ldr	r3, [sp, #8]
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	b9db      	cbnz	r3, 8007c36 <__kernel_sin+0xd6>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4650      	mov	r0, sl
 8007c04:	4659      	mov	r1, fp
 8007c06:	f7f8 fd1f 	bl	8000648 <__aeabi_dmul>
 8007c0a:	a325      	add	r3, pc, #148	; (adr r3, 8007ca0 <__kernel_sin+0x140>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb62 	bl	80002d8 <__aeabi_dsub>
 8007c14:	4642      	mov	r2, r8
 8007c16:	464b      	mov	r3, r9
 8007c18:	f7f8 fd16 	bl	8000648 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 fb5a 	bl	80002dc <__adddf3>
 8007c28:	4604      	mov	r4, r0
 8007c2a:	460d      	mov	r5, r1
 8007c2c:	ec45 4b10 	vmov	d0, r4, r5
 8007c30:	b005      	add	sp, #20
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	2200      	movs	r2, #0
 8007c38:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <__kernel_sin+0x148>)
 8007c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3e:	f7f8 fd03 	bl	8000648 <__aeabi_dmul>
 8007c42:	4632      	mov	r2, r6
 8007c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c48:	463b      	mov	r3, r7
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 fcfb 	bl	8000648 <__aeabi_dmul>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5a:	f7f8 fb3d 	bl	80002d8 <__aeabi_dsub>
 8007c5e:	4652      	mov	r2, sl
 8007c60:	465b      	mov	r3, fp
 8007c62:	f7f8 fcf1 	bl	8000648 <__aeabi_dmul>
 8007c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c6a:	f7f8 fb35 	bl	80002d8 <__aeabi_dsub>
 8007c6e:	a30c      	add	r3, pc, #48	; (adr r3, 8007ca0 <__kernel_sin+0x140>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 fce4 	bl	8000648 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fb28 	bl	80002dc <__adddf3>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4620      	mov	r0, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	f7f8 fb20 	bl	80002d8 <__aeabi_dsub>
 8007c98:	e7c6      	b.n	8007c28 <__kernel_sin+0xc8>
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	55555549 	.word	0x55555549
 8007ca4:	3fc55555 	.word	0x3fc55555
 8007ca8:	3fe00000 	.word	0x3fe00000
 8007cac:	5acfd57c 	.word	0x5acfd57c
 8007cb0:	3de5d93a 	.word	0x3de5d93a
 8007cb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007cb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007cbc:	57b1fe7d 	.word	0x57b1fe7d
 8007cc0:	3ec71de3 	.word	0x3ec71de3
 8007cc4:	19c161d5 	.word	0x19c161d5
 8007cc8:	3f2a01a0 	.word	0x3f2a01a0
 8007ccc:	1110f8a6 	.word	0x1110f8a6
 8007cd0:	3f811111 	.word	0x3f811111
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <atan>:
 8007cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	ec55 4b10 	vmov	r4, r5, d0
 8007ce0:	4bc3      	ldr	r3, [pc, #780]	; (8007ff0 <atan+0x318>)
 8007ce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ce6:	429e      	cmp	r6, r3
 8007ce8:	46ab      	mov	fp, r5
 8007cea:	dd18      	ble.n	8007d1e <atan+0x46>
 8007cec:	4bc1      	ldr	r3, [pc, #772]	; (8007ff4 <atan+0x31c>)
 8007cee:	429e      	cmp	r6, r3
 8007cf0:	dc01      	bgt.n	8007cf6 <atan+0x1e>
 8007cf2:	d109      	bne.n	8007d08 <atan+0x30>
 8007cf4:	b144      	cbz	r4, 8007d08 <atan+0x30>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f7f8 faed 	bl	80002dc <__adddf3>
 8007d02:	4604      	mov	r4, r0
 8007d04:	460d      	mov	r5, r1
 8007d06:	e006      	b.n	8007d16 <atan+0x3e>
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	f340 8131 	ble.w	8007f72 <atan+0x29a>
 8007d10:	a59b      	add	r5, pc, #620	; (adr r5, 8007f80 <atan+0x2a8>)
 8007d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d16:	ec45 4b10 	vmov	d0, r4, r5
 8007d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	4bb6      	ldr	r3, [pc, #728]	; (8007ff8 <atan+0x320>)
 8007d20:	429e      	cmp	r6, r3
 8007d22:	dc14      	bgt.n	8007d4e <atan+0x76>
 8007d24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007d28:	429e      	cmp	r6, r3
 8007d2a:	dc0d      	bgt.n	8007d48 <atan+0x70>
 8007d2c:	a396      	add	r3, pc, #600	; (adr r3, 8007f88 <atan+0x2b0>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	ee10 0a10 	vmov	r0, s0
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fad0 	bl	80002dc <__adddf3>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4baf      	ldr	r3, [pc, #700]	; (8007ffc <atan+0x324>)
 8007d40:	f7f8 ff12 	bl	8000b68 <__aeabi_dcmpgt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1e6      	bne.n	8007d16 <atan+0x3e>
 8007d48:	f04f 3aff 	mov.w	sl, #4294967295
 8007d4c:	e02b      	b.n	8007da6 <atan+0xce>
 8007d4e:	f000 f963 	bl	8008018 <fabs>
 8007d52:	4bab      	ldr	r3, [pc, #684]	; (8008000 <atan+0x328>)
 8007d54:	429e      	cmp	r6, r3
 8007d56:	ec55 4b10 	vmov	r4, r5, d0
 8007d5a:	f300 80bf 	bgt.w	8007edc <atan+0x204>
 8007d5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007d62:	429e      	cmp	r6, r3
 8007d64:	f300 80a0 	bgt.w	8007ea8 <atan+0x1d0>
 8007d68:	ee10 2a10 	vmov	r2, s0
 8007d6c:	ee10 0a10 	vmov	r0, s0
 8007d70:	462b      	mov	r3, r5
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7f8 fab2 	bl	80002dc <__adddf3>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4ba0      	ldr	r3, [pc, #640]	; (8007ffc <atan+0x324>)
 8007d7c:	f7f8 faac 	bl	80002d8 <__aeabi_dsub>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 faa5 	bl	80002dc <__adddf3>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fd7f 	bl	800089c <__aeabi_ddiv>
 8007d9e:	f04f 0a00 	mov.w	sl, #0
 8007da2:	4604      	mov	r4, r0
 8007da4:	460d      	mov	r5, r1
 8007da6:	4622      	mov	r2, r4
 8007da8:	462b      	mov	r3, r5
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 fc4b 	bl	8000648 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	f7f8 fc45 	bl	8000648 <__aeabi_dmul>
 8007dbe:	a374      	add	r3, pc, #464	; (adr r3, 8007f90 <atan+0x2b8>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	f7f8 fc3e 	bl	8000648 <__aeabi_dmul>
 8007dcc:	a372      	add	r3, pc, #456	; (adr r3, 8007f98 <atan+0x2c0>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fa83 	bl	80002dc <__adddf3>
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	463b      	mov	r3, r7
 8007dda:	f7f8 fc35 	bl	8000648 <__aeabi_dmul>
 8007dde:	a370      	add	r3, pc, #448	; (adr r3, 8007fa0 <atan+0x2c8>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f7f8 fa7a 	bl	80002dc <__adddf3>
 8007de8:	4632      	mov	r2, r6
 8007dea:	463b      	mov	r3, r7
 8007dec:	f7f8 fc2c 	bl	8000648 <__aeabi_dmul>
 8007df0:	a36d      	add	r3, pc, #436	; (adr r3, 8007fa8 <atan+0x2d0>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fa71 	bl	80002dc <__adddf3>
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	f7f8 fc23 	bl	8000648 <__aeabi_dmul>
 8007e02:	a36b      	add	r3, pc, #428	; (adr r3, 8007fb0 <atan+0x2d8>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fa68 	bl	80002dc <__adddf3>
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	f7f8 fc1a 	bl	8000648 <__aeabi_dmul>
 8007e14:	a368      	add	r3, pc, #416	; (adr r3, 8007fb8 <atan+0x2e0>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 fa5f 	bl	80002dc <__adddf3>
 8007e1e:	4642      	mov	r2, r8
 8007e20:	464b      	mov	r3, r9
 8007e22:	f7f8 fc11 	bl	8000648 <__aeabi_dmul>
 8007e26:	a366      	add	r3, pc, #408	; (adr r3, 8007fc0 <atan+0x2e8>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4689      	mov	r9, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fc08 	bl	8000648 <__aeabi_dmul>
 8007e38:	a363      	add	r3, pc, #396	; (adr r3, 8007fc8 <atan+0x2f0>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fa4b 	bl	80002d8 <__aeabi_dsub>
 8007e42:	4632      	mov	r2, r6
 8007e44:	463b      	mov	r3, r7
 8007e46:	f7f8 fbff 	bl	8000648 <__aeabi_dmul>
 8007e4a:	a361      	add	r3, pc, #388	; (adr r3, 8007fd0 <atan+0x2f8>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 fa42 	bl	80002d8 <__aeabi_dsub>
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	f7f8 fbf6 	bl	8000648 <__aeabi_dmul>
 8007e5c:	a35e      	add	r3, pc, #376	; (adr r3, 8007fd8 <atan+0x300>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fa39 	bl	80002d8 <__aeabi_dsub>
 8007e66:	4632      	mov	r2, r6
 8007e68:	463b      	mov	r3, r7
 8007e6a:	f7f8 fbed 	bl	8000648 <__aeabi_dmul>
 8007e6e:	a35c      	add	r3, pc, #368	; (adr r3, 8007fe0 <atan+0x308>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fa30 	bl	80002d8 <__aeabi_dsub>
 8007e78:	4632      	mov	r2, r6
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	f7f8 fbe4 	bl	8000648 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4640      	mov	r0, r8
 8007e86:	4649      	mov	r1, r9
 8007e88:	f7f8 fa28 	bl	80002dc <__adddf3>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	462b      	mov	r3, r5
 8007e90:	f7f8 fbda 	bl	8000648 <__aeabi_dmul>
 8007e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	d14b      	bne.n	8007f36 <atan+0x25e>
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fa19 	bl	80002d8 <__aeabi_dsub>
 8007ea6:	e72c      	b.n	8007d02 <atan+0x2a>
 8007ea8:	ee10 0a10 	vmov	r0, s0
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b53      	ldr	r3, [pc, #332]	; (8007ffc <atan+0x324>)
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 fa11 	bl	80002d8 <__aeabi_dsub>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4606      	mov	r6, r0
 8007eba:	460f      	mov	r7, r1
 8007ebc:	4b4f      	ldr	r3, [pc, #316]	; (8007ffc <atan+0x324>)
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 fa0b 	bl	80002dc <__adddf3>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 fce5 	bl	800089c <__aeabi_ddiv>
 8007ed2:	f04f 0a01 	mov.w	sl, #1
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	460d      	mov	r5, r1
 8007eda:	e764      	b.n	8007da6 <atan+0xce>
 8007edc:	4b49      	ldr	r3, [pc, #292]	; (8008004 <atan+0x32c>)
 8007ede:	429e      	cmp	r6, r3
 8007ee0:	dc1d      	bgt.n	8007f1e <atan+0x246>
 8007ee2:	ee10 0a10 	vmov	r0, s0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4b47      	ldr	r3, [pc, #284]	; (8008008 <atan+0x330>)
 8007eea:	4629      	mov	r1, r5
 8007eec:	f7f8 f9f4 	bl	80002d8 <__aeabi_dsub>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	4b44      	ldr	r3, [pc, #272]	; (8008008 <atan+0x330>)
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 fba4 	bl	8000648 <__aeabi_dmul>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <atan+0x324>)
 8007f04:	f7f8 f9ea 	bl	80002dc <__adddf3>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fcc4 	bl	800089c <__aeabi_ddiv>
 8007f14:	f04f 0a02 	mov.w	sl, #2
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	e743      	b.n	8007da6 <atan+0xce>
 8007f1e:	462b      	mov	r3, r5
 8007f20:	ee10 2a10 	vmov	r2, s0
 8007f24:	2000      	movs	r0, #0
 8007f26:	4939      	ldr	r1, [pc, #228]	; (800800c <atan+0x334>)
 8007f28:	f7f8 fcb8 	bl	800089c <__aeabi_ddiv>
 8007f2c:	f04f 0a03 	mov.w	sl, #3
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	e737      	b.n	8007da6 <atan+0xce>
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <atan+0x338>)
 8007f38:	4e36      	ldr	r6, [pc, #216]	; (8008014 <atan+0x33c>)
 8007f3a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007f3e:	4456      	add	r6, sl
 8007f40:	449a      	add	sl, r3
 8007f42:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f46:	f7f8 f9c7 	bl	80002d8 <__aeabi_dsub>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	f7f8 f9c3 	bl	80002d8 <__aeabi_dsub>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007f5a:	f7f8 f9bd 	bl	80002d8 <__aeabi_dsub>
 8007f5e:	f1bb 0f00 	cmp.w	fp, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	460d      	mov	r5, r1
 8007f66:	f6bf aed6 	bge.w	8007d16 <atan+0x3e>
 8007f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f6e:	461d      	mov	r5, r3
 8007f70:	e6d1      	b.n	8007d16 <atan+0x3e>
 8007f72:	a51d      	add	r5, pc, #116	; (adr r5, 8007fe8 <atan+0x310>)
 8007f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f78:	e6cd      	b.n	8007d16 <atan+0x3e>
 8007f7a:	bf00      	nop
 8007f7c:	f3af 8000 	nop.w
 8007f80:	54442d18 	.word	0x54442d18
 8007f84:	3ff921fb 	.word	0x3ff921fb
 8007f88:	8800759c 	.word	0x8800759c
 8007f8c:	7e37e43c 	.word	0x7e37e43c
 8007f90:	e322da11 	.word	0xe322da11
 8007f94:	3f90ad3a 	.word	0x3f90ad3a
 8007f98:	24760deb 	.word	0x24760deb
 8007f9c:	3fa97b4b 	.word	0x3fa97b4b
 8007fa0:	a0d03d51 	.word	0xa0d03d51
 8007fa4:	3fb10d66 	.word	0x3fb10d66
 8007fa8:	c54c206e 	.word	0xc54c206e
 8007fac:	3fb745cd 	.word	0x3fb745cd
 8007fb0:	920083ff 	.word	0x920083ff
 8007fb4:	3fc24924 	.word	0x3fc24924
 8007fb8:	5555550d 	.word	0x5555550d
 8007fbc:	3fd55555 	.word	0x3fd55555
 8007fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007fc4:	bfa2b444 	.word	0xbfa2b444
 8007fc8:	52defd9a 	.word	0x52defd9a
 8007fcc:	3fadde2d 	.word	0x3fadde2d
 8007fd0:	af749a6d 	.word	0xaf749a6d
 8007fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007fd8:	fe231671 	.word	0xfe231671
 8007fdc:	3fbc71c6 	.word	0x3fbc71c6
 8007fe0:	9998ebc4 	.word	0x9998ebc4
 8007fe4:	3fc99999 	.word	0x3fc99999
 8007fe8:	54442d18 	.word	0x54442d18
 8007fec:	bff921fb 	.word	0xbff921fb
 8007ff0:	440fffff 	.word	0x440fffff
 8007ff4:	7ff00000 	.word	0x7ff00000
 8007ff8:	3fdbffff 	.word	0x3fdbffff
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	3ff2ffff 	.word	0x3ff2ffff
 8008004:	40037fff 	.word	0x40037fff
 8008008:	3ff80000 	.word	0x3ff80000
 800800c:	bff00000 	.word	0xbff00000
 8008010:	08008798 	.word	0x08008798
 8008014:	08008778 	.word	0x08008778

08008018 <fabs>:
 8008018:	ec51 0b10 	vmov	r0, r1, d0
 800801c:	ee10 2a10 	vmov	r2, s0
 8008020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008024:	ec43 2b10 	vmov	d0, r2, r3
 8008028:	4770      	bx	lr
 800802a:	0000      	movs	r0, r0
 800802c:	0000      	movs	r0, r0
	...

08008030 <floor>:
 8008030:	ec51 0b10 	vmov	r0, r1, d0
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800803c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008040:	2e13      	cmp	r6, #19
 8008042:	460c      	mov	r4, r1
 8008044:	ee10 5a10 	vmov	r5, s0
 8008048:	4680      	mov	r8, r0
 800804a:	dc34      	bgt.n	80080b6 <floor+0x86>
 800804c:	2e00      	cmp	r6, #0
 800804e:	da16      	bge.n	800807e <floor+0x4e>
 8008050:	a335      	add	r3, pc, #212	; (adr r3, 8008128 <floor+0xf8>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 f941 	bl	80002dc <__adddf3>
 800805a:	2200      	movs	r2, #0
 800805c:	2300      	movs	r3, #0
 800805e:	f7f8 fd83 	bl	8000b68 <__aeabi_dcmpgt>
 8008062:	b148      	cbz	r0, 8008078 <floor+0x48>
 8008064:	2c00      	cmp	r4, #0
 8008066:	da59      	bge.n	800811c <floor+0xec>
 8008068:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800806c:	4a30      	ldr	r2, [pc, #192]	; (8008130 <floor+0x100>)
 800806e:	432b      	orrs	r3, r5
 8008070:	2500      	movs	r5, #0
 8008072:	42ab      	cmp	r3, r5
 8008074:	bf18      	it	ne
 8008076:	4614      	movne	r4, r2
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	e025      	b.n	80080ca <floor+0x9a>
 800807e:	4f2d      	ldr	r7, [pc, #180]	; (8008134 <floor+0x104>)
 8008080:	4137      	asrs	r7, r6
 8008082:	ea01 0307 	and.w	r3, r1, r7
 8008086:	4303      	orrs	r3, r0
 8008088:	d01f      	beq.n	80080ca <floor+0x9a>
 800808a:	a327      	add	r3, pc, #156	; (adr r3, 8008128 <floor+0xf8>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 f924 	bl	80002dc <__adddf3>
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	f7f8 fd66 	bl	8000b68 <__aeabi_dcmpgt>
 800809c:	2800      	cmp	r0, #0
 800809e:	d0eb      	beq.n	8008078 <floor+0x48>
 80080a0:	2c00      	cmp	r4, #0
 80080a2:	bfbe      	ittt	lt
 80080a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80080a8:	fa43 f606 	asrlt.w	r6, r3, r6
 80080ac:	19a4      	addlt	r4, r4, r6
 80080ae:	ea24 0407 	bic.w	r4, r4, r7
 80080b2:	2500      	movs	r5, #0
 80080b4:	e7e0      	b.n	8008078 <floor+0x48>
 80080b6:	2e33      	cmp	r6, #51	; 0x33
 80080b8:	dd0b      	ble.n	80080d2 <floor+0xa2>
 80080ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80080be:	d104      	bne.n	80080ca <floor+0x9a>
 80080c0:	ee10 2a10 	vmov	r2, s0
 80080c4:	460b      	mov	r3, r1
 80080c6:	f7f8 f909 	bl	80002dc <__adddf3>
 80080ca:	ec41 0b10 	vmov	d0, r0, r1
 80080ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295
 80080da:	fa23 f707 	lsr.w	r7, r3, r7
 80080de:	4207      	tst	r7, r0
 80080e0:	d0f3      	beq.n	80080ca <floor+0x9a>
 80080e2:	a311      	add	r3, pc, #68	; (adr r3, 8008128 <floor+0xf8>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f8f8 	bl	80002dc <__adddf3>
 80080ec:	2200      	movs	r2, #0
 80080ee:	2300      	movs	r3, #0
 80080f0:	f7f8 fd3a 	bl	8000b68 <__aeabi_dcmpgt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d0bf      	beq.n	8008078 <floor+0x48>
 80080f8:	2c00      	cmp	r4, #0
 80080fa:	da02      	bge.n	8008102 <floor+0xd2>
 80080fc:	2e14      	cmp	r6, #20
 80080fe:	d103      	bne.n	8008108 <floor+0xd8>
 8008100:	3401      	adds	r4, #1
 8008102:	ea25 0507 	bic.w	r5, r5, r7
 8008106:	e7b7      	b.n	8008078 <floor+0x48>
 8008108:	2301      	movs	r3, #1
 800810a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800810e:	fa03 f606 	lsl.w	r6, r3, r6
 8008112:	4435      	add	r5, r6
 8008114:	4545      	cmp	r5, r8
 8008116:	bf38      	it	cc
 8008118:	18e4      	addcc	r4, r4, r3
 800811a:	e7f2      	b.n	8008102 <floor+0xd2>
 800811c:	2500      	movs	r5, #0
 800811e:	462c      	mov	r4, r5
 8008120:	e7aa      	b.n	8008078 <floor+0x48>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	8800759c 	.word	0x8800759c
 800812c:	7e37e43c 	.word	0x7e37e43c
 8008130:	bff00000 	.word	0xbff00000
 8008134:	000fffff 	.word	0x000fffff

08008138 <matherr>:
 8008138:	2000      	movs	r0, #0
 800813a:	4770      	bx	lr
 800813c:	0000      	movs	r0, r0
	...

08008140 <scalbn>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	ec55 4b10 	vmov	r4, r5, d0
 8008146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800814a:	4606      	mov	r6, r0
 800814c:	462b      	mov	r3, r5
 800814e:	b9aa      	cbnz	r2, 800817c <scalbn+0x3c>
 8008150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008154:	4323      	orrs	r3, r4
 8008156:	d03b      	beq.n	80081d0 <scalbn+0x90>
 8008158:	4b31      	ldr	r3, [pc, #196]	; (8008220 <scalbn+0xe0>)
 800815a:	4629      	mov	r1, r5
 800815c:	2200      	movs	r2, #0
 800815e:	ee10 0a10 	vmov	r0, s0
 8008162:	f7f8 fa71 	bl	8000648 <__aeabi_dmul>
 8008166:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <scalbn+0xe4>)
 8008168:	429e      	cmp	r6, r3
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	da12      	bge.n	8008196 <scalbn+0x56>
 8008170:	a327      	add	r3, pc, #156	; (adr r3, 8008210 <scalbn+0xd0>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fa67 	bl	8000648 <__aeabi_dmul>
 800817a:	e009      	b.n	8008190 <scalbn+0x50>
 800817c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008180:	428a      	cmp	r2, r1
 8008182:	d10c      	bne.n	800819e <scalbn+0x5e>
 8008184:	ee10 2a10 	vmov	r2, s0
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 f8a6 	bl	80002dc <__adddf3>
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	e01c      	b.n	80081d0 <scalbn+0x90>
 8008196:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800819a:	460b      	mov	r3, r1
 800819c:	3a36      	subs	r2, #54	; 0x36
 800819e:	4432      	add	r2, r6
 80081a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081a4:	428a      	cmp	r2, r1
 80081a6:	dd0b      	ble.n	80081c0 <scalbn+0x80>
 80081a8:	ec45 4b11 	vmov	d1, r4, r5
 80081ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008218 <scalbn+0xd8>
 80081b0:	f000 f83c 	bl	800822c <copysign>
 80081b4:	a318      	add	r3, pc, #96	; (adr r3, 8008218 <scalbn+0xd8>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	ec51 0b10 	vmov	r0, r1, d0
 80081be:	e7da      	b.n	8008176 <scalbn+0x36>
 80081c0:	2a00      	cmp	r2, #0
 80081c2:	dd08      	ble.n	80081d6 <scalbn+0x96>
 80081c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081d0:	ec45 4b10 	vmov	d0, r4, r5
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081da:	da0d      	bge.n	80081f8 <scalbn+0xb8>
 80081dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081e0:	429e      	cmp	r6, r3
 80081e2:	ec45 4b11 	vmov	d1, r4, r5
 80081e6:	dce1      	bgt.n	80081ac <scalbn+0x6c>
 80081e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008210 <scalbn+0xd0>
 80081ec:	f000 f81e 	bl	800822c <copysign>
 80081f0:	a307      	add	r3, pc, #28	; (adr r3, 8008210 <scalbn+0xd0>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	e7e0      	b.n	80081ba <scalbn+0x7a>
 80081f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081fc:	3236      	adds	r2, #54	; 0x36
 80081fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008206:	4620      	mov	r0, r4
 8008208:	4629      	mov	r1, r5
 800820a:	2200      	movs	r2, #0
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <scalbn+0xe8>)
 800820e:	e7b2      	b.n	8008176 <scalbn+0x36>
 8008210:	c2f8f359 	.word	0xc2f8f359
 8008214:	01a56e1f 	.word	0x01a56e1f
 8008218:	8800759c 	.word	0x8800759c
 800821c:	7e37e43c 	.word	0x7e37e43c
 8008220:	43500000 	.word	0x43500000
 8008224:	ffff3cb0 	.word	0xffff3cb0
 8008228:	3c900000 	.word	0x3c900000

0800822c <copysign>:
 800822c:	ec51 0b10 	vmov	r0, r1, d0
 8008230:	ee11 0a90 	vmov	r0, s3
 8008234:	ee10 2a10 	vmov	r2, s0
 8008238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800823c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008240:	ea41 0300 	orr.w	r3, r1, r0
 8008244:	ec43 2b10 	vmov	d0, r2, r3
 8008248:	4770      	bx	lr
	...

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
