
Energie-monitor-kommunikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00802800  000017ed  000018c1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c8  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000025  000057c8  000017c8  0000189c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000055  008028da  008028da  0000199b  2**0
                  ALLOC
  4 .eeprom       00000020  00810000  00810000  0000199b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000200  00000000  00000000  00001a30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005d1d  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002be2  00000000  00000000  0000794d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000191c  00000000  00000000  0000a52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000790  00000000  00000000  0000be4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022cf  00000000  00000000  0000c5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002786  00000000  00000000  0000e8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000308  00000000  00000000  00011031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_7>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_17>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_22>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_28>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_31>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__vector_33>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	18 e2       	ldi	r17, 0x28	; 40
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b8 e2       	ldi	r27, 0x28	; 40
      a2:	ed ee       	ldi	r30, 0xED	; 237
      a4:	f7 e1       	ldi	r31, 0x17	; 23
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	29 e2       	ldi	r18, 0x29	; 41
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b8 e2       	ldi	r27, 0x28	; 40
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 32       	cpi	r26, 0x2F	; 47
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 8e 09 	call	0x131c	; 0x131c <main>
      c6:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <FIFO_writebyte>:
 // bool FIFO_writebyte(sFIFO_t* FIFO, uint8_t byte) __attribute__((used))
 //	bool (R24) FIFO_writebyte(sFIFO_t* (R25,R24), uint8_t (R22))
 // {
 /////////////////////////////////////////////////////////////////////////////////////////
 FIFO_writebyte:
 MOVW  ZL, I1L
      ce:	fc 01       	movw	r30, r24
 LDD  r24, z+_p_read
      d0:	80 81       	ld	r24, Z
 LDD  r25, z+_p_write
      d2:	91 81       	ldd	r25, Z+1	; 0x01
 INC  r25
      d4:	93 95       	inc	r25
 ANDI r25, _FIFO_bits
      d6:	9f 71       	andi	r25, 0x1F	; 31
 CP   r24, r25
      d8:	89 17       	cp	r24, r25
 LDI  O1L, 0
      da:	80 e0       	ldi	r24, 0x00	; 0
BREQ FFWB_end
      dc:	41 f0       	breq	.+16     	; 0xee <FFWB_end>
 LDD  r24, Z+_p_write
      de:	81 81       	ldd	r24, Z+1	; 0x01
 MOVW  XL,  ZL
      e0:	df 01       	movw	r26, r30
 ADD   XL, r24
      e2:	a8 0f       	add	r26, r24
 ADC   XH, _ZR
      e4:	b1 1d       	adc	r27, r1
#if _p_data!=0
 ADIW  XL, _p_data
      e6:	13 96       	adiw	r26, 0x03	; 3
#endif
 ST   X,   r22
      e8:	6c 93       	st	X, r22
 STD  Z+_p_write, r25
      ea:	91 83       	std	Z+1, r25	; 0x01
 LDI  O1L, 1
      ec:	81 e0       	ldi	r24, 0x01	; 1

000000ee <FFWB_end>:
FFWB_end:
 ret
      ee:	08 95       	ret

000000f0 <FIFO_readbyte>:
 // bool FIFO_readbyte(sFIFO_t* FIFO, uint8_t* byte) __attribute__((used))
 //	bool (R24) FIFO_readbyte(sFIFO_t* (R25,R24), uint8_t* (R23,R22))
 // {
 /////////////////////////////////////////////////////////////////////////////////////////
 FIFO_readbyte:
 MOVW  ZL, I1L
      f0:	fc 01       	movw	r30, r24
 LDD  r25, z+_p_read
      f2:	90 81       	ld	r25, Z
 LDD  r24, z+_p_write
      f4:	81 81       	ldd	r24, Z+1	; 0x01
 CP   r24, r25
      f6:	89 17       	cp	r24, r25
 LDI  O1L, 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
BREQ FFRB_end
      fa:	59 f0       	breq	.+22     	; 0x112 <FFRB_end>
 MOVW  XL, ZL
      fc:	df 01       	movw	r26, r30
 ADD   XL, r25
      fe:	a9 0f       	add	r26, r25
 ADC   XH, _ZR
     100:	b1 1d       	adc	r27, r1
#if _p_data!=0
 ADIW  XL, _p_data
     102:	13 96       	adiw	r26, 0x03	; 3
#endif
 LD   r24, x
     104:	8c 91       	ld	r24, X
 MOVW  XL, r22
     106:	db 01       	movw	r26, r22
 ST     x, r24
     108:	8c 93       	st	X, r24
 INC  r25
     10a:	93 95       	inc	r25
 ANDI r25, _FIFO_bits
     10c:	9f 71       	andi	r25, 0x1F	; 31
 STD  z+_p_read, r25
     10e:	90 83       	st	Z, r25
 LDI  O1L, 1
     110:	81 e0       	ldi	r24, 0x01	; 1

00000112 <FFRB_end>:
FFRB_end:
 ret
     112:	08 95       	ret

00000114 <FIFO_copy_to_lin>:
 // uint8_t FIFO_copy_to_linA(uint8_t* lin_space, sFIFO_t* FIFO, uint8_t lenght) __attribute__((used))
 //	uint8_t (R24)					FIFO_copy_to_linA(uint8_t*,sFIFO_t*,       uint8_t)
 //	R01 == 0				  R31,R30 R29,R28 R27,R26 R25,R24 R23,R22          R21,R20
 /////////////////////////////////////////////////////////////////////////////////////////
 FIFO_copy_to_lin:			//		   |   |		   |   |   |   |				|
 PUSH  R28					//		   |   |>ST		   |   |   |   |				|
     114:	cf 93       	push	r28
 PUSH  R29					//		   |>ST			   |   |   |   |				|
     116:	df 93       	push	r29
 MOVW  ZL, I2L				// |<Z-|<----------|---|---|---|---|___|				|
     118:	fb 01       	movw	r30, r22
 MOVW  XL, I1L				// |   |		   |<X-|<--|___|	     				|
     11a:	dc 01       	movw	r26, r24
 // diff read Data			// |   |		   |   |		       _				|
 LDD  R22, Z+_p_write		// |   |		   |   |		     Z>|				|
     11c:	61 81       	ldd	r22, Z+1	; 0x01
 SUBI R22, (~(_FIFO_bits))	// |   |		   |   |		   _   |-K				|
     11e:	60 5e       	subi	r22, 0xE0	; 224
 LDD  R23, Z+_p_read		// |   |		   |   |		 Z>|   |				|
     120:	70 81       	ld	r23, Z
 SUB  R22, R23				// |   |		   |   |		   |->-|				|
     122:	67 1b       	sub	r22, r23
 ANDI R22, _FIFO_bits		// |   |		   |   |		   |   |^K				|
     124:	6f 71       	andi	r22, 0x1F	; 31
 // Berechne die min.		// |   |		   |   |		   |   |				|
 // Kopierlänge				// |   |		   |   |		   |   |				|
 CP   R22, R20				// |   |		   |   |		   |   |				|
     126:	64 17       	cp	r22, r20
BRGE .+2					// |   |		   |   |		   |   |				|
     128:	0c f4       	brge	.+2      	; 0x12c <FIFO_copy_to_lin+0x18>
 MOV  R20, R22				// |   |		   |   |		   |   |--------------?>|
     12a:	46 2f       	mov	r20, r22
 //   R20 copy_length		// |   |		   |   |		   |					|
 // Berechne die Länge 		// |   |		   |   |		   |     				|
 // für die erste Kopier-	// |   |		   |   |		   |     				|
 // anweisungen				// |   |		   |   |		   |   _ 				|
 LDD  R22, Z+_p_FIFO_max	// |   |		   |   |		   | Z>| 				|
     12c:	62 81       	ldd	r22, Z+2	; 0x02
 SUB  R22, R23				// |   |		   |   |		   |->-| 				|
     12e:	67 1b       	sub	r22, r23
 CP	  R22, R20				// |   |		   |   |		   |   |				|
     130:	64 17       	cp	r22, r20
BRLT  .+2					// |   |		   |   |		   |   |				|
     132:	0c f0       	brlt	.+2      	; 0x136 <FIFO_copy_to_lin+0x22>
 MOV  R22, R20				// |   |		   |   |		   |   |<?--------------|
     134:	64 2f       	mov	r22, r20
 // R22 read_length_block	// |   |		   |   |	   _   |   |                |
 LDI  O1L, 0				// |   |		   |   |	   |=0 |   |                |
     136:	80 e0       	ldi	r24, 0x00	; 0
 TST  R22					// |   |		   |   |	   |   |   |                |
     138:	66 23       	and	r22, r22
BREQ  FFCTL_end				// |   |   _   _   |   |	   |># |   |				|
     13a:	b1 f0       	breq	.+44     	; 0x168 <FFCTL_end>
 MOVW  YL,  ZL				// |---|-->|-Y>|   |   |		   |   |				|
     13c:	ef 01       	movw	r28, r30
#if _p_data!=0				// |   |   |   |   |   |		   |   |				|
 ADIW  YL, _p_data			// |   |   |<--|+K |   |		   |   |				|
     13e:	23 96       	adiw	r28, 0x03	; 3
#endif						// |   |   |   |   |   |		   |   |				|
 ADD   YL, R23				// |   |   |  C|+<-|---|-----------|   |				|
     140:	c7 0f       	add	r28, r23
 ADC   YH, R01				// |   |   |+C |+0 |   |   _	   |   |				|
     142:	d1 1d       	adc	r29, r1
 MOV  R25, R22				// |   |   |   |   |   |   |<------|---|				|
     144:	96 2f       	mov	r25, r22

00000146 <FFCTL_c1>:
 // R25 Schleifenzähler		// |   |   |   |   |   |   |	   |   |				|
 // Kopierschleife 1		// |   |   |   |   |   |   |	   |   |				|
FFCTL_c1:					// |   |   |   |   |   |   |<$ _   |   |				|
 LD   R24, Y+				// |   |   |<--|+1 |   |   | Y>|   |   |				|
     146:	89 91       	ld	r24, Y+
 ST   X+,  R24				// |   |   |   |   |<--|+1 |   |>X |   |				|
     148:	8d 93       	st	X+, r24
 DEC  R25					// |   |   |   |   |   |   |-1	   |   |				|
     14a:	9a 95       	dec	r25
BRNE  FFCTL_c1				// |   |   |   |   |   |   |>$	   |   |				|
     14c:	e1 f7       	brne	.-8      	; 0x146 <FFCTL_c1>
 // Berechne die Länge für	// |   |		   |   |		   |   |				|
 // die zweite Kopier-		// |   |		   |   |		   |   |				|
 // anweisungen				// |   |		   |   |   _	   |   |				|
 MOV  R25, R20				// |   |		   |   |   |<------|---|----------------|
     14e:	94 2f       	mov	r25, r20
 SUB  R25, R22				// |   |		   |   |   |-<-----|---|				|
     150:	96 1b       	sub	r25, r22
 // R25 Schleifenzähler		// |   |		   |   |   |	   |					|
BREQ FFCTL_cend				// |   |		   |   |   |	   |					|
     152:	31 f0       	breq	.+12     	; 0x160 <FFCTL_cend>
 MOVW  YL,  ZL				// |---|-->|-Y>|   |   |   |	   |					|
     154:	ef 01       	movw	r28, r30
#if _p_data!=0				// |   |   |   |   |   |		   |					|
 ADIW  YL, _p_data			// |   |   |<--|+K |   |   |	   |					|
     156:	23 96       	adiw	r28, 0x03	; 3

00000158 <FFCTL_c2>:
#endif						// |   |   |   |   |   |		   |					|
 // Kopierschleife 2		// |   |   |   |   |   |   |	   |					|
FFCTL_c2:					// |   |   |   |   |   |   |<§ _   |					|
 LD   R24, Y+				// |   |   |<--|+1 |   |   | Y>|   |					|
     158:	89 91       	ld	r24, Y+
 ST   X+,  R24				// |   |   |   |   |<--|+1 |   |>X |					|
     15a:	8d 93       	st	X+, r24
 DEC  R25					// |   |   |   |   |   |   |-1	   |					|
     15c:	9a 95       	dec	r25
BRNE  FFCTL_c2				// |   |   |   |   |   |   |>§	   |					|
     15e:	e1 f7       	brne	.-8      	; 0x158 <FFCTL_c2>

00000160 <FFCTL_cend>:
 // Berechne neuen Lese-	// |   |						   |					|
 // zeiger					// |   |						   |					|
FFCTL_cend:					// |   |						   |					|
 ADD  R23, R20				// |   |						   |+<------------------|
     160:	74 0f       	add	r23, r20
 ANDI R23, _FIFO_bits		// |   |						   |^K					|
     162:	7f 71       	andi	r23, 0x1F	; 31
 STD  Z+_p_read, R23 		// |   |					       |>Z					|
     164:	70 83       	st	Z, r23
 MOV  O1L, R20				//							   |<-----------------------|
     166:	84 2f       	mov	r24, r20

00000168 <FFCTL_end>:
FFCTL_end:					//							   |<#
 POP  R29					//							   |
     168:	df 91       	pop	r29
 POP  R28					//							   |
     16a:	cf 91       	pop	r28
 ret						//							   |
     16c:	08 95       	ret

0000016e <get_CPU_CLK>:
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// get Core Clock and write in the "CLK_CPU" variable
////////////////////////////////////////////////////////////////////////////////////////////////////
void get_CPU_CLK(void)
{
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	6d 97       	sbiw	r28, 0x1d	; 29
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	de bf       	out	0x3e, r29	; 62
	uint8_t Prescaler_tab[] = CLK_Prescaler_Table;
     17c:	8d e0       	ldi	r24, 0x0D	; 13
     17e:	e8 ec       	ldi	r30, 0xC8	; 200
     180:	f7 e5       	ldi	r31, 0x57	; 87
     182:	de 01       	movw	r26, r28
     184:	11 96       	adiw	r26, 0x01	; 1
     186:	01 90       	ld	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	8a 95       	dec	r24
     18c:	e1 f7       	brne	.-8      	; 0x186 <get_CPU_CLK+0x18>
	uint32_t Main_CLK_Switch_tab[] = Main_CLK_Switch_Table;
     18e:	80 e1       	ldi	r24, 0x10	; 16
     190:	e5 ed       	ldi	r30, 0xD5	; 213
     192:	f7 e5       	ldi	r31, 0x57	; 87
     194:	de 01       	movw	r26, r28
     196:	1e 96       	adiw	r26, 0x0e	; 14
     198:	01 90       	ld	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	8a 95       	dec	r24
     19e:	e1 f7       	brne	.-8      	; 0x198 <get_CPU_CLK+0x2a>
	uint8_t Prescaler = 0;
	
	uint32_t Main_CLK_Switch = Main_CLK_Switch_tab[(CLKCTRL.MCLKCTRLA & CLKCTRL_CLKSEL_gm)];
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	ec 91       	ld	r30, X
     1a6:	e3 70       	andi	r30, 0x03	; 3
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	ee 0f       	add	r30, r30
     1ac:	ff 1f       	adc	r31, r31
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	2c 0f       	add	r18, r28
     1b8:	3d 1f       	adc	r19, r29
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	65 85       	ldd	r22, Z+13	; 0x0d
     1c0:	76 85       	ldd	r23, Z+14	; 0x0e
     1c2:	87 85       	ldd	r24, Z+15	; 0x0f
     1c4:	90 89       	ldd	r25, Z+16	; 0x10
	
	
	if((CLKCTRL.MCLKCTRLB & CLKCTRL_PEN_bm) == CLKCTRL_PEN_bm)
     1c6:	11 96       	adiw	r26, 0x01	; 1
     1c8:	2c 91       	ld	r18, X
     1ca:	20 ff       	sbrs	r18, 0
     1cc:	1b c0       	rjmp	.+54     	; 0x204 <get_CPU_CLK+0x96>
	{
		Prescaler = Prescaler_tab[((CLKCTRL.MCLKCTRLB & CLKCTRL_PDIV_gm)>>1)];
     1ce:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
     1d2:	ee 71       	andi	r30, 0x1E	; 30
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	f5 95       	asr	r31
     1d8:	e7 95       	ror	r30
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	2c 0f       	add	r18, r28
     1e0:	3d 1f       	adc	r19, r29
     1e2:	e2 0f       	add	r30, r18
     1e4:	f3 1f       	adc	r31, r19
     1e6:	20 81       	ld	r18, Z
		CLK_CPU = Main_CLK_Switch/Prescaler;
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__udivmodsi4>
     1f2:	20 93 da 28 	sts	0x28DA, r18	; 0x8028da <__data_end>
     1f6:	30 93 db 28 	sts	0x28DB, r19	; 0x8028db <__data_end+0x1>
     1fa:	40 93 dc 28 	sts	0x28DC, r20	; 0x8028dc <__data_end+0x2>
     1fe:	50 93 dd 28 	sts	0x28DD, r21	; 0x8028dd <__data_end+0x3>
     202:	08 c0       	rjmp	.+16     	; 0x214 <get_CPU_CLK+0xa6>
	}
	else
	{
		CLK_CPU = Main_CLK_Switch;
     204:	60 93 da 28 	sts	0x28DA, r22	; 0x8028da <__data_end>
     208:	70 93 db 28 	sts	0x28DB, r23	; 0x8028db <__data_end+0x1>
     20c:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <__data_end+0x2>
     210:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <__data_end+0x3>
	}
}
     214:	6d 96       	adiw	r28, 0x1d	; 29
     216:	cd bf       	out	0x3d, r28	; 61
     218:	de bf       	out	0x3e, r29	; 62
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <init_Core_CLK>:
//				 1 - external Crystal Oscillator initialisation fail
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC push_options
#pragma GCC optimize("O3")
uint8_t init_Core_CLK(void)
{
     220:	cf 93       	push	r28
	register uint8_t reg_val = 0;
	register uint8_t timeout = 255;
		
	// internen 20MHz Oszillator auswählen
	if((CLKCTRL.MCLKSTATUS & CLKCTRL_OSC20MS_bm) == CLKCTRL_OSC20MS_bm)
     222:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
     226:	84 ff       	sbrs	r24, 4
     228:	07 c0       	rjmp	.+14     	; 0x238 <init_Core_CLK+0x18>
	{
		CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
     22a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f4060>
		CLKCTRL.MCLKCTRLA &= ~CLKCTRL_CLKOUT_bm;
     22e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f4060>
     232:	8f 77       	andi	r24, 0x7F	; 127
     234:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f4060>
	}
	
	// Kein Prescaler von CLK
	reg_val = CLKCTRL.MCLKCTRLB;
     238:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	reg_val &= ~CLKCTRL_PEN_bm;
     23c:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
     23e:	c8 ed       	ldi	r28, 0xD8	; 216
     240:	c4 bf       	out	0x34, r28	; 52
	CLKCTRL.MCLKCTRLB = reg_val;
     242:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	
	get_CPU_CLK();
     246:	0e 94 b7 00 	call	0x16e	; 0x16e <get_CPU_CLK>
	
	
	// externen 32.768 kHz Crystal Oscillator auswählen für RTC
	reg_val = CLKCTRL.XOSC32KCTRLA;
     24a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f407c>
	reg_val = (reg_val & ~CLKCTRL_CSUT_gm) | CLKCTRL_CSUT_16K_gc;
     24e:	8f 7c       	andi	r24, 0xCF	; 207
	reg_val |= CLKCTRL_RUNSTDBY_bm;
	reg_val |= CLKCTRL_ENABLE_bm;
     250:	83 61       	ori	r24, 0x13	; 19
	CPU_CCP = CCP_IOREG_gc;
     252:	c4 bf       	out	0x34, r28	; 52
	CLKCTRL.XOSC32KCTRLA = reg_val;
     254:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f407c>
	
	for(timeout = 255;
	((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)&&(timeout != 0);
     258:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
	reg_val |= CLKCTRL_RUNSTDBY_bm;
	reg_val |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = reg_val;
	
	for(timeout = 255;
     25c:	86 fd       	sbrc	r24, 6
     25e:	0e c0       	rjmp	.+28     	; 0x27c <init_Core_CLK+0x5c>
     260:	9f ef       	ldi	r25, 0xFF	; 255
     262:	02 c0       	rjmp	.+4      	; 0x268 <init_Core_CLK+0x48>
	((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)&&(timeout != 0);
     264:	99 23       	and	r25, r25
     266:	69 f0       	breq	.+26     	; 0x282 <init_Core_CLK+0x62>
	timeout--);
     268:	91 50       	subi	r25, 0x01	; 1
	reg_val |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = reg_val;
	
	for(timeout = 255;
	((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)&&(timeout != 0);
     26a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
	reg_val |= CLKCTRL_RUNSTDBY_bm;
	reg_val |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = reg_val;
	
	for(timeout = 255;
     26e:	86 ff       	sbrs	r24, 6
     270:	f9 cf       	rjmp	.-14     	; 0x264 <init_Core_CLK+0x44>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	91 11       	cpse	r25, r1
     276:	02 c0       	rjmp	.+4      	; 0x27c <init_Core_CLK+0x5c>
	if(timeout > 0)
		return 0;
	else
		return 1;
	//while((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)
}
     278:	cf 91       	pop	r28
     27a:	08 95       	ret
	reg_val |= CLKCTRL_RUNSTDBY_bm;
	reg_val |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = reg_val;
	
	for(timeout = 255;
     27c:	80 e0       	ldi	r24, 0x00	; 0
	if(timeout > 0)
		return 0;
	else
		return 1;
	//while((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)
}
     27e:	cf 91       	pop	r28
     280:	08 95       	ret
	((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)&&(timeout != 0);
	timeout--);
	if(timeout > 0)
		return 0;
	else
		return 1;
     282:	81 e0       	ldi	r24, 0x01	; 1
	//while((CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) != CLKCTRL_XOSC32KS_bm)
}
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <__iCliRetVal>:
		memcpy(lin_space, p_read_start, read_length_block);
		// Berechne die Länge für die zwei Kopieranweisungen
		p_read_start = lin_space + read_length_block;
		read_length_block = copy_lenght - read_length_block;
		if(read_length_block != 0)
			memcpy(p_read_start, FIFO->dFIFO.data, read_length_block);
     288:	f8 94       	cli
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 95       	ret

0000028e <__iRestore>:
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	8f bf       	out	0x3f, r24	; 63
     294:	08 95       	ret

00000296 <FIFO_copy_from_lin>:
	}
	return copy_lenght;
}

uint8_t FIFO_copy_from_lin(sFIFO_t* FIFO, uint8_t* lin_space, uint8_t lenght)
{
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	7c 01       	movw	r14, r24
     2b2:	6b 01       	movw	r12, r22
	/////////////////////////////////////////////////////////////////////////////////////////
	static inline __attribute__((always_inline)) uint8_t FIFO_diff_writedata(sFIFO_t* FIFO)
	{
		//return _modFIFO_max((FIFO->p_read + (_FIFO_max_def-1))- FIFO->p_write );
		uint8_t ret;
		__asm__ __volatile__(
     2b4:	fc 01       	movw	r30, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	81 5e       	subi	r24, 0xE1	; 225
     2ba:	91 81       	ldd	r25, Z+1	; 0x01
     2bc:	89 1b       	sub	r24, r25
     2be:	8f 71       	andi	r24, 0x1F	; 31
	uint8_t copy_lenght, FIFO_length;
	register uint8_t write_lenght_block;
	
	// berechne die maximale Schreiblänge
	FIFO_length = FIFO_diff_writedata(FIFO);
	copy_lenght = MIN(lenght, FIFO_length);
     2c0:	14 2f       	mov	r17, r20
     2c2:	84 17       	cp	r24, r20
     2c4:	08 f4       	brcc	.+2      	; 0x2c8 <FIFO_copy_from_lin+0x32>
     2c6:	18 2f       	mov	r17, r24
	// Berechne die Länge für die erste Kopieranweisungen
	write_lenght_block = MIN((copy_lenght),(FIFO->FIFO_max - FIFO->p_write));
     2c8:	f7 01       	movw	r30, r14
     2ca:	22 81       	ldd	r18, Z+2	; 0x02
     2cc:	31 81       	ldd	r19, Z+1	; 0x01
     2ce:	41 2f       	mov	r20, r17
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	82 2f       	mov	r24, r18
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	83 1b       	sub	r24, r19
     2d8:	91 09       	sbc	r25, r1
     2da:	48 17       	cp	r20, r24
     2dc:	59 07       	cpc	r21, r25
     2de:	8c f0       	brlt	.+34     	; 0x302 <FIFO_copy_from_lin+0x6c>
     2e0:	81 81       	ldd	r24, Z+1	; 0x01
     2e2:	02 2f       	mov	r16, r18
     2e4:	08 1b       	sub	r16, r24
	// schreibe in den Ringpuffer
	if(write_lenght_block != 0)
     2e6:	41 f5       	brne	.+80     	; 0x338 <FIFO_copy_from_lin+0xa2>
		{
			FIFO->p_write = _modFIFO_max(FIFO->p_write+copy_lenght);
		}
	}
	return copy_lenght;
}
     2e8:	81 2f       	mov	r24, r17
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	cf 90       	pop	r12
     2fc:	bf 90       	pop	r11
     2fe:	af 90       	pop	r10
     300:	08 95       	ret
	FIFO_length = FIFO_diff_writedata(FIFO);
	copy_lenght = MIN(lenght, FIFO_length);
	// Berechne die Länge für die erste Kopieranweisungen
	write_lenght_block = MIN((copy_lenght),(FIFO->FIFO_max - FIFO->p_write));
	// schreibe in den Ringpuffer
	if(write_lenght_block != 0)
     302:	11 23       	and	r17, r17
     304:	89 f3       	breq	.-30     	; 0x2e8 <FIFO_copy_from_lin+0x52>
	{
		// lese aus dem Ringpuffer den Schreibzeiger aus
		p_write_start = &(FIFO->dFIFO.data[FIFO->p_write]);
     306:	f7 01       	movw	r30, r14
     308:	81 81       	ldd	r24, Z+1	; 0x01
		memcpy(p_write_start, lin_space, write_lenght_block);
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	03 96       	adiw	r24, 0x03	; 3
     30e:	b6 01       	movw	r22, r12
     310:	8e 0d       	add	r24, r14
     312:	9f 1d       	adc	r25, r15
     314:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <memcpy>
		p_write_start = lin_space + write_lenght_block;
		write_lenght_block = copy_lenght - write_lenght_block;
		if(write_lenght_block != 0)
			memcpy(FIFO->dFIFO.data, p_write_start, write_lenght_block);
		// Schreibzeiger anpassen
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     318:	8f b7       	in	r24, 0x3f	; 63
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	0e 94 44 01 	call	0x288	; 0x288 <__iCliRetVal>
     320:	88 23       	and	r24, r24
     322:	29 f0       	breq	.+10     	; 0x32e <FIFO_copy_from_lin+0x98>
		{
			FIFO->p_write = _modFIFO_max(FIFO->p_write+copy_lenght);
     324:	f7 01       	movw	r30, r14
     326:	81 81       	ldd	r24, Z+1	; 0x01
     328:	81 0f       	add	r24, r17
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	81 83       	std	Z+1, r24	; 0x01
		p_write_start = lin_space + write_lenght_block;
		write_lenght_block = copy_lenght - write_lenght_block;
		if(write_lenght_block != 0)
			memcpy(FIFO->dFIFO.data, p_write_start, write_lenght_block);
		// Schreibzeiger anpassen
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     32e:	ce 01       	movw	r24, r28
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	0e 94 47 01 	call	0x28e	; 0x28e <__iRestore>
     336:	d8 cf       	rjmp	.-80     	; 0x2e8 <FIFO_copy_from_lin+0x52>
	write_lenght_block = MIN((copy_lenght),(FIFO->FIFO_max - FIFO->p_write));
	// schreibe in den Ringpuffer
	if(write_lenght_block != 0)
	{
		// lese aus dem Ringpuffer den Schreibzeiger aus
		p_write_start = &(FIFO->dFIFO.data[FIFO->p_write]);
     338:	81 81       	ldd	r24, Z+1	; 0x01
		memcpy(p_write_start, lin_space, write_lenght_block);
     33a:	a0 2e       	mov	r10, r16
     33c:	b1 2c       	mov	r11, r1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	03 96       	adiw	r24, 0x03	; 3
     342:	a5 01       	movw	r20, r10
     344:	b6 01       	movw	r22, r12
     346:	8e 0d       	add	r24, r14
     348:	9f 1d       	adc	r25, r15
     34a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <memcpy>
		// Berechne die Länge für die zweite Kopieranweisungen
		p_write_start = lin_space + write_lenght_block;
		write_lenght_block = copy_lenght - write_lenght_block;
     34e:	41 2f       	mov	r20, r17
     350:	40 1b       	sub	r20, r16
		if(write_lenght_block != 0)
     352:	11 f3       	breq	.-60     	; 0x318 <FIFO_copy_from_lin+0x82>
			memcpy(FIFO->dFIFO.data, p_write_start, write_lenght_block);
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	b6 01       	movw	r22, r12
     358:	6a 0d       	add	r22, r10
     35a:	7b 1d       	adc	r23, r11
     35c:	c7 01       	movw	r24, r14
     35e:	03 96       	adiw	r24, 0x03	; 3
     360:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <memcpy>
     364:	d9 cf       	rjmp	.-78     	; 0x318 <FIFO_copy_from_lin+0x82>

00000366 <__vector_17>:
					FIFO_copy_from_lin(&USART_TX_FIFO[USARTnumber], Data, length);
					// Prüfe ob der übergebene Zeiger im Heap liegt
					if(((void*)__malloc_heap_start < (void*)Data) && ((void*)__malloc_heap_end >= (void*)Data))
					{
						//Wenn ja, dann löschen des Heapspeichers
						free(Data);
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
     390:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
     394:	80 fd       	sbrc	r24, 0
     396:	11 c0       	rjmp	.+34     	; 0x3ba <__vector_17+0x54>
     398:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     39c:	87 ff       	sbrs	r24, 7
     39e:	0d c0       	rjmp	.+26     	; 0x3ba <__vector_17+0x54>
     3a0:	c6 e0       	ldi	r28, 0x06	; 6
     3a2:	d8 e2       	ldi	r29, 0x28	; 40
     3a4:	fe 01       	movw	r30, r28
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	93 95       	inc	r25
     3ac:	9f 71       	andi	r25, 0x1F	; 31
     3ae:	98 17       	cp	r25, r24
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_17+0x50>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	81 11       	cpse	r24, r1
     3b8:	1a c0       	rjmp	.+52     	; 0x3ee <__vector_17+0x88>
     3ba:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     3be:	80 78       	andi	r24, 0x80	; 128
     3c0:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	0f 90       	pop	r0
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti
     3ee:	60 91 00 08 	lds	r22, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 67 00 	call	0xce	; 0xce <FIFO_writebyte>
     3f8:	80 91 f6 28 	lds	r24, 0x28F6	; 0x8028f6 <USART_bytes_received>
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <USART_bytes_received>
     402:	90 91 f2 28 	lds	r25, 0x28F2	; 0x8028f2 <USART_bytes_to_receive>
     406:	89 13       	cpse	r24, r25
     408:	d8 cf       	rjmp	.-80     	; 0x3ba <__vector_17+0x54>
     40a:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <USART_receive_Array_callback>
     40e:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <USART_receive_Array_callback+0x1>
     412:	89 2b       	or	r24, r25
     414:	91 f2       	breq	.-92     	; 0x3ba <__vector_17+0x54>
     416:	fe 01       	movw	r30, r28
     418:	c1 81       	ldd	r28, Z+1	; 0x01
     41a:	c0 5e       	subi	r28, 0xE0	; 224
     41c:	90 81       	ld	r25, Z
     41e:	c9 1b       	sub	r28, r25
     420:	cf 71       	andi	r28, 0x1F	; 31
     422:	8c 2f       	mov	r24, r28
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 b8 0a 	call	0x1570	; 0x1570 <malloc>
     42a:	8c 01       	movw	r16, r24
     42c:	4c 2f       	mov	r20, r28
     42e:	66 e0       	ldi	r22, 0x06	; 6
     430:	78 e2       	ldi	r23, 0x28	; 40
     432:	0e 94 8a 00 	call	0x114	; 0x114 <FIFO_copy_to_lin>
     436:	e0 91 de 28 	lds	r30, 0x28DE	; 0x8028de <USART_receive_Array_callback>
     43a:	f0 91 df 28 	lds	r31, 0x28DF	; 0x8028df <USART_receive_Array_callback+0x1>
     43e:	4c 2f       	mov	r20, r28
     440:	b8 01       	movw	r22, r16
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	09 95       	icall
     446:	c8 01       	movw	r24, r16
     448:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     44c:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <USART_bytes_received>
     450:	b4 cf       	rjmp	.-152    	; 0x3ba <__vector_17+0x54>

00000452 <__vector_19>:
     452:	1f 92       	push	r1
     454:	0f 92       	push	r0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	0f 92       	push	r0
     45a:	11 24       	eor	r1, r1
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	25 97       	sbiw	r28, 0x05	; 5
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	de bf       	out	0x3e, r29	; 62
     482:	1d 82       	std	Y+5, r1	; 0x05
     484:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
     488:	80 ff       	sbrs	r24, 0
     48a:	1b c0       	rjmp	.+54     	; 0x4c2 <__vector_19+0x70>
     48c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     490:	80 74       	andi	r24, 0x40	; 64
     492:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     496:	25 96       	adiw	r28, 0x05	; 5
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti
     4c2:	be 01       	movw	r22, r28
     4c4:	6b 5f       	subi	r22, 0xFB	; 251
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	8f e6       	ldi	r24, 0x6F	; 111
     4ca:	98 e2       	ldi	r25, 0x28	; 40
     4cc:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     4d0:	81 11       	cpse	r24, r1
     4d2:	49 c0       	rjmp	.+146    	; 0x566 <__vector_19+0x114>
     4d4:	1c 82       	std	Y+4, r1	; 0x04
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	1a 82       	std	Y+2, r1	; 0x02
     4da:	1b 82       	std	Y+3, r1	; 0x03
     4dc:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <USART_send_Array_callback>
     4e0:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <USART_send_Array_callback+0x1>
     4e4:	10 97       	sbiw	r26, 0x00	; 0
     4e6:	91 f2       	breq	.-92     	; 0x48c <__vector_19+0x3a>
     4e8:	ef e6       	ldi	r30, 0x6F	; 111
     4ea:	f8 e2       	ldi	r31, 0x28	; 40
     4ec:	80 81       	ld	r24, Z
     4ee:	81 5e       	subi	r24, 0xE1	; 225
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	89 1b       	sub	r24, r25
     4f4:	8f 71       	andi	r24, 0x1F	; 31
     4f6:	28 2f       	mov	r18, r24
     4f8:	ae 01       	movw	r20, r28
     4fa:	4d 5f       	subi	r20, 0xFD	; 253
     4fc:	5f 4f       	sbci	r21, 0xFF	; 255
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	04 96       	adiw	r24, 0x04	; 4
     508:	fd 01       	movw	r30, r26
     50a:	09 95       	icall
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	7a 81       	ldd	r23, Y+2	; 0x02
     510:	61 15       	cp	r22, r1
     512:	71 05       	cpc	r23, r1
     514:	09 f4       	brne	.+2      	; 0x518 <__vector_19+0xc6>
     516:	ba cf       	rjmp	.-140    	; 0x48c <__vector_19+0x3a>
     518:	4b 81       	ldd	r20, Y+3	; 0x03
     51a:	44 23       	and	r20, r20
     51c:	09 f4       	brne	.+2      	; 0x520 <__vector_19+0xce>
     51e:	b6 cf       	rjmp	.-148    	; 0x48c <__vector_19+0x3a>
     520:	8f e6       	ldi	r24, 0x6F	; 111
     522:	98 e2       	ldi	r25, 0x28	; 40
     524:	0e 94 4b 01 	call	0x296	; 0x296 <FIFO_copy_from_lin>
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     530:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	38 f4       	brcc	.+14     	; 0x548 <__vector_19+0xf6>
     53a:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     53e:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     542:	28 17       	cp	r18, r24
     544:	39 07       	cpc	r19, r25
     546:	b8 f4       	brcc	.+46     	; 0x576 <__vector_19+0x124>
     548:	be 01       	movw	r22, r28
     54a:	6b 5f       	subi	r22, 0xFB	; 251
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	8f e6       	ldi	r24, 0x6F	; 111
     550:	98 e2       	ldi	r25, 0x28	; 40
     552:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <__vector_19+0x10a>
     55a:	98 cf       	rjmp	.-208    	; 0x48c <__vector_19+0x3a>
     55c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     560:	85 ff       	sbrs	r24, 5
     562:	fc cf       	rjmp	.-8      	; 0x55c <__vector_19+0x10a>
     564:	04 c0       	rjmp	.+8      	; 0x56e <__vector_19+0x11c>
     566:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     56a:	85 ff       	sbrs	r24, 5
     56c:	8f cf       	rjmp	.-226    	; 0x48c <__vector_19+0x3a>
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
     574:	8b cf       	rjmp	.-234    	; 0x48c <__vector_19+0x3a>
     576:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     57a:	e6 cf       	rjmp	.-52     	; 0x548 <__vector_19+0xf6>

0000057c <__vector_26>:
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
     5a6:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f4826>
     5aa:	80 fd       	sbrc	r24, 0
     5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <__vector_26+0x54>
     5ae:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     5b2:	87 ff       	sbrs	r24, 7
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <__vector_26+0x54>
     5b6:	c9 e2       	ldi	r28, 0x29	; 41
     5b8:	d8 e2       	ldi	r29, 0x28	; 40
     5ba:	fe 01       	movw	r30, r28
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	93 95       	inc	r25
     5c2:	9f 71       	andi	r25, 0x1F	; 31
     5c4:	98 17       	cp	r25, r24
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_26+0x50>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	81 11       	cpse	r24, r1
     5ce:	1a c0       	rjmp	.+52     	; 0x604 <__vector_26+0x88>
     5d0:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     5d4:	80 78       	andi	r24, 0x80	; 128
     5d6:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     5da:	ff 91       	pop	r31
     5dc:	ef 91       	pop	r30
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti
     604:	60 91 20 08 	lds	r22, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
     608:	ce 01       	movw	r24, r28
     60a:	0e 94 67 00 	call	0xce	; 0xce <FIFO_writebyte>
     60e:	80 91 f7 28 	lds	r24, 0x28F7	; 0x8028f7 <USART_bytes_received+0x1>
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 f7 28 	sts	0x28F7, r24	; 0x8028f7 <USART_bytes_received+0x1>
     618:	90 91 f3 28 	lds	r25, 0x28F3	; 0x8028f3 <USART_bytes_to_receive+0x1>
     61c:	89 13       	cpse	r24, r25
     61e:	d8 cf       	rjmp	.-80     	; 0x5d0 <__vector_26+0x54>
     620:	80 91 e0 28 	lds	r24, 0x28E0	; 0x8028e0 <USART_receive_Array_callback+0x2>
     624:	90 91 e1 28 	lds	r25, 0x28E1	; 0x8028e1 <USART_receive_Array_callback+0x3>
     628:	89 2b       	or	r24, r25
     62a:	91 f2       	breq	.-92     	; 0x5d0 <__vector_26+0x54>
     62c:	fe 01       	movw	r30, r28
     62e:	c1 81       	ldd	r28, Z+1	; 0x01
     630:	c0 5e       	subi	r28, 0xE0	; 224
     632:	90 81       	ld	r25, Z
     634:	c9 1b       	sub	r28, r25
     636:	cf 71       	andi	r28, 0x1F	; 31
     638:	8c 2f       	mov	r24, r28
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <malloc>
     640:	8c 01       	movw	r16, r24
     642:	4c 2f       	mov	r20, r28
     644:	69 e2       	ldi	r22, 0x29	; 41
     646:	78 e2       	ldi	r23, 0x28	; 40
     648:	0e 94 8a 00 	call	0x114	; 0x114 <FIFO_copy_to_lin>
     64c:	e0 91 e0 28 	lds	r30, 0x28E0	; 0x8028e0 <USART_receive_Array_callback+0x2>
     650:	f0 91 e1 28 	lds	r31, 0x28E1	; 0x8028e1 <USART_receive_Array_callback+0x3>
     654:	4c 2f       	mov	r20, r28
     656:	b8 01       	movw	r22, r16
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	09 95       	icall
     65c:	c8 01       	movw	r24, r16
     65e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     662:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <USART_bytes_received+0x1>
     666:	b4 cf       	rjmp	.-152    	; 0x5d0 <__vector_26+0x54>

00000668 <__vector_28>:
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
     678:	5f 93       	push	r21
     67a:	6f 93       	push	r22
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	25 97       	sbiw	r28, 0x05	; 5
     694:	cd bf       	out	0x3d, r28	; 61
     696:	de bf       	out	0x3e, r29	; 62
     698:	1d 82       	std	Y+5, r1	; 0x05
     69a:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f4826>
     69e:	80 ff       	sbrs	r24, 0
     6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <__vector_28+0x70>
     6a2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     6a6:	80 74       	andi	r24, 0x40	; 64
     6a8:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti
     6d8:	be 01       	movw	r22, r28
     6da:	6b 5f       	subi	r22, 0xFB	; 251
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	82 e9       	ldi	r24, 0x92	; 146
     6e0:	98 e2       	ldi	r25, 0x28	; 40
     6e2:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     6e6:	81 11       	cpse	r24, r1
     6e8:	49 c0       	rjmp	.+146    	; 0x77c <__vector_28+0x114>
     6ea:	1c 82       	std	Y+4, r1	; 0x04
     6ec:	19 82       	std	Y+1, r1	; 0x01
     6ee:	1a 82       	std	Y+2, r1	; 0x02
     6f0:	1b 82       	std	Y+3, r1	; 0x03
     6f2:	a0 91 e8 28 	lds	r26, 0x28E8	; 0x8028e8 <USART_send_Array_callback+0x2>
     6f6:	b0 91 e9 28 	lds	r27, 0x28E9	; 0x8028e9 <USART_send_Array_callback+0x3>
     6fa:	10 97       	sbiw	r26, 0x00	; 0
     6fc:	91 f2       	breq	.-92     	; 0x6a2 <__vector_28+0x3a>
     6fe:	e2 e9       	ldi	r30, 0x92	; 146
     700:	f8 e2       	ldi	r31, 0x28	; 40
     702:	80 81       	ld	r24, Z
     704:	81 5e       	subi	r24, 0xE1	; 225
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	89 1b       	sub	r24, r25
     70a:	8f 71       	andi	r24, 0x1F	; 31
     70c:	28 2f       	mov	r18, r24
     70e:	ae 01       	movw	r20, r28
     710:	4d 5f       	subi	r20, 0xFD	; 253
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	be 01       	movw	r22, r28
     716:	6f 5f       	subi	r22, 0xFF	; 255
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	ce 01       	movw	r24, r28
     71c:	04 96       	adiw	r24, 0x04	; 4
     71e:	fd 01       	movw	r30, r26
     720:	09 95       	icall
     722:	69 81       	ldd	r22, Y+1	; 0x01
     724:	7a 81       	ldd	r23, Y+2	; 0x02
     726:	61 15       	cp	r22, r1
     728:	71 05       	cpc	r23, r1
     72a:	09 f4       	brne	.+2      	; 0x72e <__vector_28+0xc6>
     72c:	ba cf       	rjmp	.-140    	; 0x6a2 <__vector_28+0x3a>
     72e:	4b 81       	ldd	r20, Y+3	; 0x03
     730:	44 23       	and	r20, r20
     732:	09 f4       	brne	.+2      	; 0x736 <__vector_28+0xce>
     734:	b6 cf       	rjmp	.-148    	; 0x6a2 <__vector_28+0x3a>
     736:	82 e9       	ldi	r24, 0x92	; 146
     738:	98 e2       	ldi	r25, 0x28	; 40
     73a:	0e 94 4b 01 	call	0x296	; 0x296 <FIFO_copy_from_lin>
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     746:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     74a:	28 17       	cp	r18, r24
     74c:	39 07       	cpc	r19, r25
     74e:	38 f4       	brcc	.+14     	; 0x75e <__vector_28+0xf6>
     750:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     754:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     758:	28 17       	cp	r18, r24
     75a:	39 07       	cpc	r19, r25
     75c:	b8 f4       	brcc	.+46     	; 0x78c <__vector_28+0x124>
     75e:	be 01       	movw	r22, r28
     760:	6b 5f       	subi	r22, 0xFB	; 251
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	82 e9       	ldi	r24, 0x92	; 146
     766:	98 e2       	ldi	r25, 0x28	; 40
     768:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     76c:	88 23       	and	r24, r24
     76e:	09 f4       	brne	.+2      	; 0x772 <__vector_28+0x10a>
     770:	98 cf       	rjmp	.-208    	; 0x6a2 <__vector_28+0x3a>
     772:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     776:	85 ff       	sbrs	r24, 5
     778:	fc cf       	rjmp	.-8      	; 0x772 <__vector_28+0x10a>
     77a:	04 c0       	rjmp	.+8      	; 0x784 <__vector_28+0x11c>
     77c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f4824>
     780:	85 ff       	sbrs	r24, 5
     782:	8f cf       	rjmp	.-226    	; 0x6a2 <__vector_28+0x3a>
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
     78a:	8b cf       	rjmp	.-234    	; 0x6a2 <__vector_28+0x3a>
     78c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     790:	e6 cf       	rjmp	.-52     	; 0x75e <__vector_28+0xf6>

00000792 <__vector_31>:
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	2f 93       	push	r18
     7a2:	3f 93       	push	r19
     7a4:	4f 93       	push	r20
     7a6:	5f 93       	push	r21
     7a8:	6f 93       	push	r22
     7aa:	7f 93       	push	r23
     7ac:	8f 93       	push	r24
     7ae:	9f 93       	push	r25
     7b0:	af 93       	push	r26
     7b2:	bf 93       	push	r27
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
     7bc:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <__TEXT_REGION_LENGTH__+0x7f4846>
     7c0:	80 fd       	sbrc	r24, 0
     7c2:	11 c0       	rjmp	.+34     	; 0x7e6 <__vector_31+0x54>
     7c4:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     7c8:	87 ff       	sbrs	r24, 7
     7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <__vector_31+0x54>
     7cc:	cc e4       	ldi	r28, 0x4C	; 76
     7ce:	d8 e2       	ldi	r29, 0x28	; 40
     7d0:	fe 01       	movw	r30, r28
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	93 95       	inc	r25
     7d8:	9f 71       	andi	r25, 0x1F	; 31
     7da:	98 17       	cp	r25, r24
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_31+0x50>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	81 11       	cpse	r24, r1
     7e4:	1a c0       	rjmp	.+52     	; 0x81a <__vector_31+0x88>
     7e6:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     7ea:	80 78       	andi	r24, 0x80	; 128
     7ec:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti
     81a:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f4840>
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 67 00 	call	0xce	; 0xce <FIFO_writebyte>
     824:	80 91 f8 28 	lds	r24, 0x28F8	; 0x8028f8 <USART_bytes_received+0x2>
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <USART_bytes_received+0x2>
     82e:	90 91 f4 28 	lds	r25, 0x28F4	; 0x8028f4 <USART_bytes_to_receive+0x2>
     832:	89 13       	cpse	r24, r25
     834:	d8 cf       	rjmp	.-80     	; 0x7e6 <__vector_31+0x54>
     836:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <USART_receive_Array_callback+0x4>
     83a:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <USART_receive_Array_callback+0x5>
     83e:	89 2b       	or	r24, r25
     840:	91 f2       	breq	.-92     	; 0x7e6 <__vector_31+0x54>
     842:	fe 01       	movw	r30, r28
     844:	c1 81       	ldd	r28, Z+1	; 0x01
     846:	c0 5e       	subi	r28, 0xE0	; 224
     848:	90 81       	ld	r25, Z
     84a:	c9 1b       	sub	r28, r25
     84c:	cf 71       	andi	r28, 0x1F	; 31
     84e:	8c 2f       	mov	r24, r28
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 b8 0a 	call	0x1570	; 0x1570 <malloc>
     856:	8c 01       	movw	r16, r24
     858:	4c 2f       	mov	r20, r28
     85a:	6c e4       	ldi	r22, 0x4C	; 76
     85c:	78 e2       	ldi	r23, 0x28	; 40
     85e:	0e 94 8a 00 	call	0x114	; 0x114 <FIFO_copy_to_lin>
     862:	e0 91 e2 28 	lds	r30, 0x28E2	; 0x8028e2 <USART_receive_Array_callback+0x4>
     866:	f0 91 e3 28 	lds	r31, 0x28E3	; 0x8028e3 <USART_receive_Array_callback+0x5>
     86a:	4c 2f       	mov	r20, r28
     86c:	b8 01       	movw	r22, r16
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	09 95       	icall
     872:	c8 01       	movw	r24, r16
     874:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     878:	10 92 f8 28 	sts	0x28F8, r1	; 0x8028f8 <USART_bytes_received+0x2>
     87c:	b4 cf       	rjmp	.-152    	; 0x7e6 <__vector_31+0x54>

0000087e <__vector_33>:
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	25 97       	sbiw	r28, 0x05	; 5
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	1d 82       	std	Y+5, r1	; 0x05
     8b0:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <__TEXT_REGION_LENGTH__+0x7f4846>
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	1b c0       	rjmp	.+54     	; 0x8ee <__vector_33+0x70>
     8b8:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     8bc:	80 74       	andi	r24, 0x40	; 64
     8be:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     8c2:	25 96       	adiw	r28, 0x05	; 5
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti
     8ee:	be 01       	movw	r22, r28
     8f0:	6b 5f       	subi	r22, 0xFB	; 251
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	85 eb       	ldi	r24, 0xB5	; 181
     8f6:	98 e2       	ldi	r25, 0x28	; 40
     8f8:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     8fc:	81 11       	cpse	r24, r1
     8fe:	49 c0       	rjmp	.+146    	; 0x992 <__vector_33+0x114>
     900:	1c 82       	std	Y+4, r1	; 0x04
     902:	19 82       	std	Y+1, r1	; 0x01
     904:	1a 82       	std	Y+2, r1	; 0x02
     906:	1b 82       	std	Y+3, r1	; 0x03
     908:	a0 91 ea 28 	lds	r26, 0x28EA	; 0x8028ea <USART_send_Array_callback+0x4>
     90c:	b0 91 eb 28 	lds	r27, 0x28EB	; 0x8028eb <USART_send_Array_callback+0x5>
     910:	10 97       	sbiw	r26, 0x00	; 0
     912:	91 f2       	breq	.-92     	; 0x8b8 <__vector_33+0x3a>
     914:	e5 eb       	ldi	r30, 0xB5	; 181
     916:	f8 e2       	ldi	r31, 0x28	; 40
     918:	80 81       	ld	r24, Z
     91a:	81 5e       	subi	r24, 0xE1	; 225
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	89 1b       	sub	r24, r25
     920:	8f 71       	andi	r24, 0x1F	; 31
     922:	28 2f       	mov	r18, r24
     924:	ae 01       	movw	r20, r28
     926:	4d 5f       	subi	r20, 0xFD	; 253
     928:	5f 4f       	sbci	r21, 0xFF	; 255
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	04 96       	adiw	r24, 0x04	; 4
     934:	fd 01       	movw	r30, r26
     936:	09 95       	icall
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	61 15       	cp	r22, r1
     93e:	71 05       	cpc	r23, r1
     940:	09 f4       	brne	.+2      	; 0x944 <__vector_33+0xc6>
     942:	ba cf       	rjmp	.-140    	; 0x8b8 <__vector_33+0x3a>
     944:	4b 81       	ldd	r20, Y+3	; 0x03
     946:	44 23       	and	r20, r20
     948:	09 f4       	brne	.+2      	; 0x94c <__vector_33+0xce>
     94a:	b6 cf       	rjmp	.-148    	; 0x8b8 <__vector_33+0x3a>
     94c:	85 eb       	ldi	r24, 0xB5	; 181
     94e:	98 e2       	ldi	r25, 0x28	; 40
     950:	0e 94 4b 01 	call	0x296	; 0x296 <FIFO_copy_from_lin>
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
     95c:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	38 f4       	brcc	.+14     	; 0x974 <__vector_33+0xf6>
     966:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     96a:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
     972:	b8 f4       	brcc	.+46     	; 0x9a2 <__vector_33+0x124>
     974:	be 01       	movw	r22, r28
     976:	6b 5f       	subi	r22, 0xFB	; 251
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	85 eb       	ldi	r24, 0xB5	; 181
     97c:	98 e2       	ldi	r25, 0x28	; 40
     97e:	0e 94 78 00 	call	0xf0	; 0xf0 <FIFO_readbyte>
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <__vector_33+0x10a>
     986:	98 cf       	rjmp	.-208    	; 0x8b8 <__vector_33+0x3a>
     988:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     98c:	85 ff       	sbrs	r24, 5
     98e:	fc cf       	rjmp	.-8      	; 0x988 <__vector_33+0x10a>
     990:	04 c0       	rjmp	.+8      	; 0x99a <__vector_33+0x11c>
     992:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f4844>
     996:	85 ff       	sbrs	r24, 5
     998:	8f cf       	rjmp	.-226    	; 0x8b8 <__vector_33+0x3a>
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f4842>
     9a0:	8b cf       	rjmp	.-234    	; 0x8b8 <__vector_33+0x3a>
     9a2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <free>
     9a6:	e6 cf       	rjmp	.-52     	; 0x974 <__vector_33+0xf6>

000009a8 <USART_init>:
     9a8:	8f 92       	push	r8
     9aa:	af 92       	push	r10
     9ac:	cf 92       	push	r12
     9ae:	ef 92       	push	r14
     9b0:	0f 93       	push	r16
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	a7 97       	sbiw	r28, 0x27	; 39
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	8d 8f       	std	Y+29, r24	; 0x1d
     9c2:	4e 8f       	std	Y+30, r20	; 0x1e
     9c4:	5f 8f       	std	Y+31, r21	; 0x1f
     9c6:	68 a3       	std	Y+32, r22	; 0x20
     9c8:	79 a3       	std	Y+33, r23	; 0x21
     9ca:	2a a3       	std	Y+34, r18	; 0x22
     9cc:	0b a3       	std	Y+35, r16	; 0x23
     9ce:	ec a2       	std	Y+36, r14	; 0x24
     9d0:	cd a2       	std	Y+37, r12	; 0x25
     9d2:	ae a2       	std	Y+38, r10	; 0x26
     9d4:	8f a2       	std	Y+39, r8	; 0x27
     9d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	8b 51       	subi	r24, 0x1B	; 27
     9e2:	98 4a       	sbci	r25, 0xA8	; 168
     9e4:	fc 01       	movw	r30, r24
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	8c 83       	std	Y+4, r24	; 0x04
     9ec:	9d 83       	std	Y+5, r25	; 0x05
     9ee:	1e 8a       	std	Y+22, r1	; 0x16
     9f0:	1f 8a       	std	Y+23, r1	; 0x17
     9f2:	18 8e       	std	Y+24, r1	; 0x18
     9f4:	19 8e       	std	Y+25, r1	; 0x19
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	8a 8f       	std	Y+26, r24	; 0x1a
     9fa:	1b 8e       	std	Y+27, r1	; 0x1b
     9fc:	80 ee       	ldi	r24, 0xE0	; 224
     9fe:	95 e0       	ldi	r25, 0x05	; 5
     a00:	fc 01       	movw	r30, r24
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	8c 8f       	std	Y+28, r24	; 0x1c
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	8a a1       	ldd	r24, Y+34	; 0x22
     a0c:	88 30       	cpi	r24, 0x08	; 8
     a0e:	48 f4       	brcc	.+18     	; 0xa22 <USART_init+0x7a>
     a10:	8a a1       	ldd	r24, Y+34	; 0x22
     a12:	84 30       	cpi	r24, 0x04	; 4
     a14:	18 f0       	brcs	.+6      	; 0xa1c <USART_init+0x74>
     a16:	8a a1       	ldd	r24, Y+34	; 0x22
     a18:	86 30       	cpi	r24, 0x06	; 6
     a1a:	18 f0       	brcs	.+6      	; 0xa22 <USART_init+0x7a>
     a1c:	8b a1       	ldd	r24, Y+35	; 0x23
     a1e:	81 33       	cpi	r24, 0x31	; 49
     a20:	18 f0       	brcs	.+6      	; 0xa28 <USART_init+0x80>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	1d c2       	rjmp	.+1082   	; 0xe62 <USART_init+0x4ba>
     a28:	8c 81       	ldd	r24, Y+4	; 0x04
     a2a:	9d 81       	ldd	r25, Y+5	; 0x05
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f4       	brne	.+2      	; 0xa32 <USART_init+0x8a>
     a30:	18 c2       	rjmp	.+1072   	; 0xe62 <USART_init+0x4ba>
     a32:	8d a1       	ldd	r24, Y+37	; 0x25
     a34:	88 23       	and	r24, r24
     a36:	09 f4       	brne	.+2      	; 0xa3a <USART_init+0x92>
     a38:	4a c0       	rjmp	.+148    	; 0xace <USART_init+0x126>
     a3a:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <__data_end>
     a3e:	90 91 db 28 	lds	r25, 0x28DB	; 0x8028db <__data_end+0x1>
     a42:	a0 91 dc 28 	lds	r26, 0x28DC	; 0x8028dc <__data_end+0x2>
     a46:	b0 91 dd 28 	lds	r27, 0x28DD	; 0x8028dd <__data_end+0x3>
     a4a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     a4c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a4e:	48 a1       	ldd	r20, Y+32	; 0x20
     a50:	59 a1       	ldd	r21, Y+33	; 0x21
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__udivmodsi4>
     a5a:	da 01       	movw	r26, r20
     a5c:	c9 01       	movw	r24, r18
     a5e:	b6 95       	lsr	r27
     a60:	a7 95       	ror	r26
     a62:	97 95       	ror	r25
     a64:	87 95       	ror	r24
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	aa 1f       	adc	r26, r26
     a6c:	bb 1f       	adc	r27, r27
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	aa 1f       	adc	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	aa 1f       	adc	r26, r26
     a7c:	bb 1f       	adc	r27, r27
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	aa 1f       	adc	r26, r26
     a94:	bb 1f       	adc	r27, r27
     a96:	8e 83       	std	Y+6, r24	; 0x06
     a98:	9f 83       	std	Y+7, r25	; 0x07
     a9a:	a8 87       	std	Y+8, r26	; 0x08
     a9c:	b9 87       	std	Y+9, r27	; 0x09
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	8a 87       	std	Y+10, r24	; 0x0a
     aa4:	9b 87       	std	Y+11, r25	; 0x0b
     aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
     aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
     aaa:	9c 01       	movw	r18, r24
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	9f 81       	ldd	r25, Y+7	; 0x07
     ab4:	a8 85       	ldd	r26, Y+8	; 0x08
     ab6:	b9 85       	ldd	r27, Y+9	; 0x09
     ab8:	82 17       	cp	r24, r18
     aba:	93 07       	cpc	r25, r19
     abc:	a4 07       	cpc	r26, r20
     abe:	b5 07       	cpc	r27, r21
     ac0:	10 f4       	brcc	.+4      	; 0xac6 <USART_init+0x11e>
     ac2:	9c 01       	movw	r18, r24
     ac4:	ad 01       	movw	r20, r26
     ac6:	c9 01       	movw	r24, r18
     ac8:	8e 8b       	std	Y+22, r24	; 0x16
     aca:	9f 8b       	std	Y+23, r25	; 0x17
     acc:	42 c0       	rjmp	.+132    	; 0xb52 <USART_init+0x1aa>
     ace:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <__data_end>
     ad2:	90 91 db 28 	lds	r25, 0x28DB	; 0x8028db <__data_end+0x1>
     ad6:	a0 91 dc 28 	lds	r26, 0x28DC	; 0x8028dc <__data_end+0x2>
     ada:	b0 91 dd 28 	lds	r27, 0x28DD	; 0x8028dd <__data_end+0x3>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	aa 1f       	adc	r26, r26
     aec:	bb 1f       	adc	r27, r27
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	aa 1f       	adc	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     af8:	3f 8d       	ldd	r19, Y+31	; 0x1f
     afa:	48 a1       	ldd	r20, Y+32	; 0x20
     afc:	59 a1       	ldd	r21, Y+33	; 0x21
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__udivmodsi4>
     b06:	da 01       	movw	r26, r20
     b08:	c9 01       	movw	r24, r18
     b0a:	8c 87       	std	Y+12, r24	; 0x0c
     b0c:	9d 87       	std	Y+13, r25	; 0x0d
     b0e:	ae 87       	std	Y+14, r26	; 0x0e
     b10:	bf 87       	std	Y+15, r27	; 0x0f
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	88 8b       	std	Y+16, r24	; 0x10
     b18:	99 8b       	std	Y+17, r25	; 0x11
     b1a:	88 89       	ldd	r24, Y+16	; 0x10
     b1c:	99 89       	ldd	r25, Y+17	; 0x11
     b1e:	9c 01       	movw	r18, r24
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	8c 85       	ldd	r24, Y+12	; 0x0c
     b26:	9d 85       	ldd	r25, Y+13	; 0x0d
     b28:	ae 85       	ldd	r26, Y+14	; 0x0e
     b2a:	bf 85       	ldd	r27, Y+15	; 0x0f
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	a4 07       	cpc	r26, r20
     b32:	b5 07       	cpc	r27, r21
     b34:	10 f4       	brcc	.+4      	; 0xb3a <USART_init+0x192>
     b36:	9c 01       	movw	r18, r24
     b38:	ad 01       	movw	r20, r26
     b3a:	c9 01       	movw	r24, r18
     b3c:	8e 8b       	std	Y+22, r24	; 0x16
     b3e:	9f 8b       	std	Y+23, r25	; 0x17
     b40:	8e 89       	ldd	r24, Y+22	; 0x16
     b42:	9f 89       	ldd	r25, Y+23	; 0x17
     b44:	80 34       	cpi	r24, 0x40	; 64
     b46:	91 05       	cpc	r25, r1
     b48:	20 f4       	brcc	.+8      	; 0xb52 <USART_init+0x1aa>
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	8e 8b       	std	Y+22, r24	; 0x16
     b50:	9f 8b       	std	Y+23, r25	; 0x17
     b52:	8a a1       	ldd	r24, Y+34	; 0x22
     b54:	87 70       	andi	r24, 0x07	; 7
     b56:	87 70       	andi	r24, 0x07	; 7
     b58:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5a:	98 7f       	andi	r25, 0xF8	; 248
     b5c:	89 2b       	or	r24, r25
     b5e:	8a 8f       	std	Y+26, r24	; 0x1a
     b60:	8b a1       	ldd	r24, Y+35	; 0x23
     b62:	82 95       	swap	r24
     b64:	8f 70       	andi	r24, 0x0F	; 15
     b66:	83 70       	andi	r24, 0x03	; 3
     b68:	83 70       	andi	r24, 0x03	; 3
     b6a:	82 95       	swap	r24
     b6c:	80 7f       	andi	r24, 0xF0	; 240
     b6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b70:	9f 7c       	andi	r25, 0xCF	; 207
     b72:	89 2b       	or	r24, r25
     b74:	8a 8f       	std	Y+26, r24	; 0x1a
     b76:	8d a1       	ldd	r24, Y+37	; 0x25
     b78:	88 23       	and	r24, r24
     b7a:	29 f0       	breq	.+10     	; 0xb86 <USART_init+0x1de>
     b7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b7e:	8f 73       	andi	r24, 0x3F	; 63
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	8a 8f       	std	Y+26, r24	; 0x1a
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <USART_init+0x1e4>
     b86:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b88:	8f 73       	andi	r24, 0x3F	; 63
     b8a:	8a 8f       	std	Y+26, r24	; 0x1a
     b8c:	8e a1       	ldd	r24, Y+38	; 0x26
     b8e:	88 23       	and	r24, r24
     b90:	99 f0       	breq	.+38     	; 0xbb8 <USART_init+0x210>
     b92:	88 8d       	ldd	r24, Y+24	; 0x18
     b94:	8c 7f       	andi	r24, 0xFC	; 252
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	88 8f       	std	Y+24, r24	; 0x18
     b9a:	89 8d       	ldd	r24, Y+25	; 0x19
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	89 8f       	std	Y+25, r24	; 0x19
     ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	82 51       	subi	r24, 0x12	; 18
     ba8:	97 4d       	sbci	r25, 0xD7	; 215
     baa:	2f a1       	ldd	r18, Y+39	; 0x27
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
     bb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8a 8f       	std	Y+26, r24	; 0x1a
     bb6:	1a c0       	rjmp	.+52     	; 0xbec <USART_init+0x244>
     bb8:	88 8d       	ldd	r24, Y+24	; 0x18
     bba:	8c 7f       	andi	r24, 0xFC	; 252
     bbc:	88 8f       	std	Y+24, r24	; 0x18
     bbe:	89 8d       	ldd	r24, Y+25	; 0x19
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	89 8f       	std	Y+25, r24	; 0x19
     bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	82 51       	subi	r24, 0x12	; 18
     bcc:	97 4d       	sbci	r25, 0xD7	; 215
     bce:	fc 01       	movw	r30, r24
     bd0:	10 82       	st	Z, r1
     bd2:	8c a1       	ldd	r24, Y+36	; 0x24
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	86 95       	lsr	r24
     bda:	81 70       	andi	r24, 0x01	; 1
     bdc:	81 70       	andi	r24, 0x01	; 1
     bde:	88 0f       	add	r24, r24
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     be6:	97 7f       	andi	r25, 0xF7	; 247
     be8:	89 2b       	or	r24, r25
     bea:	8a 8f       	std	Y+26, r24	; 0x1a
     bec:	9d a1       	ldd	r25, Y+37	; 0x25
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	89 27       	eor	r24, r25
     bf2:	88 23       	and	r24, r24
     bf4:	21 f0       	breq	.+8      	; 0xbfe <USART_init+0x256>
     bf6:	89 8d       	ldd	r24, Y+25	; 0x19
     bf8:	89 7f       	andi	r24, 0xF9	; 249
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	89 8f       	std	Y+25, r24	; 0x19
     bfe:	80 ee       	ldi	r24, 0xE0	; 224
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	fc 01       	movw	r30, r24
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	8c 8f       	std	Y+28, r24	; 0x1c
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	91 05       	cpc	r25, r1
     c12:	b9 f0       	breq	.+46     	; 0xc42 <USART_init+0x29a>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	91 05       	cpc	r25, r1
     c18:	1c f4       	brge	.+6      	; 0xc20 <USART_init+0x278>
     c1a:	89 2b       	or	r24, r25
     c1c:	39 f0       	breq	.+14     	; 0xc2c <USART_init+0x284>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <USART_init+0x2d2>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	91 05       	cpc	r25, r1
     c24:	c1 f0       	breq	.+48     	; 0xc56 <USART_init+0x2ae>
     c26:	03 97       	sbiw	r24, 0x03	; 3
     c28:	01 f1       	breq	.+64     	; 0xc6a <USART_init+0x2c2>
     c2a:	27 c0       	rjmp	.+78     	; 0xc7a <USART_init+0x2d2>
     c2c:	89 a9       	ldd	r24, Y+49	; 0x31
     c2e:	83 70       	andi	r24, 0x03	; 3
     c30:	82 95       	swap	r24
     c32:	88 0f       	add	r24, r24
     c34:	88 0f       	add	r24, r24
     c36:	80 7c       	andi	r24, 0xC0	; 192
     c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c3a:	9f 73       	andi	r25, 0x3F	; 63
     c3c:	89 2b       	or	r24, r25
     c3e:	8c 8f       	std	Y+28, r24	; 0x1c
     c40:	1c c0       	rjmp	.+56     	; 0xc7a <USART_init+0x2d2>
     c42:	89 a9       	ldd	r24, Y+49	; 0x31
     c44:	83 70       	andi	r24, 0x03	; 3
     c46:	83 70       	andi	r24, 0x03	; 3
     c48:	82 95       	swap	r24
     c4a:	80 7f       	andi	r24, 0xF0	; 240
     c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c4e:	9f 7c       	andi	r25, 0xCF	; 207
     c50:	89 2b       	or	r24, r25
     c52:	8c 8f       	std	Y+28, r24	; 0x1c
     c54:	12 c0       	rjmp	.+36     	; 0xc7a <USART_init+0x2d2>
     c56:	89 a9       	ldd	r24, Y+49	; 0x31
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	83 70       	andi	r24, 0x03	; 3
     c5c:	88 0f       	add	r24, r24
     c5e:	88 0f       	add	r24, r24
     c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c62:	93 7f       	andi	r25, 0xF3	; 243
     c64:	89 2b       	or	r24, r25
     c66:	8c 8f       	std	Y+28, r24	; 0x1c
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <USART_init+0x2d2>
     c6a:	89 a9       	ldd	r24, Y+49	; 0x31
     c6c:	83 70       	andi	r24, 0x03	; 3
     c6e:	83 70       	andi	r24, 0x03	; 3
     c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c72:	9c 7f       	andi	r25, 0xFC	; 252
     c74:	89 2b       	or	r24, r25
     c76:	8c 8f       	std	Y+28, r24	; 0x1c
     c78:	00 00       	nop
     c7a:	89 8d       	ldd	r24, Y+25	; 0x19
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	89 8f       	std	Y+25, r24	; 0x19
     c80:	89 8d       	ldd	r24, Y+25	; 0x19
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	89 8f       	std	Y+25, r24	; 0x19
     c86:	88 8d       	ldd	r24, Y+24	; 0x18
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	88 8f       	std	Y+24, r24	; 0x18
     c8c:	88 8d       	ldd	r24, Y+24	; 0x18
     c8e:	80 64       	ori	r24, 0x40	; 64
     c90:	88 8f       	std	Y+24, r24	; 0x18
     c92:	80 ee       	ldi	r24, 0xE0	; 224
     c94:	95 e0       	ldi	r25, 0x05	; 5
     c96:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c98:	fc 01       	movw	r30, r24
     c9a:	22 83       	std	Z+2, r18	; 0x02
     c9c:	28 8d       	ldd	r18, Y+24	; 0x18
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	fc 01       	movw	r30, r24
     ca4:	25 83       	std	Z+5, r18	; 0x05
     ca6:	29 8d       	ldd	r18, Y+25	; 0x19
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	fc 01       	movw	r30, r24
     cae:	26 83       	std	Z+6, r18	; 0x06
     cb0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	fc 01       	movw	r30, r24
     cb8:	27 83       	std	Z+7, r18	; 0x07
     cba:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	fc 01       	movw	r30, r24
     cc2:	22 87       	std	Z+10, r18	; 0x0a
     cc4:	2e 89       	ldd	r18, Y+22	; 0x16
     cc6:	3f 89       	ldd	r19, Y+23	; 0x17
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	9d 81       	ldd	r25, Y+5	; 0x05
     ccc:	fc 01       	movw	r30, r24
     cce:	20 87       	std	Z+8, r18	; 0x08
     cd0:	31 87       	std	Z+9, r19	; 0x09
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	fc 01       	movw	r30, r24
     cd8:	13 86       	std	Z+11, r1	; 0x0b
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	9d 81       	ldd	r25, Y+5	; 0x05
     cde:	fc 01       	movw	r30, r24
     ce0:	14 86       	std	Z+12, r1	; 0x0c
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	fc 01       	movw	r30, r24
     ce8:	15 86       	std	Z+13, r1	; 0x0d
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	fc 01       	movw	r30, r24
     cf0:	16 86       	std	Z+14, r1	; 0x0e
     cf2:	1a 82       	std	Y+2, r1	; 0x02
     cf4:	1b 82       	std	Y+3, r1	; 0x03
     cf6:	00 00       	nop
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e1       	ldi	r25, 0x10	; 16
     cfc:	fc 01       	movw	r30, r24
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	82 70       	andi	r24, 0x02	; 2
     d06:	99 27       	eor	r25, r25
     d08:	89 2b       	or	r24, r25
     d0a:	b1 f7       	brne	.-20     	; 0xcf8 <USART_init+0x350>
     d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	80 50       	subi	r24, 0x00	; 0
     d14:	90 40       	sbci	r25, 0x00	; 0
     d16:	9c 5e       	subi	r25, 0xEC	; 236
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	8a 8b       	std	Y+18, r24	; 0x12
     d1e:	00 00       	nop
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e1       	ldi	r25, 0x10	; 16
     d24:	fc 01       	movw	r30, r24
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	82 70       	andi	r24, 0x02	; 2
     d2e:	99 27       	eor	r25, r25
     d30:	89 2b       	or	r24, r25
     d32:	b1 f7       	brne	.-20     	; 0xd20 <USART_init+0x378>
     d34:	89 a9       	ldd	r24, Y+49	; 0x31
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	8c 5e       	subi	r24, 0xEC	; 236
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	9c 5e       	subi	r25, 0xEC	; 236
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	8b 8b       	std	Y+19, r24	; 0x13
     d46:	00 00       	nop
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e1       	ldi	r25, 0x10	; 16
     d4c:	fc 01       	movw	r30, r24
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	82 70       	andi	r24, 0x02	; 2
     d56:	99 27       	eor	r25, r25
     d58:	89 2b       	or	r24, r25
     d5a:	b1 f7       	brne	.-20     	; 0xd48 <USART_init+0x3a0>
     d5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	8c 5f       	subi	r24, 0xFC	; 252
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	9c 5e       	subi	r25, 0xEC	; 236
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	8c 8b       	std	Y+20, r24	; 0x14
     d6e:	00 00       	nop
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e1       	ldi	r25, 0x10	; 16
     d74:	fc 01       	movw	r30, r24
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	82 70       	andi	r24, 0x02	; 2
     d7e:	99 27       	eor	r25, r25
     d80:	89 2b       	or	r24, r25
     d82:	b1 f7       	brne	.-20     	; 0xd70 <USART_init+0x3c8>
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 5f       	subi	r24, 0xF8	; 248
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	9c 5e       	subi	r25, 0xEC	; 236
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	8d 8b       	std	Y+21, r24	; 0x15
     d96:	8d a1       	ldd	r24, Y+37	; 0x25
     d98:	88 23       	and	r24, r24
     d9a:	a1 f0       	breq	.+40     	; 0xdc4 <USART_init+0x41c>
     d9c:	00 00       	nop
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e1       	ldi	r25, 0x10	; 16
     da2:	fc 01       	movw	r30, r24
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	82 70       	andi	r24, 0x02	; 2
     dac:	99 27       	eor	r25, r25
     dae:	89 2b       	or	r24, r25
     db0:	b1 f7       	brne	.-20     	; 0xd9e <USART_init+0x3f6>
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	84 5f       	subi	r24, 0xF4	; 244
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	9c 5e       	subi	r25, 0xEC	; 236
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	8a 83       	std	Y+2, r24	; 0x02
     dc4:	8e a1       	ldd	r24, Y+38	; 0x26
     dc6:	88 23       	and	r24, r24
     dc8:	a1 f0       	breq	.+40     	; 0xdf2 <USART_init+0x44a>
     dca:	00 00       	nop
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e1       	ldi	r25, 0x10	; 16
     dd0:	fc 01       	movw	r30, r24
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	82 70       	andi	r24, 0x02	; 2
     dda:	99 27       	eor	r25, r25
     ddc:	89 2b       	or	r24, r25
     dde:	b1 f7       	brne	.-20     	; 0xdcc <USART_init+0x424>
     de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	80 5f       	subi	r24, 0xF0	; 240
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	9c 5e       	subi	r25, 0xEC	; 236
     dec:	fc 01       	movw	r30, r24
     dee:	80 81       	ld	r24, Z
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	8f 3f       	cpi	r24, 0xFF	; 255
     df6:	99 f1       	breq	.+102    	; 0xe5e <USART_init+0x4b6>
     df8:	8a 89       	ldd	r24, Y+18	; 0x12
     dfa:	8f 3f       	cpi	r24, 0xFF	; 255
     dfc:	81 f1       	breq	.+96     	; 0xe5e <USART_init+0x4b6>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	34 e0       	ldi	r19, 0x04	; 4
     e02:	8a 89       	ldd	r24, Y+18	; 0x12
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	5c 89       	ldd	r21, Y+20	; 0x14
     e0a:	4a 81       	ldd	r20, Y+2	; 0x02
     e0c:	54 2b       	or	r21, r20
     e0e:	4b 81       	ldd	r20, Y+3	; 0x03
     e10:	54 2b       	or	r21, r20
     e12:	4b 89       	ldd	r20, Y+19	; 0x13
     e14:	45 23       	and	r20, r21
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	82 95       	swap	r24
     e1c:	92 95       	swap	r25
     e1e:	90 7f       	andi	r25, 0xF0	; 240
     e20:	98 27       	eor	r25, r24
     e22:	80 7f       	andi	r24, 0xF0	; 240
     e24:	98 27       	eor	r25, r24
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	fc 01       	movw	r30, r24
     e2e:	40 83       	st	Z, r20
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	34 e0       	ldi	r19, 0x04	; 4
     e34:	8a 89       	ldd	r24, Y+18	; 0x12
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	5d 89       	ldd	r21, Y+21	; 0x15
     e3c:	4b 89       	ldd	r20, Y+19	; 0x13
     e3e:	45 23       	and	r20, r21
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	82 95       	swap	r24
     e46:	92 95       	swap	r25
     e48:	90 7f       	andi	r25, 0xF0	; 240
     e4a:	98 27       	eor	r25, r24
     e4c:	80 7f       	andi	r24, 0xF0	; 240
     e4e:	98 27       	eor	r25, r24
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	02 96       	adiw	r24, 0x02	; 2
     e56:	fc 01       	movw	r30, r24
     e58:	40 83       	st	Z, r20
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <USART_init+0x4ba>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	a7 96       	adiw	r28, 0x27	; 39
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	0f 91       	pop	r16
     e70:	ef 90       	pop	r14
     e72:	cf 90       	pop	r12
     e74:	af 90       	pop	r10
     e76:	8f 90       	pop	r8
     e78:	08 95       	ret

00000e7a <USART_send_Array>:
//	Übergabeparameter:
//		return bool			-> 	Daten wurden erfolgreich in den FIFO übertragen und die Übertragung
//								wurde gestartet.
////////////////////////////////////////////////////////////////////////////////////////////////////
bool USART_send_Array(uint8_t USARTnumber, uint8_t adress, uint8_t data[], uint8_t length)
{
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
	USART_t* handle = USART_handle[USARTnumber];
     e7e:	a8 2f       	mov	r26, r24
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	fd 01       	movw	r30, r26
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	eb 51       	subi	r30, 0x1B	; 27
     e8a:	f8 4a       	sbci	r31, 0xA8	; 168
     e8c:	c0 81       	ld	r28, Z
     e8e:	d1 81       	ldd	r29, Z+1	; 0x01
	bool returnval = false;
	// Prüfen ob Daten kopiert worden sind
	if((data != NULL) && (length != 0))
     e90:	41 15       	cp	r20, r1
     e92:	51 05       	cpc	r21, r1
     e94:	21 f1       	breq	.+72     	; 0xede <USART_send_Array+0x64>
     e96:	22 23       	and	r18, r18
     e98:	21 f1       	breq	.+72     	; 0xee2 <USART_send_Array+0x68>
     e9a:	ba 01       	movw	r22, r20
		// Schreiben des ersten Bytes in das USART_UDR Register
		// Abfragen ob USART frei ist
		//if(fastSTATUS(handle).Register.DREIF) <- geht beim ATMEGA4809 durch den TX buffer nicht mehr
		// in dem Zusammenhang
		// Jetzt abfragen ob der FIFO leer ist
		if(!FIFO_chk_for_readdata(&USART_TX_FIFO[USARTnumber]))
     e9c:	83 e2       	ldi	r24, 0x23	; 35
     e9e:	8a 9f       	mul	r24, r26
     ea0:	f0 01       	movw	r30, r0
     ea2:	8b 9f       	mul	r24, r27
     ea4:	f0 0d       	add	r31, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	e1 59       	subi	r30, 0x91	; 145
     eaa:	f7 4d       	sbci	r31, 0xD7	; 215
	/////////////////////////////////////////////////////////////////////////////////////////
	static inline __attribute__((always_inline)) bool FIFO_chk_for_readdata(sFIFO_t* FIFO)
	{
		//return (FIFO->p_read != FIFO->p_write);
		bool ret;
		__asm__ __volatile__(
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	98 17       	cp	r25, r24
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <USART_send_Array+0x3e>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	81 11       	cpse	r24, r1
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <USART_send_Array+0x58>
		{
			// Kopiere erstes Byte
			handle->TXDATAL = data[0];
     ebc:	da 01       	movw	r26, r20
     ebe:	8d 91       	ld	r24, X+
     ec0:	bd 01       	movw	r22, r26
     ec2:	8a 83       	std	Y+2, r24	; 0x02
			
			// Kopiere die Restlichen Daten in den FIFO
			FIFO_copy_from_lin(&USART_TX_FIFO[USARTnumber], data+1, length-1);
     ec4:	4f ef       	ldi	r20, 0xFF	; 255
     ec6:	42 0f       	add	r20, r18
     ec8:	cf 01       	movw	r24, r30
     eca:	0e 94 4b 01 	call	0x296	; 0x296 <FIFO_copy_from_lin>
			returnval = true;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <USART_send_Array+0x6a>
		}
		else
		{
			// Kopiere die Restlichen Daten in den FIFO
			FIFO_copy_from_lin(&USART_TX_FIFO[USARTnumber], data, length);
     ed2:	42 2f       	mov	r20, r18
     ed4:	cf 01       	movw	r24, r30
     ed6:	0e 94 4b 01 	call	0x296	; 0x296 <FIFO_copy_from_lin>
			returnval = true;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <USART_send_Array+0x6a>
//								wurde gestartet.
////////////////////////////////////////////////////////////////////////////////////////////////////
bool USART_send_Array(uint8_t USARTnumber, uint8_t adress, uint8_t data[], uint8_t length)
{
	USART_t* handle = USART_handle[USARTnumber];
	bool returnval = false;
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <USART_send_Array+0x6a>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
			FIFO_copy_from_lin(&USART_TX_FIFO[USARTnumber], data, length);
			returnval = true;
		}
	}
	return returnval;
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <USART_receive_Array>:
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC push_options
#pragma GCC optimize("O3")
bool USART_receive_Array(uint8_t USARTnumber, uint8_t* adress, uint8_t* data[], uint8_t max_length,\
	uint8_t* length)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
	*length = 0;
     ef2:	f8 01       	movw	r30, r16
     ef4:	10 82       	st	Z, r1
	if(adress!=NULL)
     ef6:	61 15       	cp	r22, r1
     ef8:	71 05       	cpc	r23, r1
     efa:	11 f0       	breq	.+4      	; 0xf00 <USART_receive_Array+0x16>
		*adress = 0;
     efc:	fb 01       	movw	r30, r22
     efe:	10 82       	st	Z, r1
	// Prüfen ob Daten kopiert werden können
	if(data != NULL)
	{
		// lese die maximale Anzahl der Bytes im FIFO
		*length = MIN(max_length, FIFO_diff_readdata(&USART_RX_FIFO[USARTnumber]));
     f00:	68 2f       	mov	r22, r24
     f02:	70 e0       	ldi	r23, 0x00	; 0
{
	*length = 0;
	if(adress!=NULL)
		*adress = 0;
	// Prüfen ob Daten kopiert werden können
	if(data != NULL)
     f04:	41 15       	cp	r20, r1
     f06:	51 05       	cpc	r21, r1
     f08:	a1 f0       	breq	.+40     	; 0xf32 <USART_receive_Array+0x48>
	{
		// lese die maximale Anzahl der Bytes im FIFO
		*length = MIN(max_length, FIFO_diff_readdata(&USART_RX_FIFO[USARTnumber]));
     f0a:	83 e2       	ldi	r24, 0x23	; 35
     f0c:	86 9f       	mul	r24, r22
     f0e:	e0 01       	movw	r28, r0
     f10:	87 9f       	mul	r24, r23
     f12:	d0 0d       	add	r29, r0
     f14:	11 24       	eor	r1, r1
     f16:	ca 5f       	subi	r28, 0xFA	; 250
     f18:	d7 4d       	sbci	r29, 0xD7	; 215
	/////////////////////////////////////////////////////////////////////////////////////////
	static inline __attribute__((always_inline)) uint8_t FIFO_diff_readdata(sFIFO_t* FIFO)
	{
		//return _modFIFO_max((FIFO->p_write + _FIFO_max_def ) - FIFO->p_read );
		uint8_t ret;
		__asm__ __volatile__(
     f1a:	fe 01       	movw	r30, r28
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	80 5e       	subi	r24, 0xE0	; 224
     f20:	90 81       	ld	r25, Z
     f22:	89 1b       	sub	r24, r25
     f24:	8f 71       	andi	r24, 0x1F	; 31
     f26:	82 17       	cp	r24, r18
     f28:	d0 f0       	brcs	.+52     	; 0xf5e <USART_receive_Array+0x74>
     f2a:	f8 01       	movw	r30, r16
     f2c:	20 83       	st	Z, r18
		if(*length != 0)
     f2e:	21 11       	cpse	r18, r1
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <USART_receive_Array+0x7e>
     f32:	83 e2       	ldi	r24, 0x23	; 35
     f34:	86 9f       	mul	r24, r22
     f36:	e0 01       	movw	r28, r0
     f38:	87 9f       	mul	r24, r23
     f3a:	d0 0d       	add	r29, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	ca 5f       	subi	r28, 0xFA	; 250
     f40:	d7 4d       	sbci	r29, 0xD7	; 215
     f42:	fe 01       	movw	r30, r28
     f44:	c1 81       	ldd	r28, Z+1	; 0x01
     f46:	c0 5e       	subi	r28, 0xE0	; 224
     f48:	90 81       	ld	r25, Z
     f4a:	c9 1b       	sub	r28, r25
     f4c:	cf 71       	andi	r28, 0x1F	; 31
			// Kopiere Daten vom FIFO in das Array
			FIFO_copy_to_lin(*data, &USART_RX_FIFO[USARTnumber], *length);
		}
	}
	
	return (FIFO_diff_readdata(&USART_RX_FIFO[USARTnumber]) == 0);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	c1 11       	cpse	r28, r1
     f52:	80 e0       	ldi	r24, 0x00	; 0
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret
		*adress = 0;
	// Prüfen ob Daten kopiert werden können
	if(data != NULL)
	{
		// lese die maximale Anzahl der Bytes im FIFO
		*length = MIN(max_length, FIFO_diff_readdata(&USART_RX_FIFO[USARTnumber]));
     f5e:	28 2f       	mov	r18, r24
     f60:	f8 01       	movw	r30, r16
     f62:	20 83       	st	Z, r18
		if(*length != 0)
     f64:	22 23       	and	r18, r18
     f66:	29 f3       	breq	.-54     	; 0xf32 <USART_receive_Array+0x48>
     f68:	fa 01       	movw	r30, r20
		{
			// Kopiere Daten vom FIFO in das Array
			FIFO_copy_to_lin(*data, &USART_RX_FIFO[USARTnumber], *length);
     f6a:	42 2f       	mov	r20, r18
     f6c:	be 01       	movw	r22, r28
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	0e 94 8a 00 	call	0x114	; 0x114 <FIFO_copy_to_lin>
     f76:	e5 cf       	rjmp	.-54     	; 0xf42 <USART_receive_Array+0x58>

00000f78 <USART_set_receive_Array_callback_fnc>:
//																			  die Callbackfunktion 
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_receive_Array_callback_fnc(uint8_t USARTnumber, \
	USART_receive_Array_callback_fnc_t USART_receive_Array_callback_in)
{
	if(USART_receive_Array_callback_in != NULL)
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	41 f0       	breq	.+16     	; 0xf8e <USART_set_receive_Array_callback_fnc+0x16>
	{
		USART_receive_Array_callback[USARTnumber] = USART_receive_Array_callback_in;
     f7e:	e8 2f       	mov	r30, r24
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e2 52       	subi	r30, 0x22	; 34
     f88:	f7 4d       	sbci	r31, 0xD7	; 215
     f8a:	60 83       	st	Z, r22
     f8c:	71 83       	std	Z+1, r23	; 0x01
     f8e:	08 95       	ret

00000f90 <USART_set_send_Array_callback_fnc>:
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_send_Array_callback_fnc(uint8_t USARTnumber, \
	USART_send_Array_callback_fnc_t USART_send_Array_callback_in)
{
	if(USART_send_Array_callback_in != NULL)
     f90:	61 15       	cp	r22, r1
     f92:	71 05       	cpc	r23, r1
     f94:	41 f0       	breq	.+16     	; 0xfa6 <USART_set_send_Array_callback_fnc+0x16>
	{
		USART_send_Array_callback[USARTnumber] = USART_send_Array_callback_in;
     f96:	e8 2f       	mov	r30, r24
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	ea 51       	subi	r30, 0x1A	; 26
     fa0:	f7 4d       	sbci	r31, 0xD7	; 215
     fa2:	60 83       	st	Z, r22
     fa4:	71 83       	std	Z+1, r23	; 0x01
     fa6:	08 95       	ret

00000fa8 <USART_set_Bytes_to_receive>:
//		uint8_t Bytes_to_receive -> Bytes die Empfangen werden sollen. 
//									Maximale Anzahl wird duch den FIFO bestimmt.
////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_set_Bytes_to_receive(uint8_t USARTnumber, uint8_t Bytes_to_receive)
{
	USART_bytes_to_receive[USARTnumber] = Bytes_to_receive;
     fa8:	e8 2f       	mov	r30, r24
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	ee 50       	subi	r30, 0x0E	; 14
     fae:	f7 4d       	sbci	r31, 0xD7	; 215
     fb0:	60 83       	st	Z, r22
     fb2:	08 95       	ret

00000fb4 <crc8_Berechnung>:
len ... Laenge des Nutzdatenarrays
Return: CRC-8 der Nutzdaten
*/

uint8_t crc8_Berechnung(uint8_t *data, uint8_t len)
{
     fb4:	ac 01       	movw	r20, r24
	uint8_t crc=0;  					// CRC-Wert Initial-Value 0
	uint8_t i,j;        				// Schleifenzaehler
	uint8_t polynom = 0xD5;  			// Generatorpolynom

	for(i=0; i<len; i++) {				// Schleife fé»µ alle Datenbytes
     fb6:	30 e0       	ldi	r19, 0x00	; 0
Return: CRC-8 der Nutzdaten
*/

uint8_t crc8_Berechnung(uint8_t *data, uint8_t len)
{
	uint8_t crc=0;  					// CRC-Wert Initial-Value 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t i,j;        				// Schleifenzaehler
	uint8_t polynom = 0xD5;  			// Generatorpolynom

	for(i=0; i<len; i++) {				// Schleife fé»µ alle Datenbytes
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <crc8_Berechnung+0x28>
		crc ^= (data[i]);				// XOR mit Nutzdaten
     fbc:	fa 01       	movw	r30, r20
     fbe:	e3 0f       	add	r30, r19
     fc0:	f1 1d       	adc	r31, r1
     fc2:	90 81       	ld	r25, Z
     fc4:	89 27       	eor	r24, r25
		
		// 8-Bit Schleife fé»µ alle Stellen des Generatorpolynoms
		for (j=0; j<8; j++)
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <crc8_Berechnung+0x22>
		{
			if((crc & (1<<7))!=0)		// Pruefe MSB=1
     fca:	88 23       	and	r24, r24
     fcc:	14 f4       	brge	.+4      	; 0xfd2 <crc8_Berechnung+0x1e>
			{
				crc=crc ^ polynom;		// XOR mit Polynom
     fce:	25 ed       	ldi	r18, 0xD5	; 213
     fd0:	82 27       	eor	r24, r18
			}
			crc=(crc<<1);				// shift links
     fd2:	88 0f       	add	r24, r24

	for(i=0; i<len; i++) {				// Schleife fé»µ alle Datenbytes
		crc ^= (data[i]);				// XOR mit Nutzdaten
		
		// 8-Bit Schleife fé»µ alle Stellen des Generatorpolynoms
		for (j=0; j<8; j++)
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	98 30       	cpi	r25, 0x08	; 8
     fd8:	c0 f3       	brcs	.-16     	; 0xfca <crc8_Berechnung+0x16>
{
	uint8_t crc=0;  					// CRC-Wert Initial-Value 0
	uint8_t i,j;        				// Schleifenzaehler
	uint8_t polynom = 0xD5;  			// Generatorpolynom

	for(i=0; i<len; i++) {				// Schleife fé»µ alle Datenbytes
     fda:	3f 5f       	subi	r19, 0xFF	; 255
     fdc:	36 17       	cp	r19, r22
     fde:	70 f3       	brcs	.-36     	; 0xfbc <crc8_Berechnung+0x8>
			crc=(crc<<1);				// shift links
		}
	}

	return crc;
}
     fe0:	08 95       	ret

00000fe2 <generate_frame>:
len ... Laenge des Nutzdatenarrays
frame...Zeiger auf Ziel-Array fuer Frame
*/

void generate_frame(uint8_t adress, uint8_t *data, uint8_t len, uint8_t *frame)
{
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	db 01       	movw	r26, r22
     ff0:	89 01       	movw	r16, r18
	uint8_t i;
	
	frame[0]=0xA5;		//Startbyte
     ff2:	95 ea       	ldi	r25, 0xA5	; 165
     ff4:	f9 01       	movw	r30, r18
     ff6:	90 83       	st	Z, r25
	frame[1]=0x02;		//Slavespezifische ID
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	91 83       	std	Z+1, r25	; 0x01
	frame[2]=0x80;		//0x8: 4 Bit fuer Schreiben + 0x0: Erste 4 Bits fuer Register-Adresse des Ziel-Slave-Moduls
     ffc:	90 e8       	ldi	r25, 0x80	; 128
     ffe:	92 83       	std	Z+2, r25	; 0x02
	frame[3]=adress;	//Register-Adresse des Ziel-Slave-Moduls
    1000:	83 83       	std	Z+3, r24	; 0x03
	frame[4]=len+7;		//Framelaenge
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	84 0f       	add	r24, r20
    1006:	84 83       	std	Z+4, r24	; 0x04
	
	for (i=0; i<len; i++)	//Datenbytes fuellen.
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <generate_frame+0x42>
	{
		frame[5+i]=data[i];
    100c:	82 2f       	mov	r24, r18
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	fc 01       	movw	r30, r24
    1012:	35 96       	adiw	r30, 0x05	; 5
    1014:	e0 0f       	add	r30, r16
    1016:	f1 1f       	adc	r31, r17
    1018:	ed 01       	movw	r28, r26
    101a:	c8 0f       	add	r28, r24
    101c:	d9 1f       	adc	r29, r25
    101e:	88 81       	ld	r24, Y
    1020:	80 83       	st	Z, r24
	frame[1]=0x02;		//Slavespezifische ID
	frame[2]=0x80;		//0x8: 4 Bit fuer Schreiben + 0x0: Erste 4 Bits fuer Register-Adresse des Ziel-Slave-Moduls
	frame[3]=adress;	//Register-Adresse des Ziel-Slave-Moduls
	frame[4]=len+7;		//Framelaenge
	
	for (i=0; i<len; i++)	//Datenbytes fuellen.
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	24 17       	cp	r18, r20
    1026:	90 f3       	brcs	.-28     	; 0x100c <generate_frame+0x2a>
	{
		frame[5+i]=data[i];
	}
	
	frame[5+i]=crc8_Berechnung(data, len);	//CRC8 von den Datenbytes, Polynom 0xD5
    1028:	c2 2f       	mov	r28, r18
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	7e 01       	movw	r14, r28
    102e:	f5 e0       	ldi	r31, 0x05	; 5
    1030:	ef 0e       	add	r14, r31
    1032:	f1 1c       	adc	r15, r1
    1034:	e0 0e       	add	r14, r16
    1036:	f1 1e       	adc	r15, r17
    1038:	64 2f       	mov	r22, r20
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <crc8_Berechnung>
    1040:	f7 01       	movw	r30, r14
    1042:	80 83       	st	Z, r24
	frame[6+i]=0xA6;	//Endbyte
    1044:	26 96       	adiw	r28, 0x06	; 6
    1046:	c0 0f       	add	r28, r16
    1048:	d1 1f       	adc	r29, r17
    104a:	86 ea       	ldi	r24, 0xA6	; 166
    104c:	88 83       	st	Y, r24
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	08 95       	ret

0000105c <send_data_callback>:
	PORTA.OUT |= (1 << pos);
}

void LED_toggle(int pos)
{
	PORTA.OUT ^= (1 << pos);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	08 95       	ret

00001060 <Slave_Response>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	00 d0       	rcall	.+0      	; 0x106a <Slave_Response+0xa>
    106a:	00 d0       	rcall	.+0      	; 0x106c <Slave_Response+0xc>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	6a 83       	std	Y+2, r22	; 0x02
    1074:	7b 83       	std	Y+3, r23	; 0x03
    1076:	4c 83       	std	Y+4, r20	; 0x04
    1078:	8e 01       	movw	r16, r28
    107a:	0c 5f       	subi	r16, 0xFC	; 252
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	ae 01       	movw	r20, r28
    1082:	4e 5f       	subi	r20, 0xFE	; 254
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	be 01       	movw	r22, r28
    1088:	6f 5f       	subi	r22, 0xFF	; 255
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0e 94 75 07 	call	0xeea	; 0xeea <USART_receive_Array>
    1092:	88 23       	and	r24, r24
    1094:	79 f0       	breq	.+30     	; 0x10b4 <Slave_Response+0x54>
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	80 81       	ld	r24, Z
    109c:	9f e5       	ldi	r25, 0x5F	; 95
    109e:	98 0f       	add	r25, r24
    10a0:	92 30       	cpi	r25, 0x02	; 2
    10a2:	50 f4       	brcc	.+20     	; 0x10b8 <Slave_Response+0x58>
    10a4:	82 3a       	cpi	r24, 0xA2	; 162
    10a6:	11 f4       	brne	.+4      	; 0x10ac <Slave_Response+0x4c>
    10a8:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <daten>
    10ac:	10 92 ff 28 	sts	0x28FF, r1	; 0x8028ff <send_state>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <Slave_Response+0x5a>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <Slave_Response+0x5a>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	24 96       	adiw	r28, 0x04	; 4
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <generate_frame_and_send>:
    10ca:	cf 93       	push	r28
    10cc:	c7 e0       	ldi	r28, 0x07	; 7
    10ce:	c6 0f       	add	r28, r22
    10d0:	29 e2       	ldi	r18, 0x29	; 41
    10d2:	86 30       	cpi	r24, 0x06	; 6
    10d4:	92 07       	cpc	r25, r18
    10d6:	81 f4       	brne	.+32     	; 0x10f8 <generate_frame_and_send+0x2e>
    10d8:	46 2f       	mov	r20, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	21 e1       	ldi	r18, 0x11	; 17
    10de:	39 e2       	ldi	r19, 0x29	; 41
    10e0:	82 e1       	ldi	r24, 0x12	; 18
    10e2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <generate_frame>
    10e6:	2c 2f       	mov	r18, r28
    10e8:	41 e1       	ldi	r20, 0x11	; 17
    10ea:	59 e2       	ldi	r21, 0x29	; 41
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <USART_send_Array>
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <generate_frame_and_send+0x30>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <ADC_Init>:
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f6 e0       	ldi	r31, 0x06	; 6
    1102:	80 81       	ld	r24, Z
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	80 83       	st	Z, r24
    1108:	11 82       	std	Z+1, r1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	12 82       	std	Z+2, r1	; 0x02
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	87 64       	ori	r24, 0x47	; 71
    1112:	82 83       	std	Z+2, r24	; 0x02
    1114:	83 81       	ldd	r24, Z+3	; 0x03
    1116:	88 7c       	andi	r24, 0xC8	; 200
    1118:	83 83       	std	Z+3, r24	; 0x03
    111a:	83 81       	ldd	r24, Z+3	; 0x03
    111c:	81 68       	ori	r24, 0x81	; 129
    111e:	83 83       	std	Z+3, r24	; 0x03
    1120:	84 81       	ldd	r24, Z+4	; 0x04
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	84 83       	std	Z+4, r24	; 0x04
    1126:	08 95       	ret

00001128 <TCA0_init>:
    1128:	8f ec       	ldi	r24, 0xCF	; 207
    112a:	99 ef       	ldi	r25, 0xF9	; 249
    112c:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    1130:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    1134:	e0 e0       	ldi	r30, 0x00	; 0
    1136:	fa e0       	ldi	r31, 0x0A	; 10
    1138:	80 81       	ld	r24, Z
    113a:	80 7f       	andi	r24, 0xF0	; 240
    113c:	80 83       	st	Z, r24
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	80 83       	st	Z, r24
    1142:	80 81       	ld	r24, Z
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	80 83       	st	Z, r24
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7f4a0a>
    114e:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    1152:	08 95       	ret

00001154 <VREF_init>:
    1154:	e0 ea       	ldi	r30, 0xA0	; 160
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 7d       	andi	r24, 0xD8	; 216
    115c:	82 62       	ori	r24, 0x22	; 34
    115e:	80 83       	st	Z, r24
    1160:	81 81       	ldd	r24, Z+1	; 0x01
    1162:	83 60       	ori	r24, 0x03	; 3
    1164:	81 83       	std	Z+1, r24	; 0x01
    1166:	08 95       	ret

00001168 <LED_init>:
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	f4 e0       	ldi	r31, 0x04	; 4
    116c:	80 81       	ld	r24, Z
    116e:	80 6f       	ori	r24, 0xF0	; 240
    1170:	80 83       	st	Z, r24
    1172:	e0 e4       	ldi	r30, 0x40	; 64
    1174:	f4 e0       	ldi	r31, 0x04	; 4
    1176:	80 81       	ld	r24, Z
    1178:	8c 60       	ori	r24, 0x0C	; 12
    117a:	80 83       	st	Z, r24
    117c:	08 95       	ret

0000117e <error_off>:
}

void error_off(int pos)
{
	pos += 1;
    117e:	01 96       	adiw	r24, 0x01	; 1
	PORTC.OUT &= ~(1 << pos);
    1180:	e0 e4       	ldi	r30, 0x40	; 64
    1182:	f4 e0       	ldi	r31, 0x04	; 4
    1184:	44 81       	ldd	r20, Z+4	; 0x04
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	b9 01       	movw	r22, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <error_off+0x14>
    118e:	66 0f       	add	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <error_off+0x10>
    1196:	cb 01       	movw	r24, r22
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	84 83       	std	Z+4, r24	; 0x04
    119e:	08 95       	ret

000011a0 <error_on>:
}

void error_on(int pos)
{
	pos += 1;
    11a0:	01 96       	adiw	r24, 0x01	; 1
	PORTC.OUT |= (1 << pos);
    11a2:	e0 e4       	ldi	r30, 0x40	; 64
    11a4:	f4 e0       	ldi	r31, 0x04	; 4
    11a6:	44 81       	ldd	r20, Z+4	; 0x04
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <error_on+0x14>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <error_on+0x10>
    11b8:	cb 01       	movw	r24, r22
    11ba:	84 2b       	or	r24, r20
    11bc:	84 83       	std	Z+4, r24	; 0x04
    11be:	08 95       	ret

000011c0 <error_toggle>:
}

void error_toggle(int pos)
{
	pos += 1;
    11c0:	01 96       	adiw	r24, 0x01	; 1
	PORTC.OUT ^= (1 << pos);
    11c2:	e0 e4       	ldi	r30, 0x40	; 64
    11c4:	f4 e0       	ldi	r31, 0x04	; 4
    11c6:	44 81       	ldd	r20, Z+4	; 0x04
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	b9 01       	movw	r22, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <error_toggle+0x14>
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <error_toggle+0x10>
    11d8:	cb 01       	movw	r24, r22
    11da:	84 27       	eor	r24, r20
    11dc:	84 83       	std	Z+4, r24	; 0x04
    11de:	08 95       	ret

000011e0 <ADC_Read>:
}

uint16_t ADC_Read(){
	uint16_t tmp;
	// Warten Sie, bis die Konversion abgeschlossen ist
	while (ADC0.COMMAND & (ADC0.COMMAND | ADC_STCONV_bm));
    11e0:	e0 e0       	ldi	r30, 0x00	; 0
    11e2:	f6 e0       	ldi	r31, 0x06	; 6
    11e4:	90 85       	ldd	r25, Z+8	; 0x08
    11e6:	80 85       	ldd	r24, Z+8	; 0x08
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	89 23       	and	r24, r25
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <ADC_Read>
	
	// Lesen und zurÃ¼ckgeben des ADC-Wertes
	tmp = ADC0_RES;
    11ee:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    11f2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	return tmp;
}
    11f6:	08 95       	ret

000011f8 <ADC_on>:

void ADC_on(uint8_t channel){
	// WÃ¤hlen Sie den AD-Kanal, von dem gelesen werden soll
	//Muxpos
	//Muxpos (Bit4:0): AIN0
	ADC0.MUXPOS = (ADC0.MUXPOS & ~ADC_MUXPOS_gm) | mux_tab[channel];
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f6 e0       	ldi	r31, 0x06	; 6
    11fc:	96 81       	ldd	r25, Z+6	; 0x06
    11fe:	a8 2f       	mov	r26, r24
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	a8 52       	subi	r26, 0x28	; 40
    1204:	b7 4d       	sbci	r27, 0xD7	; 215
    1206:	2c 91       	ld	r18, X
    1208:	90 7e       	andi	r25, 0xE0	; 224
    120a:	92 2b       	or	r25, r18
    120c:	96 83       	std	Z+6, r25	; 0x06
	indexTab = channel;
    120e:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <indexTab>
	//Starten Sie die Konversion
	ADC0.COMMAND = ADC0.COMMAND | ADC_STCONV_bm;
    1212:	80 85       	ldd	r24, Z+8	; 0x08
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	80 87       	std	Z+8, r24	; 0x08
    1218:	08 95       	ret

0000121a <__vector_7>:
}

// Interrupt Service Routine fÃ¼r den Timer A Overflow
ISR(TCA0_OVF_vect) {
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
	//Interrupt Control vom ADC anschalten
	ADC0.INTCTRL = ADC0.INTCTRL & ~(ADC_RESRDY_bm|ADC_WCMP_bm); //alles lÃ¶schen
    123c:	e0 e0       	ldi	r30, 0x00	; 0
    123e:	f6 e0       	ldi	r31, 0x06	; 6
    1240:	82 85       	ldd	r24, Z+10	; 0x0a
    1242:	8c 7f       	andi	r24, 0xFC	; 252
    1244:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.INTCTRL |= ADC_RESRDY_bm; //ResultReady-Interrupt setzen
    1246:	82 85       	ldd	r24, Z+10	; 0x0a
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	82 87       	std	Z+10, r24	; 0x0a
	
	// Toggle den Zustand der LED
	//LED_toggle(4);
	
	// LÃ¶sche das Overflow Flag, indem das entsprechende Bit geschrieben wird
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_OVF_bm;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
	
	error_on(2);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <error_on>
	//auf Kanal 0
	ADC_on(0);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <ADC_on>
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_22>:

ISR(ADC0_RESRDY_vect){
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
	ADC_res[indexTab] = ADC_Read();
    12a8:	c0 91 fe 28 	lds	r28, 0x28FE	; 0x8028fe <indexTab>
    12ac:	d0 e0       	ldi	r29, 0x00	; 0
    12ae:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <ADC_Read>
    12b2:	cc 0f       	add	r28, r28
    12b4:	dd 1f       	adc	r29, r29
    12b6:	c6 50       	subi	r28, 0x06	; 6
    12b8:	d7 4d       	sbci	r29, 0xD7	; 215
    12ba:	88 83       	st	Y, r24
    12bc:	99 83       	std	Y+1, r25	; 0x01
	error_toggle(2);
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <error_toggle>
	if ( indexTab==0)
    12c6:	80 91 fe 28 	lds	r24, 0x28FE	; 0x8028fe <indexTab>
    12ca:	81 11       	cpse	r24, r1
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <__vector_22+0x5c>
	{
		//auf Kanal 1
		ADC_on(1);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <ADC_on>
		error_toggle(2);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <error_toggle>
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <__vector_22+0x74>
	}
	else
	{
		//Interrupt Control vom ADC ausschalten
		ADC0.INTCTRL = ADC0.INTCTRL & ~(ADC_RESRDY_bm|ADC_WCMP_bm); //alles lÃ¶schen
    12de:	e0 e0       	ldi	r30, 0x00	; 0
    12e0:	f6 e0       	ldi	r31, 0x06	; 6
    12e2:	82 85       	ldd	r24, Z+10	; 0x0a
    12e4:	8c 7f       	andi	r24, 0xFC	; 252
    12e6:	82 87       	std	Z+10, r24	; 0x0a
		error_off(2);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 bf 08 	call	0x117e	; 0x117e <error_off>
		//Messflag setzen
		flag = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <flag>
	}
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <main>:
	*/
	return true;
}

int main(void)
{	
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	2c 97       	sbiw	r28, 0x0c	; 12
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	de bf       	out	0x3e, r29	; 62
	// 1. Systemstart
	
	init_Core_CLK();		//Takt einstellen
    132a:	0e 94 10 01 	call	0x220	; 0x220 <init_Core_CLK>
	ADC_Init();
    132e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <ADC_Init>
	VREF_init();
    1332:	0e 94 aa 08 	call	0x1154	; 0x1154 <VREF_init>
	LED_init();
    1336:	0e 94 b4 08 	call	0x1168	; 0x1168 <LED_init>
	PORTA.OUT  |= (1 << 4)|(1 << 5)|(1 << 6)|(1 << 7); //erstmal alles ausschalten
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f4 e0       	ldi	r31, 0x04	; 4
    133e:	84 81       	ldd	r24, Z+4	; 0x04
    1340:	80 6f       	ori	r24, 0xF0	; 240
    1342:	84 83       	std	Z+4, r24	; 0x04
	PORTC.OUT  |= ((1 << 2)|(1 << 3));
    1344:	e0 e4       	ldi	r30, 0x40	; 64
    1346:	f4 e0       	ldi	r31, 0x04	; 4
    1348:	84 81       	ldd	r24, Z+4	; 0x04
    134a:	8c 60       	ori	r24, 0x0C	; 12
    134c:	84 83       	std	Z+4, r24	; 0x04
	TCA0_init();
    134e:	0e 94 94 08 	call	0x1128	; 0x1128 <TCA0_init>
	
	sei();					//Interrupts an
    1352:	78 94       	sei
	//USART_set_receive_Array_callback_fnc(iUSART0,&readData_callback);	//Setzen des Funktionszeigers, wenn Interrupt durch empfangenen Frame vom Sensor ausgeloest wird
	//USART_set_send_Array_callback_fnc(iUSART0, &send_data_callback);					    //Setzen des Zeichenkettenendes bis zu dem der String vor Callback zwischengespeichert wird. Annahme, dass Sensor bis zum Linefeed (0x0A) sendet.
	
	//TODO: an Realitaet anpassen. Ggf. Set_Bytes_to_receive verwenden
	
	USART_init(iUSART1,250000, USART_CHSIZE_8BIT_gc, USART_PMODE_ODD_gc, USART_SBMODE_1BIT_gc,false,0,0,PORTMUX_USARTx_DEFAULT_gc);			//UART2 fuer Bus-Senden konfigurieren
    1354:	1f 92       	push	r1
    1356:	81 2c       	mov	r8, r1
    1358:	a1 2c       	mov	r10, r1
    135a:	c1 2c       	mov	r12, r1
    135c:	e1 2c       	mov	r14, r1
    135e:	00 e3       	ldi	r16, 0x30	; 48
    1360:	23 e0       	ldi	r18, 0x03	; 3
    1362:	40 e9       	ldi	r20, 0x90	; 144
    1364:	50 ed       	ldi	r21, 0xD0	; 208
    1366:	63 e0       	ldi	r22, 0x03	; 3
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <USART_init>
	//USV-Protokoll: 8-bits, odd(ungerade) parity, 250,000 baud rate, and 1 stop bit
	USART_set_Bytes_to_receive(iUSART1,1);								//Setzen der Groeé der Daten, die vor Callback zwischengespeichert werden sollen.
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <USART_set_Bytes_to_receive>
	USART_set_receive_Array_callback_fnc(iUSART1,&Slave_Response);		//Setzen des Funktionszeigers, wenn Interrupt durch empfangenen Frame vom Slave ausgeloest wird
    1378:	60 e3       	ldi	r22, 0x30	; 48
    137a:	78 e0       	ldi	r23, 0x08	; 8
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 bc 07 	call	0xf78	; 0xf78 <USART_set_receive_Array_callback_fnc>
	USART_set_send_Array_callback_fnc(iUSART1, &send_data_callback);	//Setzen des Funktionszeigers, wenn Interrupt nach gesendeten Frame zu Slave ausgeloest wird
    1382:	6e e2       	ldi	r22, 0x2E	; 46
    1384:	78 e0       	ldi	r23, 0x08	; 8
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	0e 94 c8 07 	call	0xf90	; 0xf90 <USART_set_send_Array_callback_fnc>
    138c:	0f 90       	pop	r0

   //2. Variablendefinition
   size_t length=0;				//Laenge der zu uebertragenden Nutzdaten
    while (1) 
    {
		if(flag == 1)
    138e:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <flag>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	09 f0       	breq	.+2      	; 0x1398 <main+0x7c>
    1396:	90 c0       	rjmp	.+288    	; 0x14b8 <main+0x19c>
		{
			flag = 0;
    1398:	10 92 10 29 	sts	0x2910, r1	; 0x802910 <flag>
			//Berechnen Sie die Spannung (angenommen, die Referenzspannung ist 2.5V)
			voltage = (uint16_t)(((uint32_t)ADC_res[0] * 15000) >> 10); //Millivolt
    139c:	ea ef       	ldi	r30, 0xFA	; 250
    139e:	f8 e2       	ldi	r31, 0x28	; 40
    13a0:	20 81       	ld	r18, Z
    13a2:	31 81       	ldd	r19, Z+1	; 0x01
    13a4:	a8 e9       	ldi	r26, 0x98	; 152
    13a6:	ba e3       	ldi	r27, 0x3A	; 58
    13a8:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    13ac:	5b 01       	movw	r10, r22
    13ae:	6c 01       	movw	r12, r24
    13b0:	09 2e       	mov	r0, r25
    13b2:	9a e0       	ldi	r25, 0x0A	; 10
    13b4:	d6 94       	lsr	r13
    13b6:	c7 94       	ror	r12
    13b8:	b7 94       	ror	r11
    13ba:	a7 94       	ror	r10
    13bc:	9a 95       	dec	r25
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <main+0x98>
    13c0:	90 2d       	mov	r25, r0
    13c2:	a9 86       	std	Y+9, r10	; 0x09
    13c4:	ba 86       	std	Y+10, r11	; 0x0a
    13c6:	cb 86       	std	Y+11, r12	; 0x0b
    13c8:	dc 86       	std	Y+12, r13	; 0x0c
    13ca:	a0 92 1a 29 	sts	0x291A, r10	; 0x80291a <voltage>
    13ce:	b0 92 1b 29 	sts	0x291B, r11	; 0x80291b <voltage+0x1>
			//Berechnen Sie den Strom (angenommen, die Referenzspannung ist 2.5V)
			current = (uint16_t)(((uint32_t)ADC_res[1] * 2025938UL + 374) >> 14); //MilliAmpere
    13d2:	a2 81       	ldd	r26, Z+2	; 0x02
    13d4:	b3 81       	ldd	r27, Z+3	; 0x03
    13d6:	22 ed       	ldi	r18, 0xD2	; 210
    13d8:	39 ee       	ldi	r19, 0xE9	; 233
    13da:	4e e1       	ldi	r20, 0x1E	; 30
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__muluhisi3>
    13e2:	2b 01       	movw	r4, r22
    13e4:	3c 01       	movw	r6, r24
    13e6:	06 e7       	ldi	r16, 0x76	; 118
    13e8:	40 0e       	add	r4, r16
    13ea:	01 e0       	ldi	r16, 0x01	; 1
    13ec:	50 1e       	adc	r5, r16
    13ee:	61 1c       	adc	r6, r1
    13f0:	71 1c       	adc	r7, r1
    13f2:	03 2e       	mov	r0, r19
    13f4:	3e e0       	ldi	r19, 0x0E	; 14
    13f6:	76 94       	lsr	r7
    13f8:	67 94       	ror	r6
    13fa:	57 94       	ror	r5
    13fc:	47 94       	ror	r4
    13fe:	3a 95       	dec	r19
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <main+0xda>
    1402:	30 2d       	mov	r19, r0
    1404:	40 92 1c 29 	sts	0x291C, r4	; 0x80291c <current>
    1408:	50 92 1d 29 	sts	0x291D, r5	; 0x80291d <current+0x1>
			power_old = power;
    140c:	c0 90 0c 29 	lds	r12, 0x290C	; 0x80290c <power>
    1410:	d0 90 0d 29 	lds	r13, 0x290D	; 0x80290d <power+0x1>
    1414:	e0 90 0e 29 	lds	r14, 0x290E	; 0x80290e <power+0x2>
    1418:	f0 90 0f 29 	lds	r15, 0x290F	; 0x80290f <power+0x3>
    141c:	c0 92 1e 29 	sts	0x291E, r12	; 0x80291e <power_old>
    1420:	d0 92 1f 29 	sts	0x291F, r13	; 0x80291f <power_old+0x1>
    1424:	e0 92 20 29 	sts	0x2920, r14	; 0x802920 <power_old+0x2>
    1428:	f0 92 21 29 	sts	0x2921, r15	; 0x802921 <power_old+0x3>
			power = (uint32_t) voltage * (uint32_t) current; //millimilliwatt
    142c:	29 85       	ldd	r18, Y+9	; 0x09
    142e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1430:	d2 01       	movw	r26, r4
    1432:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    1436:	60 93 0c 29 	sts	0x290C, r22	; 0x80290c <power>
    143a:	70 93 0d 29 	sts	0x290D, r23	; 0x80290d <power+0x1>
    143e:	80 93 0e 29 	sts	0x290E, r24	; 0x80290e <power+0x2>
    1442:	90 93 0f 29 	sts	0x290F, r25	; 0x80290f <power+0x3>
			energy.value = energy.value + (uint64_t)((power + power_old) >> 1);
    1446:	e2 e2       	ldi	r30, 0x22	; 34
    1448:	f9 e2       	ldi	r31, 0x29	; 41
    144a:	20 81       	ld	r18, Z
    144c:	31 81       	ldd	r19, Z+1	; 0x01
    144e:	42 81       	ldd	r20, Z+2	; 0x02
    1450:	53 81       	ldd	r21, Z+3	; 0x03
    1452:	b4 81       	ldd	r27, Z+4	; 0x04
    1454:	a5 81       	ldd	r26, Z+5	; 0x05
    1456:	c6 0e       	add	r12, r22
    1458:	d7 1e       	adc	r13, r23
    145a:	e8 1e       	adc	r14, r24
    145c:	f9 1e       	adc	r15, r25
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	77 95       	ror	r23
    1468:	67 95       	ror	r22
    146a:	5b 01       	movw	r10, r22
    146c:	6c 01       	movw	r12, r24
    146e:	6b 2f       	mov	r22, r27
    1470:	7a 2f       	mov	r23, r26
    1472:	86 81       	ldd	r24, Z+6	; 0x06
    1474:	97 81       	ldd	r25, Z+7	; 0x07
    1476:	e1 2c       	mov	r14, r1
    1478:	f1 2c       	mov	r15, r1
    147a:	00 e0       	ldi	r16, 0x00	; 0
    147c:	10 e0       	ldi	r17, 0x00	; 0
    147e:	0e 94 af 0a 	call	0x155e	; 0x155e <__adddi3>
    1482:	20 83       	st	Z, r18
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	42 83       	std	Z+2, r20	; 0x02
    1488:	53 83       	std	Z+3, r21	; 0x03
    148a:	64 83       	std	Z+4, r22	; 0x04
    148c:	75 83       	std	Z+5, r23	; 0x05
    148e:	86 83       	std	Z+6, r24	; 0x06
    1490:	97 83       	std	Z+7, r25	; 0x07
			daten2.werte.Spannung = voltage;
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b9 e2       	ldi	r27, 0x29	; 41
    1496:	c9 84       	ldd	r12, Y+9	; 0x09
    1498:	da 84       	ldd	r13, Y+10	; 0x0a
    149a:	cd 92       	st	X+, r12
    149c:	dc 92       	st	X, r13
    149e:	11 97       	sbiw	r26, 0x01	; 1
			daten2.werte.Strom = current;
    14a0:	12 96       	adiw	r26, 0x02	; 2
    14a2:	4d 92       	st	X+, r4
    14a4:	5c 92       	st	X, r5
    14a6:	13 97       	sbiw	r26, 0x03	; 3
			daten2.werte.Energie = energy.struc.energy_1kw;
    14a8:	85 81       	ldd	r24, Z+5	; 0x05
    14aa:	96 81       	ldd	r25, Z+6	; 0x06
    14ac:	14 96       	adiw	r26, 0x04	; 4
    14ae:	8d 93       	st	X+, r24
    14b0:	9c 93       	st	X, r25
    14b2:	15 97       	sbiw	r26, 0x05	; 5
			send_state=0;
    14b4:	10 92 ff 28 	sts	0x28FF, r1	; 0x8028ff <send_state>
			
			
		}
		
		if (send_state==0)				//Pruefe, ob eine UART-èº¡ertragung bereits stattfindet. 0: keine èº¡etragung
    14b8:	80 91 ff 28 	lds	r24, 0x28FF	; 0x8028ff <send_state>
    14bc:	81 11       	cpse	r24, r1
    14be:	67 cf       	rjmp	.-306    	; 0x138e <main+0x72>
		{
			if (daten2.daten[0]!=0) 			//Pruefe, ob Range-Wert vorhanden ist
    14c0:	80 91 00 29 	lds	r24, 0x2900	; 0x802900 <daten2>
    14c4:	88 23       	and	r24, r24
    14c6:	49 f0       	breq	.+18     	; 0x14da <main+0x1be>
			{
				length=sizeof(daten2);
				generate_frame_and_send(daten2.daten, length);					//Frame von Range generieren
    14c8:	66 e0       	ldi	r22, 0x06	; 6
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	99 e2       	ldi	r25, 0x29	; 41
    14ce:	0e 94 65 08 	call	0x10ca	; 0x10ca <generate_frame_and_send>
				send_state=1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 ff 28 	sts	0x28FF, r24	; 0x8028ff <send_state>
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <main+0x1c4>
									//Wenn daten vorhanden sind, starte spéer neue Uebertragung fé»µ speed
			}										//Sende-Status 1: Wenn von Slave ACK kommt, wird als néhstes speed é»etragen
			else
				send_state=2;											//Sende-Status 2: Wenn von Slave ACK kommt, wird èº¡etragung beendet
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	80 93 ff 28 	sts	0x28FF, r24	; 0x8028ff <send_state>
				
				daten[0]=0;												//Range-Wert zuruekstetzen, um neue Uebertragung abfragen zu koennen
    14e0:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <daten>
    14e4:	54 cf       	rjmp	.-344    	; 0x138e <main+0x72>

000014e6 <__udivmodsi4>:
    14e6:	a1 e2       	ldi	r26, 0x21	; 33
    14e8:	1a 2e       	mov	r1, r26
    14ea:	aa 1b       	sub	r26, r26
    14ec:	bb 1b       	sub	r27, r27
    14ee:	fd 01       	movw	r30, r26
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <__udivmodsi4_ep>

000014f2 <__udivmodsi4_loop>:
    14f2:	aa 1f       	adc	r26, r26
    14f4:	bb 1f       	adc	r27, r27
    14f6:	ee 1f       	adc	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	a2 17       	cp	r26, r18
    14fc:	b3 07       	cpc	r27, r19
    14fe:	e4 07       	cpc	r30, r20
    1500:	f5 07       	cpc	r31, r21
    1502:	20 f0       	brcs	.+8      	; 0x150c <__udivmodsi4_ep>
    1504:	a2 1b       	sub	r26, r18
    1506:	b3 0b       	sbc	r27, r19
    1508:	e4 0b       	sbc	r30, r20
    150a:	f5 0b       	sbc	r31, r21

0000150c <__udivmodsi4_ep>:
    150c:	66 1f       	adc	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	1a 94       	dec	r1
    1516:	69 f7       	brne	.-38     	; 0x14f2 <__udivmodsi4_loop>
    1518:	60 95       	com	r22
    151a:	70 95       	com	r23
    151c:	80 95       	com	r24
    151e:	90 95       	com	r25
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	bd 01       	movw	r22, r26
    1526:	cf 01       	movw	r24, r30
    1528:	08 95       	ret

0000152a <__umulhisi3>:
    152a:	a2 9f       	mul	r26, r18
    152c:	b0 01       	movw	r22, r0
    152e:	b3 9f       	mul	r27, r19
    1530:	c0 01       	movw	r24, r0
    1532:	a3 9f       	mul	r26, r19
    1534:	70 0d       	add	r23, r0
    1536:	81 1d       	adc	r24, r1
    1538:	11 24       	eor	r1, r1
    153a:	91 1d       	adc	r25, r1
    153c:	b2 9f       	mul	r27, r18
    153e:	70 0d       	add	r23, r0
    1540:	81 1d       	adc	r24, r1
    1542:	11 24       	eor	r1, r1
    1544:	91 1d       	adc	r25, r1
    1546:	08 95       	ret

00001548 <__muluhisi3>:
    1548:	0e 94 95 0a 	call	0x152a	; 0x152a <__umulhisi3>
    154c:	a5 9f       	mul	r26, r21
    154e:	90 0d       	add	r25, r0
    1550:	b4 9f       	mul	r27, r20
    1552:	90 0d       	add	r25, r0
    1554:	a4 9f       	mul	r26, r20
    1556:	80 0d       	add	r24, r0
    1558:	91 1d       	adc	r25, r1
    155a:	11 24       	eor	r1, r1
    155c:	08 95       	ret

0000155e <__adddi3>:
    155e:	2a 0d       	add	r18, r10
    1560:	3b 1d       	adc	r19, r11
    1562:	4c 1d       	adc	r20, r12
    1564:	5d 1d       	adc	r21, r13
    1566:	6e 1d       	adc	r22, r14
    1568:	7f 1d       	adc	r23, r15
    156a:	80 1f       	adc	r24, r16
    156c:	91 1f       	adc	r25, r17
    156e:	08 95       	ret

00001570 <malloc>:
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	91 05       	cpc	r25, r1
    157c:	10 f4       	brcc	.+4      	; 0x1582 <malloc+0x12>
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	e0 91 2d 29 	lds	r30, 0x292D	; 0x80292d <__flp>
    1586:	f0 91 2e 29 	lds	r31, 0x292E	; 0x80292e <__flp+0x1>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	19 f1       	breq	.+70     	; 0x15dc <malloc+0x6c>
    1596:	40 81       	ld	r20, Z
    1598:	51 81       	ldd	r21, Z+1	; 0x01
    159a:	02 81       	ldd	r16, Z+2	; 0x02
    159c:	13 81       	ldd	r17, Z+3	; 0x03
    159e:	48 17       	cp	r20, r24
    15a0:	59 07       	cpc	r21, r25
    15a2:	c8 f0       	brcs	.+50     	; 0x15d6 <malloc+0x66>
    15a4:	84 17       	cp	r24, r20
    15a6:	95 07       	cpc	r25, r21
    15a8:	69 f4       	brne	.+26     	; 0x15c4 <malloc+0x54>
    15aa:	10 97       	sbiw	r26, 0x00	; 0
    15ac:	31 f0       	breq	.+12     	; 0x15ba <malloc+0x4a>
    15ae:	12 96       	adiw	r26, 0x02	; 2
    15b0:	0c 93       	st	X, r16
    15b2:	12 97       	sbiw	r26, 0x02	; 2
    15b4:	13 96       	adiw	r26, 0x03	; 3
    15b6:	1c 93       	st	X, r17
    15b8:	27 c0       	rjmp	.+78     	; 0x1608 <malloc+0x98>
    15ba:	00 93 2d 29 	sts	0x292D, r16	; 0x80292d <__flp>
    15be:	10 93 2e 29 	sts	0x292E, r17	; 0x80292e <__flp+0x1>
    15c2:	22 c0       	rjmp	.+68     	; 0x1608 <malloc+0x98>
    15c4:	21 15       	cp	r18, r1
    15c6:	31 05       	cpc	r19, r1
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <malloc+0x60>
    15ca:	42 17       	cp	r20, r18
    15cc:	53 07       	cpc	r21, r19
    15ce:	18 f4       	brcc	.+6      	; 0x15d6 <malloc+0x66>
    15d0:	9a 01       	movw	r18, r20
    15d2:	bd 01       	movw	r22, r26
    15d4:	ef 01       	movw	r28, r30
    15d6:	df 01       	movw	r26, r30
    15d8:	f8 01       	movw	r30, r16
    15da:	db cf       	rjmp	.-74     	; 0x1592 <malloc+0x22>
    15dc:	21 15       	cp	r18, r1
    15de:	31 05       	cpc	r19, r1
    15e0:	f9 f0       	breq	.+62     	; 0x1620 <malloc+0xb0>
    15e2:	28 1b       	sub	r18, r24
    15e4:	39 0b       	sbc	r19, r25
    15e6:	24 30       	cpi	r18, 0x04	; 4
    15e8:	31 05       	cpc	r19, r1
    15ea:	80 f4       	brcc	.+32     	; 0x160c <malloc+0x9c>
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	61 15       	cp	r22, r1
    15f2:	71 05       	cpc	r23, r1
    15f4:	21 f0       	breq	.+8      	; 0x15fe <malloc+0x8e>
    15f6:	fb 01       	movw	r30, r22
    15f8:	82 83       	std	Z+2, r24	; 0x02
    15fa:	93 83       	std	Z+3, r25	; 0x03
    15fc:	04 c0       	rjmp	.+8      	; 0x1606 <malloc+0x96>
    15fe:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <__flp>
    1602:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <__flp+0x1>
    1606:	fe 01       	movw	r30, r28
    1608:	32 96       	adiw	r30, 0x02	; 2
    160a:	44 c0       	rjmp	.+136    	; 0x1694 <malloc+0x124>
    160c:	fe 01       	movw	r30, r28
    160e:	e2 0f       	add	r30, r18
    1610:	f3 1f       	adc	r31, r19
    1612:	81 93       	st	Z+, r24
    1614:	91 93       	st	Z+, r25
    1616:	22 50       	subi	r18, 0x02	; 2
    1618:	31 09       	sbc	r19, r1
    161a:	28 83       	st	Y, r18
    161c:	39 83       	std	Y+1, r19	; 0x01
    161e:	3a c0       	rjmp	.+116    	; 0x1694 <malloc+0x124>
    1620:	20 91 2b 29 	lds	r18, 0x292B	; 0x80292b <__brkval>
    1624:	30 91 2c 29 	lds	r19, 0x292C	; 0x80292c <__brkval+0x1>
    1628:	23 2b       	or	r18, r19
    162a:	41 f4       	brne	.+16     	; 0x163c <malloc+0xcc>
    162c:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    1630:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    1634:	20 93 2b 29 	sts	0x292B, r18	; 0x80292b <__brkval>
    1638:	30 93 2c 29 	sts	0x292C, r19	; 0x80292c <__brkval+0x1>
    163c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    1640:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    1644:	21 15       	cp	r18, r1
    1646:	31 05       	cpc	r19, r1
    1648:	41 f4       	brne	.+16     	; 0x165a <malloc+0xea>
    164a:	2d b7       	in	r18, 0x3d	; 61
    164c:	3e b7       	in	r19, 0x3e	; 62
    164e:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    1652:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    1656:	24 1b       	sub	r18, r20
    1658:	35 0b       	sbc	r19, r21
    165a:	e0 91 2b 29 	lds	r30, 0x292B	; 0x80292b <__brkval>
    165e:	f0 91 2c 29 	lds	r31, 0x292C	; 0x80292c <__brkval+0x1>
    1662:	e2 17       	cp	r30, r18
    1664:	f3 07       	cpc	r31, r19
    1666:	a0 f4       	brcc	.+40     	; 0x1690 <malloc+0x120>
    1668:	2e 1b       	sub	r18, r30
    166a:	3f 0b       	sbc	r19, r31
    166c:	28 17       	cp	r18, r24
    166e:	39 07       	cpc	r19, r25
    1670:	78 f0       	brcs	.+30     	; 0x1690 <malloc+0x120>
    1672:	ac 01       	movw	r20, r24
    1674:	4e 5f       	subi	r20, 0xFE	; 254
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	24 17       	cp	r18, r20
    167a:	35 07       	cpc	r19, r21
    167c:	48 f0       	brcs	.+18     	; 0x1690 <malloc+0x120>
    167e:	4e 0f       	add	r20, r30
    1680:	5f 1f       	adc	r21, r31
    1682:	40 93 2b 29 	sts	0x292B, r20	; 0x80292b <__brkval>
    1686:	50 93 2c 29 	sts	0x292C, r21	; 0x80292c <__brkval+0x1>
    168a:	81 93       	st	Z+, r24
    168c:	91 93       	st	Z+, r25
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <malloc+0x124>
    1690:	e0 e0       	ldi	r30, 0x00	; 0
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	cf 01       	movw	r24, r30
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <free>:
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	09 f4       	brne	.+2      	; 0x16aa <free+0xa>
    16a8:	81 c0       	rjmp	.+258    	; 0x17ac <free+0x10c>
    16aa:	fc 01       	movw	r30, r24
    16ac:	32 97       	sbiw	r30, 0x02	; 2
    16ae:	12 82       	std	Z+2, r1	; 0x02
    16b0:	13 82       	std	Z+3, r1	; 0x03
    16b2:	a0 91 2d 29 	lds	r26, 0x292D	; 0x80292d <__flp>
    16b6:	b0 91 2e 29 	lds	r27, 0x292E	; 0x80292e <__flp+0x1>
    16ba:	10 97       	sbiw	r26, 0x00	; 0
    16bc:	81 f4       	brne	.+32     	; 0x16de <free+0x3e>
    16be:	20 81       	ld	r18, Z
    16c0:	31 81       	ldd	r19, Z+1	; 0x01
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	20 91 2b 29 	lds	r18, 0x292B	; 0x80292b <__brkval>
    16ca:	30 91 2c 29 	lds	r19, 0x292C	; 0x80292c <__brkval+0x1>
    16ce:	28 17       	cp	r18, r24
    16d0:	39 07       	cpc	r19, r25
    16d2:	51 f5       	brne	.+84     	; 0x1728 <free+0x88>
    16d4:	e0 93 2b 29 	sts	0x292B, r30	; 0x80292b <__brkval>
    16d8:	f0 93 2c 29 	sts	0x292C, r31	; 0x80292c <__brkval+0x1>
    16dc:	67 c0       	rjmp	.+206    	; 0x17ac <free+0x10c>
    16de:	ed 01       	movw	r28, r26
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ce 17       	cp	r28, r30
    16e6:	df 07       	cpc	r29, r31
    16e8:	40 f4       	brcc	.+16     	; 0x16fa <free+0x5a>
    16ea:	4a 81       	ldd	r20, Y+2	; 0x02
    16ec:	5b 81       	ldd	r21, Y+3	; 0x03
    16ee:	9e 01       	movw	r18, r28
    16f0:	41 15       	cp	r20, r1
    16f2:	51 05       	cpc	r21, r1
    16f4:	f1 f0       	breq	.+60     	; 0x1732 <free+0x92>
    16f6:	ea 01       	movw	r28, r20
    16f8:	f5 cf       	rjmp	.-22     	; 0x16e4 <free+0x44>
    16fa:	c2 83       	std	Z+2, r28	; 0x02
    16fc:	d3 83       	std	Z+3, r29	; 0x03
    16fe:	40 81       	ld	r20, Z
    1700:	51 81       	ldd	r21, Z+1	; 0x01
    1702:	84 0f       	add	r24, r20
    1704:	95 1f       	adc	r25, r21
    1706:	c8 17       	cp	r28, r24
    1708:	d9 07       	cpc	r29, r25
    170a:	59 f4       	brne	.+22     	; 0x1722 <free+0x82>
    170c:	88 81       	ld	r24, Y
    170e:	99 81       	ldd	r25, Y+1	; 0x01
    1710:	84 0f       	add	r24, r20
    1712:	95 1f       	adc	r25, r21
    1714:	02 96       	adiw	r24, 0x02	; 2
    1716:	80 83       	st	Z, r24
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	82 83       	std	Z+2, r24	; 0x02
    1720:	93 83       	std	Z+3, r25	; 0x03
    1722:	21 15       	cp	r18, r1
    1724:	31 05       	cpc	r19, r1
    1726:	29 f4       	brne	.+10     	; 0x1732 <free+0x92>
    1728:	e0 93 2d 29 	sts	0x292D, r30	; 0x80292d <__flp>
    172c:	f0 93 2e 29 	sts	0x292E, r31	; 0x80292e <__flp+0x1>
    1730:	3d c0       	rjmp	.+122    	; 0x17ac <free+0x10c>
    1732:	e9 01       	movw	r28, r18
    1734:	ea 83       	std	Y+2, r30	; 0x02
    1736:	fb 83       	std	Y+3, r31	; 0x03
    1738:	49 91       	ld	r20, Y+
    173a:	59 91       	ld	r21, Y+
    173c:	c4 0f       	add	r28, r20
    173e:	d5 1f       	adc	r29, r21
    1740:	ec 17       	cp	r30, r28
    1742:	fd 07       	cpc	r31, r29
    1744:	61 f4       	brne	.+24     	; 0x175e <free+0xbe>
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	84 0f       	add	r24, r20
    174c:	95 1f       	adc	r25, r21
    174e:	02 96       	adiw	r24, 0x02	; 2
    1750:	e9 01       	movw	r28, r18
    1752:	88 83       	st	Y, r24
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	9b 83       	std	Y+3, r25	; 0x03
    175e:	e0 e0       	ldi	r30, 0x00	; 0
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	12 96       	adiw	r26, 0x02	; 2
    1764:	8d 91       	ld	r24, X+
    1766:	9c 91       	ld	r25, X
    1768:	13 97       	sbiw	r26, 0x03	; 3
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	19 f0       	breq	.+6      	; 0x1774 <free+0xd4>
    176e:	fd 01       	movw	r30, r26
    1770:	dc 01       	movw	r26, r24
    1772:	f7 cf       	rjmp	.-18     	; 0x1762 <free+0xc2>
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	9d 01       	movw	r18, r26
    177c:	2e 5f       	subi	r18, 0xFE	; 254
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	20 91 2b 29 	lds	r18, 0x292B	; 0x80292b <__brkval>
    1788:	30 91 2c 29 	lds	r19, 0x292C	; 0x80292c <__brkval+0x1>
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	69 f4       	brne	.+26     	; 0x17ac <free+0x10c>
    1792:	30 97       	sbiw	r30, 0x00	; 0
    1794:	29 f4       	brne	.+10     	; 0x17a0 <free+0x100>
    1796:	10 92 2d 29 	sts	0x292D, r1	; 0x80292d <__flp>
    179a:	10 92 2e 29 	sts	0x292E, r1	; 0x80292e <__flp+0x1>
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <free+0x104>
    17a0:	12 82       	std	Z+2, r1	; 0x02
    17a2:	13 82       	std	Z+3, r1	; 0x03
    17a4:	a0 93 2b 29 	sts	0x292B, r26	; 0x80292b <__brkval>
    17a8:	b0 93 2c 29 	sts	0x292C, r27	; 0x80292c <__brkval+0x1>
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <memcpy>:
    17b2:	fb 01       	movw	r30, r22
    17b4:	dc 01       	movw	r26, r24
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <memcpy+0xa>
    17b8:	01 90       	ld	r0, Z+
    17ba:	0d 92       	st	X+, r0
    17bc:	41 50       	subi	r20, 0x01	; 1
    17be:	50 40       	sbci	r21, 0x00	; 0
    17c0:	d8 f7       	brcc	.-10     	; 0x17b8 <memcpy+0x6>
    17c2:	08 95       	ret

000017c4 <_exit>:
    17c4:	f8 94       	cli

000017c6 <__stop_program>:
    17c6:	ff cf       	rjmp	.-2      	; 0x17c6 <__stop_program>
